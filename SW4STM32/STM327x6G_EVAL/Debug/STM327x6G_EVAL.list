
STM327x6G_EVAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d42c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000067c0  0800d5fc  0800d5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013dbc  08013dbc  00023dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013dc4  08013dc4  00023dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013dc8  08013dc8  00023dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000019c  20000000  08013dcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000862c  2000019c  08013f68  0003019c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  200087c8  08013f68  000387c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00024805  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000495eb  00000000  00000000  000549d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009081  00000000  00000000  0009dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001d70  00000000  00000000  000a7040  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001169cf  00000000  00000000  000a8db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ce0  00000000  00000000  001bf780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001d1dc  00000000  00000000  001c2460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000349fe  00000000  00000000  001df63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0021403a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000630c  00000000  00000000  002140b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .RxDecripSection 00000080  2004c000  2004c000  0003c000  2**2
                  ALLOC
 21 .RxarraySection 000017d0  2004c100  2004c100  0003c100  2**0
                  ALLOC
 22 .TxDescripSection 00000080  2004c080  2004c080  0003c080  2**2
                  ALLOC
 23 .TxarraySection 000017d0  2004d8d0  2004d8d0  0003d8d0  2**0
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d5e4 	.word	0x0800d5e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	0800d5e4 	.word	0x0800d5e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005b6:	e003      	b.n	80005c0 <LoopCopyDataInit>

080005b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005be:	3104      	adds	r1, #4

080005c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005c8:	d3f6      	bcc.n	80005b8 <CopyDataInit>
  ldr  r2, =_sbss
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005cc:	e002      	b.n	80005d4 <LoopFillZerobss>

080005ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005d0:	f842 3b04 	str.w	r3, [r2], #4

080005d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005d8:	d3f9      	bcc.n	80005ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005da:	f002 fc25 	bl	8002e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005de:	f00c f82f 	bl	800c640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005e2:	f000 fb7b 	bl	8000cdc <main>
  bx  lr    
 80005e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005e8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80005ec:	08013dcc 	.word	0x08013dcc
  ldr  r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005f4:	2000019c 	.word	0x2000019c
  ldr  r2, =_sbss
 80005f8:	2000019c 	.word	0x2000019c
  ldr  r3, = _ebss
 80005fc:	200087c8 	.word	0x200087c8

08000600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_IRQHandler>
	...

08000604 <_sbrk>:




caddr_t _sbrk(int incr)
{
 8000604:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <_sbrk+0x34>)
{
 8000608:	4602      	mov	r2, r0
	if (heap_end == 0)
 800060a:	6819      	ldr	r1, [r3, #0]
 800060c:	b909      	cbnz	r1, 8000612 <_sbrk+0xe>
		heap_end = &end;
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <_sbrk+0x38>)
 8000610:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000612:	490b      	ldr	r1, [pc, #44]	; (8000640 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 8000614:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000616:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000618:	4402      	add	r2, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800061a:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 800061c:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000620:	428a      	cmp	r2, r1
 8000622:	d906      	bls.n	8000632 <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000624:	f00c f806 	bl	800c634 <__errno>
 8000628:	230c      	movs	r3, #12
 800062a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000630:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8000632:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000634:	e7fc      	b.n	8000630 <_sbrk+0x2c>
 8000636:	bf00      	nop
 8000638:	200001b8 	.word	0x200001b8
 800063c:	200087c8 	.word	0x200087c8
 8000640:	e000ed08 	.word	0xe000ed08

08000644 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	460e      	mov	r6, r1
 8000648:	4615      	mov	r5, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	460c      	mov	r4, r1
 800064c:	1ba3      	subs	r3, r4, r6
 800064e:	429d      	cmp	r5, r3
 8000650:	dc01      	bgt.n	8000656 <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8000652:	4628      	mov	r0, r5
 8000654:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 8000656:	f814 0b01 	ldrb.w	r0, [r4], #1
 800065a:	f000 fe97 	bl	800138c <__io_putchar>
 800065e:	e7f5      	b.n	800064c <_write+0x8>

08000660 <_close>:

int _close(int file)
{
	return -1;
}
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	4770      	bx	lr

08000666 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800066a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800066c:	604b      	str	r3, [r1, #4]
}
 800066e:	4770      	bx	lr

08000670 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000670:	2001      	movs	r0, #1
 8000672:	4770      	bx	lr

08000674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000674:	2000      	movs	r0, #0
 8000676:	4770      	bx	lr

08000678 <_read>:

int _read(int file, char *ptr, int len)
{
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	460e      	mov	r6, r1
 800067c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	460c      	mov	r4, r1
 8000680:	1ba3      	subs	r3, r4, r6
 8000682:	429d      	cmp	r5, r3
 8000684:	dc01      	bgt.n	800068a <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 8000686:	4628      	mov	r0, r5
 8000688:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 800068a:	f3af 8000 	nop.w
 800068e:	f804 0b01 	strb.w	r0, [r4], #1
 8000692:	e7f5      	b.n	8000680 <_read+0x8>

08000694 <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
  if (netif_is_up(netif))
 8000694:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8000698:	f013 0f01 	tst.w	r3, #1
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <User_notification+0x24>)
 800069e:	d002      	beq.n	80006a6 <User_notification+0x12>
 {
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
#else    
    /* Turn On LED 2 to indicate ETH and LwIP init error */
    BSP_LED_On(LED2);
#endif /* USE_LCD */
  } 
}
 80006a4:	4770      	bx	lr
    DHCP_state = DHCP_LINK_DOWN;
 80006a6:	2205      	movs	r2, #5
   LCD_UsrLog ("The network cable is not connected \n");
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <User_notification+0x28>)
    DHCP_state = DHCP_LINK_DOWN;
 80006aa:	701a      	strb	r2, [r3, #0]
   LCD_UsrLog ("The network cable is not connected \n");
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <User_notification+0x2c>)
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <User_notification+0x30>)
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	f00c b87f 	b.w	800c7b4 <puts>
 80006b6:	bf00      	nop
 80006b8:	200001bc 	.word	0x200001bc
 80006bc:	08011444 	.word	0x08011444
 80006c0:	200042c0 	.word	0x200042c0
 80006c4:	ff000080 	.word	0xff000080

080006c8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;
#endif
  
  if(netif_is_link_up(netif))
 80006ca:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 80006ce:	4607      	mov	r7, r0
 80006d0:	4c0d      	ldr	r4, [pc, #52]	; (8000708 <ethernetif_notify_conn_changed+0x40>)
  if(netif_is_link_up(netif))
 80006d2:	f013 0f04 	tst.w	r3, #4
 80006d6:	4d0d      	ldr	r5, [pc, #52]	; (800070c <ethernetif_notify_conn_changed+0x44>)
 80006d8:	4e0d      	ldr	r6, [pc, #52]	; (8000710 <ethernetif_notify_conn_changed+0x48>)
 80006da:	d00a      	beq.n	80006f2 <ethernetif_notify_conn_changed+0x2a>
  {
#ifdef USE_LCD
    LCD_UsrLog ("The network cable is now connected \n");
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <ethernetif_notify_conn_changed+0x4c>)
 80006de:	6025      	str	r5, [r4, #0]
 80006e0:	f00c f868 	bl	800c7b4 <puts>
    BSP_LED_On(LED1);
#endif /* USE_LCD */
    
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 80006e4:	2301      	movs	r3, #1
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#endif
#endif /* USE_DHCP */
    
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);     
 80006e6:	4638      	mov	r0, r7
    DHCP_state = DHCP_START;
 80006e8:	7033      	strb	r3, [r6, #0]
#else
    BSP_LED_Off(LED1);
    BSP_LED_On(LED2);
#endif /* USE_LCD */    
  }
}
 80006ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    netif_set_up(netif);     
 80006ee:	f007 be3b 	b.w	8008368 <netif_set_up>
    DHCP_state = DHCP_LINK_DOWN;
 80006f2:	2305      	movs	r3, #5
 80006f4:	7033      	strb	r3, [r6, #0]
    netif_set_down(netif);
 80006f6:	f007 fe51 	bl	800839c <netif_set_down>
    LCD_UsrLog ("The network cable is not connected \n");
 80006fa:	6025      	str	r5, [r4, #0]
 80006fc:	4806      	ldr	r0, [pc, #24]	; (8000718 <ethernetif_notify_conn_changed+0x50>)
}
 80006fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_UsrLog ("The network cable is not connected \n");
 8000702:	f00c b857 	b.w	800c7b4 <puts>
 8000706:	bf00      	nop
 8000708:	200042c0 	.word	0x200042c0
 800070c:	ff000080 	.word	0xff000080
 8000710:	200001bc 	.word	0x200001bc
 8000714:	08011468 	.word	0x08011468
 8000718:	08011444 	.word	0x08011444

0800071c <DHCP_Process>:
  * @brief  DHCP_Process_Handle
  * @param  None
  * @retval None
  */
void DHCP_Process(struct netif *netif)
{
 800071c:	b530      	push	{r4, r5, lr}
  struct dhcp *dhcp;   
#ifdef USE_LCD 
  uint8_t iptxt[20];
#endif
  
  switch (DHCP_state)
 800071e:	4d2e      	ldr	r5, [pc, #184]	; (80007d8 <DHCP_Process+0xbc>)
{
 8000720:	b089      	sub	sp, #36	; 0x24
 8000722:	4604      	mov	r4, r0
  switch (DHCP_state)
 8000724:	782b      	ldrb	r3, [r5, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b02      	cmp	r3, #2
 800072a:	d013      	beq.n	8000754 <DHCP_Process+0x38>
 800072c:	2b05      	cmp	r3, #5
 800072e:	d04d      	beq.n	80007cc <DHCP_Process+0xb0>
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10d      	bne.n	8000750 <DHCP_Process+0x34>
  {
    case DHCP_START:
    {
      ip_addr_set_zero_ip4(&netif->ip_addr);
 8000734:	2300      	movs	r3, #0
      ip_addr_set_zero_ip4(&netif->netmask);
 8000736:	e9c0 3301 	strd	r3, r3, [r0, #4]
      ip_addr_set_zero_ip4(&netif->gw);
 800073a:	60c3      	str	r3, [r0, #12]
      DHCP_state = DHCP_WAIT_ADDRESS;
 800073c:	2302      	movs	r3, #2
 800073e:	702b      	strb	r3, [r5, #0]
      dhcp_start(netif);
 8000740:	f005 fe5a 	bl	80063f8 <dhcp_start>
#ifdef USE_LCD
      LCD_UsrLog ("  State: Looking for DHCP server ...\n");
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <DHCP_Process+0xc0>)
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <DHCP_Process+0xc4>)
 8000748:	4826      	ldr	r0, [pc, #152]	; (80007e4 <DHCP_Process+0xc8>)
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	f00c f832 	bl	800c7b4 <puts>
      DHCP_state = DHCP_OFF; 
    }
    break;
  default: break;
  }
}
 8000750:	b009      	add	sp, #36	; 0x24
 8000752:	bd30      	pop	{r4, r5, pc}
      if (dhcp_supplied_address(netif)) 
 8000754:	f005 fde0 	bl	8006318 <dhcp_supplied_address>
 8000758:	b180      	cbz	r0, 800077c <DHCP_Process+0x60>
        DHCP_state = DHCP_ADDRESS_ASSIGNED;
 800075a:	2303      	movs	r3, #3
        sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 800075c:	1d20      	adds	r0, r4, #4
        DHCP_state = DHCP_ADDRESS_ASSIGNED;
 800075e:	702b      	strb	r3, [r5, #0]
        sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 8000760:	f006 fe36 	bl	80073d0 <ip4addr_ntoa>
 8000764:	4601      	mov	r1, r0
 8000766:	a803      	add	r0, sp, #12
 8000768:	f00c f860 	bl	800c82c <strcpy>
        LCD_UsrLog ("IP address assigned by a DHCP server: %s\n", iptxt); 
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <DHCP_Process+0xc0>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <DHCP_Process+0xc4>)
 8000770:	a903      	add	r1, sp, #12
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <DHCP_Process+0xcc>)
 8000774:	601a      	str	r2, [r3, #0]
          LCD_UsrLog ("Static IP address: %s\n", iptxt);   
 8000776:	f00b ffa9 	bl	800c6cc <iprintf>
 800077a:	e7e9      	b.n	8000750 <DHCP_Process+0x34>
        if (dhcp->tries > MAX_DHCP_TRIES)
 800077c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800077e:	799b      	ldrb	r3, [r3, #6]
 8000780:	2b04      	cmp	r3, #4
 8000782:	d9e5      	bls.n	8000750 <DHCP_Process+0x34>
          DHCP_state = DHCP_TIMEOUT;
 8000784:	2304      	movs	r3, #4
          dhcp_stop(netif);
 8000786:	4620      	mov	r0, r4
          DHCP_state = DHCP_TIMEOUT;
 8000788:	702b      	strb	r3, [r5, #0]
          dhcp_stop(netif);
 800078a:	f005 ff81 	bl	8006690 <dhcp_stop>
          IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <DHCP_Process+0xd0>)
 8000790:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
          netif_set_addr(netif, &ipaddr, &netmask, &gw);
 8000794:	4669      	mov	r1, sp
 8000796:	4620      	mov	r0, r4
          LCD_UsrLog ("DHCP Timeout !! \n");
 8000798:	4d11      	ldr	r5, [pc, #68]	; (80007e0 <DHCP_Process+0xc4>)
          IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 800079a:	e9cd 2300 	strd	r2, r3, [sp]
          IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800079e:	ab08      	add	r3, sp, #32
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <DHCP_Process+0xd4>)
 80007a2:	f843 2d18 	str.w	r2, [r3, #-24]!
          netif_set_addr(netif, &ipaddr, &netmask, &gw);
 80007a6:	aa01      	add	r2, sp, #4
 80007a8:	f007 fd14 	bl	80081d4 <netif_set_addr>
          sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 80007ac:	1d20      	adds	r0, r4, #4
 80007ae:	f006 fe0f 	bl	80073d0 <ip4addr_ntoa>
          LCD_UsrLog ("DHCP Timeout !! \n");
 80007b2:	4c0a      	ldr	r4, [pc, #40]	; (80007dc <DHCP_Process+0xc0>)
          sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 80007b4:	4601      	mov	r1, r0
 80007b6:	a803      	add	r0, sp, #12
 80007b8:	f00c f838 	bl	800c82c <strcpy>
          LCD_UsrLog ("DHCP Timeout !! \n");
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <DHCP_Process+0xd8>)
 80007be:	6025      	str	r5, [r4, #0]
 80007c0:	f00b fff8 	bl	800c7b4 <puts>
          LCD_UsrLog ("Static IP address: %s\n", iptxt);   
 80007c4:	6025      	str	r5, [r4, #0]
 80007c6:	a903      	add	r1, sp, #12
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <DHCP_Process+0xdc>)
 80007ca:	e7d4      	b.n	8000776 <DHCP_Process+0x5a>
      dhcp_stop(netif);
 80007cc:	f005 ff60 	bl	8006690 <dhcp_stop>
      DHCP_state = DHCP_OFF; 
 80007d0:	2300      	movs	r3, #0
 80007d2:	702b      	strb	r3, [r5, #0]
}
 80007d4:	e7bc      	b.n	8000750 <DHCP_Process+0x34>
 80007d6:	bf00      	nop
 80007d8:	200001bc 	.word	0x200001bc
 80007dc:	200042c0 	.word	0x200042c0
 80007e0:	ff000080 	.word	0xff000080
 80007e4:	0801148c 	.word	0x0801148c
 80007e8:	080114b1 	.word	0x080114b1
 80007ec:	0a00a8c0 	.word	0x0a00a8c0
 80007f0:	0100a8c0 	.word	0x0100a8c0
 80007f4:	080114db 	.word	0x080114db
 80007f8:	080114ec 	.word	0x080114ec

080007fc <DHCP_Periodic_Handle>:
  * @brief  DHCP periodic check
  * @param  localtime the current LocalTime value
  * @retval None
  */
void DHCP_Periodic_Handle(struct netif *netif)
{  
 80007fc:	b538      	push	{r3, r4, r5, lr}
  /* Fine DHCP periodic process every 500ms */
  if (HAL_GetTick() - DHCPfineTimer >= DHCP_FINE_TIMER_MSECS)
 80007fe:	4c09      	ldr	r4, [pc, #36]	; (8000824 <DHCP_Periodic_Handle+0x28>)
{  
 8000800:	4605      	mov	r5, r0
  if (HAL_GetTick() - DHCPfineTimer >= DHCP_FINE_TIMER_MSECS)
 8000802:	f002 fb7d 	bl	8002f00 <HAL_GetTick>
 8000806:	6863      	ldr	r3, [r4, #4]
 8000808:	1ac0      	subs	r0, r0, r3
 800080a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800080e:	d307      	bcc.n	8000820 <DHCP_Periodic_Handle+0x24>
  {
    DHCPfineTimer =  HAL_GetTick();
 8000810:	f002 fb76 	bl	8002f00 <HAL_GetTick>
 8000814:	6060      	str	r0, [r4, #4]
    /* process DHCP state machine */
    DHCP_Process(netif);    
 8000816:	4628      	mov	r0, r5
  }
}
 8000818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    DHCP_Process(netif);    
 800081c:	f7ff bf7e 	b.w	800071c <DHCP_Process>
}
 8000820:	bd38      	pop	{r3, r4, r5, pc}
 8000822:	bf00      	nop
 8000824:	200001bc 	.word	0x200001bc

08000828 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become availale since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 800082c:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <low_level_output+0x98>)
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;

  DmaTxDesc = EthHandle.TxDesc;
  bufferoffset = 0;
 800082e:	f04f 0800 	mov.w	r8, #0
{
 8000832:	460c      	mov	r4, r1
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
    payloadoffset = 0;
    
    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000834:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000838:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800083a:	4647      	mov	r7, r8
 800083c:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 800083e:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 8000840:	b92c      	cbnz	r4, 800084e <low_level_output+0x26>
    bufferoffset = bufferoffset + byteslefttocopy;
    framelength = framelength + byteslefttocopy;
  }
   
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 8000842:	4639      	mov	r1, r7
 8000844:	481e      	ldr	r0, [pc, #120]	; (80008c0 <low_level_output+0x98>)
 8000846:	f002 ff3d 	bl	80036c4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800084a:	4620      	mov	r0, r4
 800084c:	e004      	b.n	8000858 <low_level_output+0x30>
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800084e:	6832      	ldr	r2, [r6, #0]
 8000850:	2a00      	cmp	r2, #0
 8000852:	da11      	bge.n	8000878 <low_level_output+0x50>
      errval = ERR_USE;
 8000854:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8000858:	9b00      	ldr	r3, [sp, #0]
 800085a:	f241 0214 	movw	r2, #4116	; 0x1014
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	5899      	ldr	r1, [r3, r2]
 8000862:	0689      	lsls	r1, r1, #26
 8000864:	d505      	bpl.n	8000872 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 8000866:	2120      	movs	r1, #32
 8000868:	5099      	str	r1, [r3, r2]
    
    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 800086a:	f241 0204 	movw	r2, #4100	; 0x1004
 800086e:	2100      	movs	r1, #0
 8000870:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8000872:	b003      	add	sp, #12
 8000874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    byteslefttocopy = q->len;
 8000878:	f8b4 900a 	ldrh.w	r9, [r4, #10]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800087c:	4645      	mov	r5, r8
    payloadoffset = 0;
 800087e:	f04f 0a00 	mov.w	sl, #0
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000882:	eb05 0809 	add.w	r8, r5, r9
 8000886:	6861      	ldr	r1, [r4, #4]
 8000888:	1958      	adds	r0, r3, r5
 800088a:	45d8      	cmp	r8, fp
 800088c:	4451      	add	r1, sl
 800088e:	d807      	bhi.n	80008a0 <low_level_output+0x78>
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8000890:	464a      	mov	r2, r9
 8000892:	9301      	str	r3, [sp, #4]
    framelength = framelength + byteslefttocopy;
 8000894:	444f      	add	r7, r9
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8000896:	f00b ff06 	bl	800c6a6 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800089a:	6824      	ldr	r4, [r4, #0]
 800089c:	9b01      	ldr	r3, [sp, #4]
 800089e:	e7cf      	b.n	8000840 <low_level_output+0x18>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80008a0:	ebab 0505 	sub.w	r5, fp, r5
 80008a4:	462a      	mov	r2, r5
 80008a6:	f00b fefe 	bl	800c6a6 <memcpy>
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80008aa:	68f6      	ldr	r6, [r6, #12]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80008ac:	6833      	ldr	r3, [r6, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dbd0      	blt.n	8000854 <low_level_output+0x2c>
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80008b2:	44aa      	add	sl, r5
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80008b4:	442f      	add	r7, r5
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80008b6:	68b3      	ldr	r3, [r6, #8]
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80008b8:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
      bufferoffset = 0;
 80008bc:	2500      	movs	r5, #0
 80008be:	e7e0      	b.n	8000882 <low_level_output+0x5a>
 80008c0:	200005dc 	.word	0x200005dc

080008c4 <HAL_ETH_MspInit>:
{ 
 80008c4:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4c4b      	ldr	r4, [pc, #300]	; (80009f4 <HAL_ETH_MspInit+0x130>)
{ 
 80008c8:	b091      	sub	sp, #68	; 0x44
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 80008ca:	2102      	movs	r1, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008cc:	484a      	ldr	r0, [pc, #296]	; (80009f8 <HAL_ETH_MspInit+0x134>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80008d0:	ad10      	add	r5, sp, #64	; 0x40
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6323      	str	r3, [r4, #48]	; 0x30
 80008d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6323      	str	r3, [r4, #48]	; 0x30
 80008ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6323      	str	r3, [r4, #48]	; 0x30
 80008fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6323      	str	r3, [r4, #48]	; 0x30
 800090e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000910:	f003 0310 	and.w	r3, r3, #16
 8000914:	9303      	str	r3, [sp, #12]
 8000916:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000918:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	6323      	str	r3, [r4, #48]	; 0x30
 8000920:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000922:	f003 0320 	and.w	r3, r3, #32
 8000926:	9304      	str	r3, [sp, #16]
 8000928:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800092c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000930:	6323      	str	r3, [r4, #48]	; 0x30
 8000932:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	9305      	str	r3, [sp, #20]
 800093a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800093e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000942:	6323      	str	r3, [r4, #48]	; 0x30
 8000944:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	9306      	str	r3, [sp, #24]
 800094c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE(); 
 800094e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000954:	6323      	str	r3, [r4, #48]	; 0x30
 8000956:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800095c:	9307      	str	r3, [sp, #28]
 800095e:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8000964:	2300      	movs	r3, #0
 8000966:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800096a:	230b      	movs	r3, #11
 800096c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800096e:	2386      	movs	r3, #134	; 0x86
 8000970:	f845 3d14 	str.w	r3, [r5, #-20]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000974:	4629      	mov	r1, r5
 8000976:	f003 f9c9 	bl	8003d0c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_5;
 800097a:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800097c:	4629      	mov	r1, r5
 800097e:	481f      	ldr	r0, [pc, #124]	; (80009fc <HAL_ETH_MspInit+0x138>)
  GPIO_InitStructure.Pin = GPIO_PIN_5;
 8000980:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000982:	f003 f9c3 	bl	8003d0c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_2;
 8000986:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000988:	4629      	mov	r1, r5
 800098a:	481d      	ldr	r0, [pc, #116]	; (8000a00 <HAL_ETH_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_2;
 800098c:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800098e:	f003 f9bd 	bl	8003d0c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000992:	233e      	movs	r3, #62	; 0x3e
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000994:	4629      	mov	r1, r5
 8000996:	481b      	ldr	r0, [pc, #108]	; (8000a04 <HAL_ETH_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000998:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800099a:	f003 f9b7 	bl	8003d0c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 800099e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009a2:	4629      	mov	r1, r5
 80009a4:	4818      	ldr	r0, [pc, #96]	; (8000a08 <HAL_ETH_MspInit+0x144>)
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 80009a6:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009a8:	f003 f9b0 	bl	8003d0c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_6 | GPIO_PIN_7;
 80009ac:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOH, &GPIO_InitStructure);
 80009ae:	4629      	mov	r1, r5
 80009b0:	4816      	ldr	r0, [pc, #88]	; (8000a0c <HAL_ETH_MspInit+0x148>)
  GPIO_InitStructure.Pin =  GPIO_PIN_6 | GPIO_PIN_7;
 80009b2:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStructure);
 80009b4:	f003 f9aa 	bl	8003d0c <HAL_GPIO_Init>
  __HAL_RCC_ETH_CLK_ENABLE();
 80009b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009be:	6323      	str	r3, [r4, #48]	; 0x30
 80009c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009c6:	9308      	str	r3, [sp, #32]
 80009c8:	9b08      	ldr	r3, [sp, #32]
 80009ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009d0:	6323      	str	r3, [r4, #48]	; 0x30
 80009d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009d8:	9309      	str	r3, [sp, #36]	; 0x24
 80009da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009e2:	6323      	str	r3, [r4, #48]	; 0x30
 80009e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009ea:	930a      	str	r3, [sp, #40]	; 0x28
 80009ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 80009ee:	b011      	add	sp, #68	; 0x44
 80009f0:	bd30      	pop	{r4, r5, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40021800 	.word	0x40021800
 8000a0c:	40021c00 	.word	0x40021c00

08000a10 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input(struct netif *netif)
{
 8000a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&EthHandle) != HAL_OK)
 8000a14:	4c33      	ldr	r4, [pc, #204]	; (8000ae4 <ethernetif_input+0xd4>)
{
 8000a16:	4682      	mov	sl, r0
  if (HAL_ETH_GetReceivedFrame(&EthHandle) != HAL_OK)
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f002 fec5 	bl	80037a8 <HAL_ETH_GetReceivedFrame>
 8000a1e:	4607      	mov	r7, r0
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d15c      	bne.n	8000ade <ethernetif_input+0xce>
  len = EthHandle.RxFrameInfos.length;
 8000a24:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  if (len > 0)
 8000a26:	2900      	cmp	r1, #0
 8000a28:	d050      	beq.n	8000acc <ethernetif_input+0xbc>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000a2a:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000a2e:	6c25      	ldr	r5, [r4, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000a30:	f007 fe30 	bl	8008694 <pbuf_alloc>
  if (p != NULL)
 8000a34:	4606      	mov	r6, r0
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d048      	beq.n	8000acc <ethernetif_input+0xbc>
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8000a3a:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8000a3e:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000a40:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000a44:	9500      	str	r5, [sp, #0]
      byteslefttocopy = q->len;
 8000a46:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8000a4a:	463d      	mov	r5, r7
      payloadoffset = 0;
 8000a4c:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000a4e:	18af      	adds	r7, r5, r2
 8000a50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8000a54:	9900      	ldr	r1, [sp, #0]
 8000a56:	455f      	cmp	r7, fp
 8000a58:	4418      	add	r0, r3
 8000a5a:	4429      	add	r1, r5
 8000a5c:	d825      	bhi.n	8000aaa <ethernetif_input+0x9a>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8000a5e:	f00b fe22 	bl	800c6a6 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8000a62:	f8d8 8000 	ldr.w	r8, [r8]
 8000a66:	f1b8 0f00 	cmp.w	r8, #0
 8000a6a:	d1ec      	bne.n	8000a46 <ethernetif_input+0x36>
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8000a6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000a72:	4282      	cmp	r2, r0
 8000a74:	d12c      	bne.n	8000ad0 <ethernetif_input+0xc0>
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	f241 0114 	movw	r1, #4116	; 0x1014
  EthHandle.RxFrameInfos.SegCount =0;
 8000a7c:	2200      	movs	r2, #0
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8000a7e:	5858      	ldr	r0, [r3, r1]
  EthHandle.RxFrameInfos.SegCount =0;
 8000a80:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8000a82:	0600      	lsls	r0, r0, #24
 8000a84:	d504      	bpl.n	8000a90 <ethernetif_input+0x80>
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 8000a86:	2080      	movs	r0, #128	; 0x80
 8000a88:	5058      	str	r0, [r3, r1]
    EthHandle.Instance->DMARPDR = 0;
 8000a8a:	f241 0108 	movw	r1, #4104	; 0x1008
 8000a8e:	505a      	str	r2, [r3, r1]
  
  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8000a90:	b32e      	cbz	r6, 8000ade <ethernetif_input+0xce>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8000a92:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000a96:	4651      	mov	r1, sl
 8000a98:	4630      	mov	r0, r6
 8000a9a:	4798      	blx	r3
    
  if (err != ERR_OK)
 8000a9c:	b1f8      	cbz	r0, 8000ade <ethernetif_input+0xce>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8000a9e:	4630      	mov	r0, r6
    p = NULL;
  }
}
 8000aa0:	b003      	add	sp, #12
 8000aa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8000aa6:	f007 bd93 	b.w	80085d0 <pbuf_free>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8000aaa:	ebab 0505 	sub.w	r5, fp, r5
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	462a      	mov	r2, r5
 8000ab2:	f00b fdf8 	bl	800c6a6 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000ab6:	f8d9 900c 	ldr.w	r9, [r9, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8000aba:	f2a7 52f4 	subw	r2, r7, #1524	; 0x5f4
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8000abe:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8000ac2:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8000ac4:	9b01      	ldr	r3, [sp, #4]
 8000ac6:	442b      	add	r3, r5
        bufferoffset = 0;
 8000ac8:	2500      	movs	r5, #0
 8000aca:	e7c0      	b.n	8000a4e <ethernetif_input+0x3e>
  struct pbuf *p = NULL;
 8000acc:	2600      	movs	r6, #0
 8000ace:	e7cd      	b.n	8000a6c <ethernetif_input+0x5c>
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8000ad0:	6819      	ldr	r1, [r3, #0]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8000ad2:	3201      	adds	r2, #1
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8000ad4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000ad8:	6019      	str	r1, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	e7c9      	b.n	8000a72 <ethernetif_input+0x62>
}
 8000ade:	b003      	add	sp, #12
 8000ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ae4:	200005dc 	.word	0x200005dc

08000ae8 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8000ae8:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000aea:	4604      	mov	r4, r0
{
 8000aec:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000aee:	b930      	cbnz	r0, 8000afe <ethernetif_init+0x16>
 8000af0:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <ethernetif_init+0xd8>)
 8000af2:	f240 2216 	movw	r2, #534	; 0x216
 8000af6:	4933      	ldr	r1, [pc, #204]	; (8000bc4 <ethernetif_init+0xdc>)
 8000af8:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <ethernetif_init+0xe0>)
 8000afa:	f00b fde7 	bl	800c6cc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8000afe:	f247 4373 	movw	r3, #29811	; 0x7473
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8000b02:	2202      	movs	r2, #2
  EthHandle.Instance = ETH;  
 8000b04:	4831      	ldr	r0, [pc, #196]	; (8000bcc <ethernetif_init+0xe4>)
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8000b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  netif->name[0] = IFNAME0;
 8000b0a:	8663      	strh	r3, [r4, #50]	; 0x32
  netif->name[1] = IFNAME1;
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8000b0c:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <ethernetif_init+0xe8>)
 8000b0e:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8000b10:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <ethernetif_init+0xec>)
 8000b12:	61a3      	str	r3, [r4, #24]
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8000b14:	2300      	movs	r3, #0
 8000b16:	e9cd 3201 	strd	r3, r2, [sp, #4]
  EthHandle.Instance = ETH;  
 8000b1a:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <ethernetif_init+0xf0>)
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8000b1c:	f8ad 300c 	strh.w	r3, [sp, #12]
  EthHandle.Instance = ETH;  
 8000b20:	6002      	str	r2, [r0, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000b22:	aa02      	add	r2, sp, #8
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 8000b24:	6203      	str	r3, [r0, #32]
  EthHandle.Init.MACAddr = macaddress;
 8000b26:	6142      	str	r2, [r0, #20]
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	e9c0 2101 	strd	r2, r1, [r0, #4]
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  EthHandle.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8000b32:	8202      	strh	r2, [r0, #16]
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000b34:	60c1      	str	r1, [r0, #12]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000b36:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 8000b3a:	f002 fee5 	bl	8003908 <HAL_ETH_Init>
 8000b3e:	b928      	cbnz	r0, 8000b4c <ethernetif_init+0x64>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8000b40:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <ethernetif_init+0xf4>)
 8000b50:	4923      	ldr	r1, [pc, #140]	; (8000be0 <ethernetif_init+0xf8>)
  netif->hwaddr[1] =  MAC_ADDR1;
 8000b52:	2500      	movs	r5, #0
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000b54:	481d      	ldr	r0, [pc, #116]	; (8000bcc <ethernetif_init+0xe4>)
 8000b56:	f002 fd3f 	bl	80035d8 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <ethernetif_init+0xfc>)
 8000b5c:	4922      	ldr	r1, [pc, #136]	; (8000be8 <ethernetif_init+0x100>)
 8000b5e:	2304      	movs	r3, #4
 8000b60:	481a      	ldr	r0, [pc, #104]	; (8000bcc <ethernetif_init+0xe4>)
 8000b62:	f002 fd75 	bl	8003650 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[1] =  MAC_ADDR1;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <ethernetif_init+0x104>)
  HAL_ETH_Start(&EthHandle);
 8000b68:	4818      	ldr	r0, [pc, #96]	; (8000bcc <ethernetif_init+0xe4>)
  netif->hwaddr[1] =  MAC_ADDR1;
 8000b6a:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
  netif->hwaddr[5] =  MAC_ADDR5;
 8000b6e:	2306      	movs	r3, #6
 8000b70:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000b74:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000b78:	f043 030a 	orr.w	r3, r3, #10
 8000b7c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_Start(&EthHandle);
 8000b80:	f002 ffbc 	bl	8003afc <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&EthHandle, PHY_MICR, &regvalue);
 8000b84:	aa01      	add	r2, sp, #4
 8000b86:	2111      	movs	r1, #17
 8000b88:	4810      	ldr	r0, [pc, #64]	; (8000bcc <ethernetif_init+0xe4>)
 8000b8a:	f002 fe4c 	bl	8003826 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8000b8e:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&EthHandle, PHY_MICR, regvalue );
 8000b90:	2111      	movs	r1, #17
 8000b92:	480e      	ldr	r0, [pc, #56]	; (8000bcc <ethernetif_init+0xe4>)
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8000b94:	f042 0203 	orr.w	r2, r2, #3
 8000b98:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&EthHandle, PHY_MICR, regvalue );
 8000b9a:	f002 fe7e 	bl	800389a <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&EthHandle, PHY_MISR, &regvalue);
 8000b9e:	aa01      	add	r2, sp, #4
 8000ba0:	2112      	movs	r1, #18
 8000ba2:	480a      	ldr	r0, [pc, #40]	; (8000bcc <ethernetif_init+0xe4>)
 8000ba4:	f002 fe3f 	bl	8003826 <HAL_ETH_ReadPHYRegister>
  regvalue |= PHY_MISR_LINK_INT_EN;
 8000ba8:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&EthHandle, PHY_MISR, regvalue);
 8000baa:	2112      	movs	r1, #18
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <ethernetif_init+0xe4>)
  regvalue |= PHY_MISR_LINK_INT_EN;
 8000bae:	f042 0220 	orr.w	r2, r2, #32
 8000bb2:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&EthHandle, PHY_MISR, regvalue);
 8000bb4:	f002 fe71 	bl	800389a <HAL_ETH_WritePHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8000bb8:	4628      	mov	r0, r5
 8000bba:	b005      	add	sp, #20
 8000bbc:	bd30      	pop	{r4, r5, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08011503 	.word	0x08011503
 8000bc4:	080117fc 	.word	0x080117fc
 8000bc8:	0801153a 	.word	0x0801153a
 8000bcc:	200005dc 	.word	0x200005dc
 8000bd0:	08006cc1 	.word	0x08006cc1
 8000bd4:	08000829 	.word	0x08000829
 8000bd8:	40028000 	.word	0x40028000
 8000bdc:	2004d8d0 	.word	0x2004d8d0
 8000be0:	2004c080 	.word	0x2004c080
 8000be4:	2004c100 	.word	0x2004c100
 8000be8:	2004c000 	.word	0x2004c000
 8000bec:	000205dc 	.word	0x000205dc

08000bf0 <sys_now>:
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
  return HAL_GetTick();
 8000bf0:	f002 b986 	b.w	8002f00 <HAL_GetTick>

08000bf4 <ethernetif_set_link>:
  * @brief  This function sets the netif link status.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(struct netif *netif)
{
 8000bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t regvalue = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	ac02      	add	r4, sp, #8
{
 8000bfa:	4605      	mov	r5, r0
  
  /* Read PHY_MISR*/
  HAL_ETH_ReadPHYRegister(&EthHandle, PHY_MISR, &regvalue);
 8000bfc:	2112      	movs	r1, #18
  uint32_t regvalue = 0;
 8000bfe:	f844 3d04 	str.w	r3, [r4, #-4]!
  HAL_ETH_ReadPHYRegister(&EthHandle, PHY_MISR, &regvalue);
 8000c02:	4622      	mov	r2, r4
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <ethernetif_set_link+0x3c>)
 8000c06:	f002 fe0e 	bl	8003826 <HAL_ETH_ReadPHYRegister>
  
  /* Check whether the link interrupt has occurred or not */
  if((regvalue & PHY_LINK_INTERRUPT) != (uint16_t)RESET)
 8000c0a:	9b01      	ldr	r3, [sp, #4]
 8000c0c:	049a      	lsls	r2, r3, #18
 8000c0e:	d50a      	bpl.n	8000c26 <ethernetif_set_link+0x32>
  {
    /* Read PHY_SR*/
    HAL_ETH_ReadPHYRegister(&EthHandle, PHY_SR, &regvalue);
 8000c10:	4622      	mov	r2, r4
 8000c12:	2110      	movs	r1, #16
 8000c14:	4806      	ldr	r0, [pc, #24]	; (8000c30 <ethernetif_set_link+0x3c>)
 8000c16:	f002 fe06 	bl	8003826 <HAL_ETH_ReadPHYRegister>
    
    /* Check whether the link is up or down*/
    if((regvalue & PHY_LINK_STATUS)!= (uint16_t)RESET)
 8000c1a:	9b01      	ldr	r3, [sp, #4]
    {
      netif_set_link_up(netif);
 8000c1c:	4628      	mov	r0, r5
    if((regvalue & PHY_LINK_STATUS)!= (uint16_t)RESET)
 8000c1e:	07db      	lsls	r3, r3, #31
 8000c20:	d503      	bpl.n	8000c2a <ethernetif_set_link+0x36>
      netif_set_link_up(netif);
 8000c22:	f007 fbd7 	bl	80083d4 <netif_set_link_up>
    else
    {
      netif_set_link_down(netif);
    }
  }
}
 8000c26:	b003      	add	sp, #12
 8000c28:	bd30      	pop	{r4, r5, pc}
      netif_set_link_down(netif);
 8000c2a:	f007 fbfb 	bl	8008424 <netif_set_link_down>
}
 8000c2e:	e7fa      	b.n	8000c26 <ethernetif_set_link+0x32>
 8000c30:	200005dc 	.word	0x200005dc

08000c34 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8000c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tickstart = 0;
  uint32_t regvalue = 0;
  
  if(netif_is_link_up(netif))
 8000c36:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  __IO uint32_t tickstart = 0;
 8000c3a:	2100      	movs	r1, #0
{
 8000c3c:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8000c3e:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8000c40:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8000c42:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8000c44:	d544      	bpl.n	8000cd0 <ethernetif_update_config+0x9c>
  { 
    /* Restart the auto-negotiation */
    if(EthHandle.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000c46:	4c24      	ldr	r4, [pc, #144]	; (8000cd8 <ethernetif_update_config+0xa4>)
 8000c48:	6863      	ldr	r3, [r4, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d035      	beq.n	8000cba <ethernetif_update_config+0x86>
      tickstart = HAL_GetTick();
      
      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&EthHandle, PHY_BSR, &regvalue);
 8000c4e:	4626      	mov	r6, r4
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, PHY_AUTONEGOTIATION);
 8000c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c54:	4620      	mov	r0, r4
 8000c56:	f002 fe20 	bl	800389a <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8000c5a:	f002 f951 	bl	8002f00 <HAL_GetTick>
 8000c5e:	9000      	str	r0, [sp, #0]
        HAL_ETH_ReadPHYRegister(&EthHandle, PHY_BSR, &regvalue);
 8000c60:	aa01      	add	r2, sp, #4
 8000c62:	2101      	movs	r1, #1
 8000c64:	4630      	mov	r0, r6
 8000c66:	f002 fdde 	bl	8003826 <HAL_ETH_ReadPHYRegister>
        
        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8000c6a:	f002 f949 	bl	8002f00 <HAL_GetTick>
 8000c6e:	9b00      	ldr	r3, [sp, #0]
 8000c70:	1ac0      	subs	r0, r0, r3
 8000c72:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c76:	d820      	bhi.n	8000cba <ethernetif_update_config+0x86>
        {
          /* In case of timeout */
          goto error;
        }
        
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000c78:	9b01      	ldr	r3, [sp, #4]
 8000c7a:	069a      	lsls	r2, r3, #26
 8000c7c:	d5f0      	bpl.n	8000c60 <ethernetif_update_config+0x2c>
      
      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&EthHandle, PHY_SR, &regvalue);
 8000c7e:	aa01      	add	r2, sp, #4
 8000c80:	2110      	movs	r1, #16
 8000c82:	4815      	ldr	r0, [pc, #84]	; (8000cd8 <ethernetif_update_config+0xa4>)
 8000c84:	f002 fdcf 	bl	8003826 <HAL_ETH_ReadPHYRegister>
      
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000c88:	9b01      	ldr	r3, [sp, #4]
 8000c8a:	f013 0204 	ands.w	r2, r3, #4
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000c8e:	bf18      	it	ne
 8000c90:	f44f 6200 	movne.w	r2, #2048	; 0x800
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        EthHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8000c94:	079b      	lsls	r3, r3, #30
      {  
        /* Set Ethernet speed to 10M following the auto-negotiation */
        EthHandle.Init.Speed = ETH_SPEED_10M; 
 8000c96:	bf4c      	ite	mi
 8000c98:	2300      	movmi	r3, #0
      }
      else
      {   
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        EthHandle.Init.Speed = ETH_SPEED_100M;
 8000c9a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
        EthHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000c9e:	60e2      	str	r2, [r4, #12]
        EthHandle.Init.Speed = ETH_SPEED_100M;
 8000ca0:	60a3      	str	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, ((uint16_t)(EthHandle.Init.DuplexMode >> 3) |
                                                     (uint16_t)(EthHandle.Init.Speed >> 1))); 
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&EthHandle, (ETH_MACInitTypeDef *) NULL);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <ethernetif_update_config+0xa4>)
 8000ca6:	f002 ffa5 	bl	8003bf4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&EthHandle);   
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <ethernetif_update_config+0xa4>)
 8000cac:	f002 ff26 	bl	8003afc <HAL_ETH_Start>
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&EthHandle);
  }

  ethernetif_notify_conn_changed(netif);
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f7ff fd09 	bl	80006c8 <ethernetif_notify_conn_changed>
}
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
                                                     (uint16_t)(EthHandle.Init.Speed >> 1))); 
 8000cba:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, ((uint16_t)(EthHandle.Init.DuplexMode >> 3) |
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <ethernetif_update_config+0xa4>)
                                                     (uint16_t)(EthHandle.Init.Speed >> 1))); 
 8000cc2:	0852      	lsrs	r2, r2, #1
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, ((uint16_t)(EthHandle.Init.DuplexMode >> 3) |
 8000cc4:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8000cc8:	b292      	uxth	r2, r2
 8000cca:	f002 fde6 	bl	800389a <HAL_ETH_WritePHYRegister>
 8000cce:	e7e8      	b.n	8000ca2 <ethernetif_update_config+0x6e>
    HAL_ETH_Stop(&EthHandle);
 8000cd0:	4801      	ldr	r0, [pc, #4]	; (8000cd8 <ethernetif_update_config+0xa4>)
 8000cd2:	f002 ff51 	bl	8003b78 <HAL_ETH_Stop>
 8000cd6:	e7eb      	b.n	8000cb0 <ethernetif_update_config+0x7c>
 8000cd8:	200005dc 	.word	0x200005dc

08000cdc <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b096      	sub	sp, #88	; 0x58
  /* Disable the MPU */
  HAL_MPU_Disable();
  
  /* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8000ce0:	4c7d      	ldr	r4, [pc, #500]	; (8000ed8 <main+0x1fc>)
  HAL_MPU_Disable();
 8000ce2:	f002 f98d 	bl	8003000 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ce6:	2301      	movs	r3, #1
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ce8:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cea:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8000cee:	4b7b      	ldr	r3, [pc, #492]	; (8000edc <main+0x200>)
 8000cf0:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cfa:	f002 f9a3 	bl	8003044 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cfe:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.BaseAddress = 0x2004C000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d02:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8000f10 <main+0x234>
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d06:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8000d08:	940b      	str	r4, [sp, #44]	; 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d0e:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8000d12:	e9cd c30c 	strd	ip, r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d16:	f002 f995 	bl	8003044 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d1a:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 8000d1e:	f04f 4e40 	mov.w	lr, #3221225472	; 0xc0000000
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d22:	2004      	movs	r0, #4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d24:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 8000d28:	4b6d      	ldr	r3, [pc, #436]	; (8000ee0 <main+0x204>)
 8000d2a:	e9cd e30b 	strd	lr, r3, [sp, #44]	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d32:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d34:	f002 f974 	bl	8003020 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d3c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d40:	4b68      	ldr	r3, [pc, #416]	; (8000ee4 <main+0x208>)
 8000d42:	2100      	movs	r1, #0
 8000d44:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d4c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000d56:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d5c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d60:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d64:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d68:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d6c:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d70:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d74:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000d78:	0784      	lsls	r4, r0, #30
 8000d7a:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d7c:	ea02 0c05 	and.w	ip, r2, r5
 8000d80:	4621      	mov	r1, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d82:	4606      	mov	r6, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d84:	ea4c 0701 	orr.w	r7, ip, r1
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d88:	3e01      	subs	r6, #1
 8000d8a:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d8e:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000d92:	1c77      	adds	r7, r6, #1
 8000d94:	d1f6      	bne.n	8000d84 <main+0xa8>
 8000d96:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8000d98:	f112 0f20 	cmn.w	r2, #32
 8000d9c:	d1ee      	bne.n	8000d7c <main+0xa0>
 8000d9e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dae:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 8000db2:	f002 f883 	bl	8002ebc <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db6:	2501      	movs	r5, #1
 8000db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbc:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLN = 400;  
 8000dbe:	2119      	movs	r1, #25
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc2:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc4:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd0:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;  
 8000dd4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000dd8:	e9cd 1312 	strd	r1, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ddc:	2309      	movs	r3, #9
 8000dde:	9315      	str	r3, [sp, #84]	; 0x54
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f003 fdcc 	bl	800497c <HAL_RCC_OscConfig>
 8000de4:	b100      	cbz	r0, 8000de8 <main+0x10c>
 8000de6:	e7fe      	b.n	8000de6 <main+0x10a>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000de8:	f003 fd90 	bl	800490c <HAL_PWREx_EnableOverDrive>
 8000dec:	b100      	cbz	r0, 8000df0 <main+0x114>
 8000dee:	e7fe      	b.n	8000dee <main+0x112>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000df0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000df2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df6:	9007      	str	r0, [sp, #28]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000df8:	2107      	movs	r1, #7
 8000dfa:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfc:	e9cd 3705 	strd	r3, r7, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e04:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e08:	f003 ffa2 	bl	8004d50 <HAL_RCC_ClockConfig>
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	b100      	cbz	r0, 8000e12 <main+0x136>
 8000e10:	e7fe      	b.n	8000e10 <main+0x134>
  BSP_LED_Init(LED1);
 8000e12:	f001 fb17 	bl	8002444 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000e16:	4628      	mov	r0, r5
 8000e18:	f001 fb14 	bl	8002444 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	f001 fb11 	bl	8002444 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000e22:	2003      	movs	r0, #3
 8000e24:	f001 fb0e 	bl	8002444 <BSP_LED_Init>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0x0, 0x0);
 8000e28:	4622      	mov	r2, r4
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	f002 f891 	bl	8002f54 <HAL_NVIC_SetPriority>
  BSP_IO_Init();
 8000e32:	f001 fbaf 	bl	8002594 <BSP_IO_Init>
  BSP_IO_ConfigPin(MII_INT_PIN, IO_MODE_IT_FALLING_EDGE);
 8000e36:	2103      	movs	r1, #3
 8000e38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e3c:	f001 fbdc 	bl	80025f8 <BSP_IO_ConfigPin>
  BSP_LCD_Init();
 8000e40:	f001 fea2 	bl	8002b88 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8000e44:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000e48:	4628      	mov	r0, r5
 8000e4a:	f001 fc35 	bl	80026b8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f001 fc6a 	bl	8002728 <BSP_LCD_SelectLayer>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000e54:	4824      	ldr	r0, [pc, #144]	; (8000ee8 <main+0x20c>)
 8000e56:	f001 fc81 	bl	800275c <BSP_LCD_SetFont>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8000e5a:	4d24      	ldr	r5, [pc, #144]	; (8000eec <main+0x210>)
  LCD_LOG_Init();
 8000e5c:	f000 f9d4 	bl	8001208 <LCD_LOG_Init>
  LCD_LOG_SetHeader((uint8_t *)"TCP Echo Server Raw API");
 8000e60:	4823      	ldr	r0, [pc, #140]	; (8000ef0 <main+0x214>)
 8000e62:	f000 f9db 	bl	800121c <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter((uint8_t *)"STM32756G-EVAL board");
 8000e66:	4823      	ldr	r0, [pc, #140]	; (8000ef4 <main+0x218>)
 8000e68:	f000 fa0e 	bl	8001288 <LCD_LOG_SetFooter>
  LCD_UsrLog ("  State: Ethernet Initialization ...\n");
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <main+0x21c>)
 8000e6e:	4a23      	ldr	r2, [pc, #140]	; (8000efc <main+0x220>)
 8000e70:	4823      	ldr	r0, [pc, #140]	; (8000f00 <main+0x224>)
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	f00b fc9e 	bl	800c7b4 <puts>
  lwip_init();
 8000e78:	f006 fec0 	bl	8007bfc <lwip_init>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <main+0x228>)
 8000e7e:	aa05      	add	r2, sp, #20
 8000e80:	a904      	add	r1, sp, #16
 8000e82:	9302      	str	r3, [sp, #8]
 8000e84:	4628      	mov	r0, r5
 8000e86:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <main+0x22c>)
  ip_addr_set_zero_ip4(&gw);
 8000e88:	940a      	str	r4, [sp, #40]	; 0x28
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8000e8a:	e9cd 4300 	strd	r4, r3, [sp]
 8000e8e:	ab0a      	add	r3, sp, #40	; 0x28
  ip_addr_set_zero_ip4(&netmask);
 8000e90:	e9cd 4404 	strd	r4, r4, [sp, #16]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8000e94:	f007 f9ca 	bl	800822c <netif_add>
  netif_set_default(&gnetif);
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f007 fa5f 	bl	800835c <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8000e9e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    netif_set_up(&gnetif);
 8000ea2:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8000ea4:	075b      	lsls	r3, r3, #29
 8000ea6:	d514      	bpl.n	8000ed2 <main+0x1f6>
    netif_set_up(&gnetif);
 8000ea8:	f007 fa5e 	bl	8008368 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8000eac:	4917      	ldr	r1, [pc, #92]	; (8000f0c <main+0x230>)
 8000eae:	480f      	ldr	r0, [pc, #60]	; (8000eec <main+0x210>)
    ethernetif_input(&gnetif);
 8000eb0:	4c0e      	ldr	r4, [pc, #56]	; (8000eec <main+0x210>)
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8000eb2:	f007 fad1 	bl	8008458 <netif_set_link_callback>
  tcp_echoserver_init();
 8000eb6:	f000 f953 	bl	8001160 <tcp_echoserver_init>
  User_notification(&gnetif);
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <main+0x210>)
 8000ebc:	f7ff fbea 	bl	8000694 <User_notification>
    ethernetif_input(&gnetif);
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f7ff fda5 	bl	8000a10 <ethernetif_input>
    sys_check_timeouts();
 8000ec6:	f00b f85b 	bl	800bf80 <sys_check_timeouts>
    DHCP_Periodic_Handle(&gnetif);
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff fc96 	bl	80007fc <DHCP_Periodic_Handle>
 8000ed0:	e7f6      	b.n	8000ec0 <main+0x1e4>
    netif_set_down(&gnetif);
 8000ed2:	f007 fa63 	bl	800839c <netif_set_down>
 8000ed6:	e7e9      	b.n	8000eac <main+0x1d0>
 8000ed8:	2004c000 	.word	0x2004c000
 8000edc:	0301000d 	.word	0x0301000d
 8000ee0:	03000016 	.word	0x03000016
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	200000f4 	.word	0x200000f4
 8000eec:	20000624 	.word	0x20000624
 8000ef0:	08011562 	.word	0x08011562
 8000ef4:	0801157a 	.word	0x0801157a
 8000ef8:	200042c0 	.word	0x200042c0
 8000efc:	ff000080 	.word	0xff000080
 8000f00:	0801158f 	.word	0x0801158f
 8000f04:	0800c525 	.word	0x0800c525
 8000f08:	08000ae9 	.word	0x08000ae9
 8000f0c:	08000c35 	.word	0x08000c35
 8000f10:	03000007 	.word	0x03000007

08000f14 <HAL_GPIO_EXTI_Callback>:
{
 8000f14:	b508      	push	{r3, lr}
  if(BSP_IO_ITGetStatus(MII_INT_PIN))
 8000f16:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f1a:	f001 fb5b 	bl	80025d4 <BSP_IO_ITGetStatus>
 8000f1e:	b110      	cbz	r0, 8000f26 <HAL_GPIO_EXTI_Callback+0x12>
    ethernetif_set_link(&gnetif);
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000f22:	f7ff fe67 	bl	8000bf4 <ethernetif_set_link>
}
 8000f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_IO_ITClear();
 8000f2a:	f001 bb5b 	b.w	80025e4 <BSP_IO_ITClear>
 8000f2e:	bf00      	nop
 8000f30:	20000624 	.word	0x20000624

08000f34 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000f34:	4770      	bx	lr

08000f36 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler>

08000f38 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler>

08000f3a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler>

08000f3c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler>

08000f3e <DebugMon_Handler>:
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
  /* Update the LocalTime by adding 1 ms each SysTick interrupt */
  HAL_IncTick();
 8000f40:	f001 bfd2 	b.w	8002ee8 <HAL_IncTick>

08000f44 <EXTI9_5_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQOUT_PIN);
 8000f44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f48:	f002 bfce 	b.w	8003ee8 <HAL_GPIO_EXTI_IRQHandler>

08000f4c <tcp_echoserver_error>:
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
  if (es != NULL)
 8000f4c:	b108      	cbz	r0, 8000f52 <tcp_echoserver_error+0x6>
  {
    /*  free es structure */
    mem_free(es);
 8000f4e:	f006 be7f 	b.w	8007c50 <mem_free>
  }
}
 8000f52:	4770      	bx	lr

08000f54 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4604      	mov	r4, r0
 8000f58:	460d      	mov	r5, r1
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f007 ff86 	bl	8008e6c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000f60:	2100      	movs	r1, #0
 8000f62:	4620      	mov	r0, r4
 8000f64:	f007 ff9e 	bl	8008ea4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f007 ff82 	bl	8008e74 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000f70:	2100      	movs	r1, #0
 8000f72:	4620      	mov	r0, r4
 8000f74:	f007 ffac 	bl	8008ed0 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	f007 ffc5 	bl	8008f0c <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8000f82:	b115      	cbz	r5, 8000f8a <tcp_echoserver_connection_close+0x36>
  {
    mem_free(es);
 8000f84:	4628      	mov	r0, r5
 8000f86:	f006 fe63 	bl	8007c50 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8000f8a:	4620      	mov	r0, r4
}
 8000f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  tcp_close(tpcb);
 8000f90:	f008 bb32 	b.w	80095f8 <tcp_close>

08000f94 <tcp_echoserver_accept>:
{
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	460c      	mov	r4, r1
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f007 ff56 	bl	8008e4c <tcp_setprio>
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8000fa0:	200c      	movs	r0, #12
 8000fa2:	f006 ff9b 	bl	8007edc <mem_malloc>
  if (es != NULL)
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	b1b0      	cbz	r0, 8000fd8 <tcp_echoserver_accept+0x44>
    es->state = ES_ACCEPTED;
 8000faa:	2301      	movs	r3, #1
    es->p = NULL;
 8000fac:	2500      	movs	r5, #0
    es->pcb = newpcb;
 8000fae:	6044      	str	r4, [r0, #4]
    es->state = ES_ACCEPTED;
 8000fb0:	8003      	strh	r3, [r0, #0]
    es->p = NULL;
 8000fb2:	6085      	str	r5, [r0, #8]
    tcp_arg(newpcb, es);
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f007 ff59 	bl	8008e6c <tcp_arg>
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000fba:	490a      	ldr	r1, [pc, #40]	; (8000fe4 <tcp_echoserver_accept+0x50>)
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f007 ff59 	bl	8008e74 <tcp_recv>
    tcp_err(newpcb, tcp_echoserver_error);
 8000fc2:	4909      	ldr	r1, [pc, #36]	; (8000fe8 <tcp_echoserver_accept+0x54>)
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f007 ff83 	bl	8008ed0 <tcp_err>
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000fca:	4620      	mov	r0, r4
 8000fcc:	462a      	mov	r2, r5
 8000fce:	4907      	ldr	r1, [pc, #28]	; (8000fec <tcp_echoserver_accept+0x58>)
 8000fd0:	f007 ff9c 	bl	8008f0c <tcp_poll>
    ret_err = ERR_OK;
 8000fd4:	4628      	mov	r0, r5
}
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
    tcp_echoserver_connection_close(newpcb, es);
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f7ff ffbb 	bl	8000f54 <tcp_echoserver_connection_close>
    ret_err = ERR_MEM;
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	e7f8      	b.n	8000fd6 <tcp_echoserver_accept+0x42>
 8000fe4:	080010b9 	.word	0x080010b9
 8000fe8:	08000f4d 	.word	0x08000f4d
 8000fec:	08001039 	.word	0x08001039

08000ff0 <tcp_echoserver_send.isra.0>:
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	4605      	mov	r5, r0
 8000ff4:	460e      	mov	r6, r1
         (es->p != NULL) && 
 8000ff6:	6834      	ldr	r4, [r6, #0]
  while ((wr_err == ERR_OK) &&
 8000ff8:	b1ec      	cbz	r4, 8001036 <tcp_echoserver_send.isra.0+0x46>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000ffa:	8962      	ldrh	r2, [r4, #10]
         (es->p != NULL) && 
 8000ffc:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8001000:	4293      	cmp	r3, r2
 8001002:	d318      	bcc.n	8001036 <tcp_echoserver_send.isra.0+0x46>
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8001004:	2301      	movs	r3, #1
 8001006:	6861      	ldr	r1, [r4, #4]
 8001008:	4628      	mov	r0, r5
 800100a:	f009 ff2f 	bl	800ae6c <tcp_write>
    if (wr_err == ERR_OK)
 800100e:	b978      	cbnz	r0, 8001030 <tcp_echoserver_send.isra.0+0x40>
      es->p = ptr->next;
 8001010:	6820      	ldr	r0, [r4, #0]
      plen = ptr->len;
 8001012:	8967      	ldrh	r7, [r4, #10]
      es->p = ptr->next;
 8001014:	6030      	str	r0, [r6, #0]
      if(es->p != NULL)
 8001016:	b108      	cbz	r0, 800101c <tcp_echoserver_send.isra.0+0x2c>
        pbuf_ref(es->p);
 8001018:	f007 fc18 	bl	800884c <pbuf_ref>
        freed = pbuf_free(ptr);
 800101c:	4620      	mov	r0, r4
 800101e:	f007 fad7 	bl	80085d0 <pbuf_free>
      while(freed == 0);
 8001022:	2800      	cmp	r0, #0
 8001024:	d0fa      	beq.n	800101c <tcp_echoserver_send.isra.0+0x2c>
     tcp_recved(tpcb, plen);
 8001026:	4639      	mov	r1, r7
 8001028:	4628      	mov	r0, r5
 800102a:	f007 febd 	bl	8008da8 <tcp_recved>
 800102e:	e7e2      	b.n	8000ff6 <tcp_echoserver_send.isra.0+0x6>
   else if(wr_err == ERR_MEM)
 8001030:	3001      	adds	r0, #1
 8001032:	d100      	bne.n	8001036 <tcp_echoserver_send.isra.0+0x46>
     es->p = ptr;
 8001034:	6034      	str	r4, [r6, #0]
}
 8001036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001038 <tcp_echoserver_poll>:
{
 8001038:	b570      	push	{r4, r5, r6, lr}
 800103a:	460e      	mov	r6, r1
  if (es != NULL)
 800103c:	4605      	mov	r5, r0
 800103e:	b1a0      	cbz	r0, 800106a <tcp_echoserver_poll+0x32>
    if (es->p != NULL)
 8001040:	6884      	ldr	r4, [r0, #8]
 8001042:	b154      	cbz	r4, 800105a <tcp_echoserver_poll+0x22>
      tcp_sent(tpcb, tcp_echoserver_sent);
 8001044:	490d      	ldr	r1, [pc, #52]	; (800107c <tcp_echoserver_poll+0x44>)
 8001046:	4630      	mov	r0, r6
 8001048:	f007 ff2c 	bl	8008ea4 <tcp_sent>
      tcp_echoserver_send(tpcb, es);
 800104c:	f105 0108 	add.w	r1, r5, #8
 8001050:	4630      	mov	r0, r6
 8001052:	f7ff ffcd 	bl	8000ff0 <tcp_echoserver_send.isra.0>
 8001056:	2000      	movs	r0, #0
}
 8001058:	bd70      	pop	{r4, r5, r6, pc}
      if(es->state == ES_CLOSING)
 800105a:	7803      	ldrb	r3, [r0, #0]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d10a      	bne.n	8001076 <tcp_echoserver_poll+0x3e>
        tcp_echoserver_connection_close(tpcb, es);
 8001060:	4601      	mov	r1, r0
 8001062:	4630      	mov	r0, r6
 8001064:	f7ff ff76 	bl	8000f54 <tcp_echoserver_connection_close>
 8001068:	e7f5      	b.n	8001056 <tcp_echoserver_poll+0x1e>
    tcp_abort(tpcb);
 800106a:	4608      	mov	r0, r1
 800106c:	f008 fc1c 	bl	80098a8 <tcp_abort>
    ret_err = ERR_ABRT;
 8001070:	f06f 000c 	mvn.w	r0, #12
 8001074:	e7f0      	b.n	8001058 <tcp_echoserver_poll+0x20>
    ret_err = ERR_OK;
 8001076:	4620      	mov	r0, r4
 8001078:	e7ee      	b.n	8001058 <tcp_echoserver_poll+0x20>
 800107a:	bf00      	nop
 800107c:	08001081 	.word	0x08001081

08001080 <tcp_echoserver_sent>:
{
 8001080:	b538      	push	{r3, r4, r5, lr}
  es->retries = 0;
 8001082:	2300      	movs	r3, #0
{
 8001084:	4604      	mov	r4, r0
 8001086:	460d      	mov	r5, r1
  es->retries = 0;
 8001088:	7043      	strb	r3, [r0, #1]
  if(es->p != NULL)
 800108a:	6883      	ldr	r3, [r0, #8]
 800108c:	b153      	cbz	r3, 80010a4 <tcp_echoserver_sent+0x24>
    tcp_sent(tpcb, tcp_echoserver_sent);
 800108e:	4909      	ldr	r1, [pc, #36]	; (80010b4 <tcp_echoserver_sent+0x34>)
 8001090:	4628      	mov	r0, r5
 8001092:	f007 ff07 	bl	8008ea4 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8001096:	f104 0108 	add.w	r1, r4, #8
 800109a:	4628      	mov	r0, r5
 800109c:	f7ff ffa8 	bl	8000ff0 <tcp_echoserver_send.isra.0>
}
 80010a0:	2000      	movs	r0, #0
 80010a2:	bd38      	pop	{r3, r4, r5, pc}
    if(es->state == ES_CLOSING)
 80010a4:	7803      	ldrb	r3, [r0, #0]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d1fa      	bne.n	80010a0 <tcp_echoserver_sent+0x20>
      tcp_echoserver_connection_close(tpcb, es);
 80010aa:	4601      	mov	r1, r0
 80010ac:	4628      	mov	r0, r5
 80010ae:	f7ff ff51 	bl	8000f54 <tcp_echoserver_connection_close>
 80010b2:	e7f5      	b.n	80010a0 <tcp_echoserver_sent+0x20>
 80010b4:	08001081 	.word	0x08001081

080010b8 <tcp_echoserver_recv>:
{
 80010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ba:	460e      	mov	r6, r1
 80010bc:	4615      	mov	r5, r2
 80010be:	461f      	mov	r7, r3
  LWIP_ASSERT("arg != NULL",arg != NULL);
 80010c0:	4604      	mov	r4, r0
 80010c2:	b928      	cbnz	r0, 80010d0 <tcp_echoserver_recv+0x18>
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <tcp_echoserver_recv+0x98>)
 80010c6:	22ad      	movs	r2, #173	; 0xad
 80010c8:	4922      	ldr	r1, [pc, #136]	; (8001154 <tcp_echoserver_recv+0x9c>)
 80010ca:	4823      	ldr	r0, [pc, #140]	; (8001158 <tcp_echoserver_recv+0xa0>)
 80010cc:	f00b fafe 	bl	800c6cc <iprintf>
  if (p == NULL)
 80010d0:	b9a5      	cbnz	r5, 80010fc <tcp_echoserver_recv+0x44>
    es->state = ES_CLOSING;
 80010d2:	2303      	movs	r3, #3
 80010d4:	7023      	strb	r3, [r4, #0]
    if(es->p == NULL)
 80010d6:	68a3      	ldr	r3, [r4, #8]
 80010d8:	b933      	cbnz	r3, 80010e8 <tcp_echoserver_recv+0x30>
       tcp_echoserver_connection_close(tpcb, es);
 80010da:	4621      	mov	r1, r4
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff ff39 	bl	8000f54 <tcp_echoserver_connection_close>
    ret_err = ERR_OK;
 80010e2:	462f      	mov	r7, r5
}
 80010e4:	4638      	mov	r0, r7
 80010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tcp_sent(tpcb, tcp_echoserver_sent);
 80010e8:	4630      	mov	r0, r6
 80010ea:	491c      	ldr	r1, [pc, #112]	; (800115c <tcp_echoserver_recv+0xa4>)
 80010ec:	f007 feda 	bl	8008ea4 <tcp_sent>
      tcp_echoserver_send(tpcb, es);
 80010f0:	f104 0108 	add.w	r1, r4, #8
 80010f4:	4630      	mov	r0, r6
 80010f6:	f7ff ff7b 	bl	8000ff0 <tcp_echoserver_send.isra.0>
 80010fa:	e7f2      	b.n	80010e2 <tcp_echoserver_recv+0x2a>
  else if(err != ERR_OK)
 80010fc:	b12f      	cbz	r7, 800110a <tcp_echoserver_recv+0x52>
      es->p = NULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	60a3      	str	r3, [r4, #8]
    pbuf_free(p);
 8001102:	4628      	mov	r0, r5
 8001104:	f007 fa64 	bl	80085d0 <pbuf_free>
 8001108:	e7ec      	b.n	80010e4 <tcp_echoserver_recv+0x2c>
  else if(es->state == ES_ACCEPTED)
 800110a:	7823      	ldrb	r3, [r4, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d10c      	bne.n	800112a <tcp_echoserver_recv+0x72>
    es->state = ES_RECEIVED;
 8001110:	2302      	movs	r3, #2
    tcp_sent(tpcb, tcp_echoserver_sent);
 8001112:	4912      	ldr	r1, [pc, #72]	; (800115c <tcp_echoserver_recv+0xa4>)
 8001114:	4630      	mov	r0, r6
    es->state = ES_RECEIVED;
 8001116:	7023      	strb	r3, [r4, #0]
    es->p = p;
 8001118:	f844 5f08 	str.w	r5, [r4, #8]!
    tcp_sent(tpcb, tcp_echoserver_sent);
 800111c:	f007 fec2 	bl	8008ea4 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8001120:	4621      	mov	r1, r4
      tcp_echoserver_send(tpcb, es);
 8001122:	4630      	mov	r0, r6
 8001124:	f7ff ff64 	bl	8000ff0 <tcp_echoserver_send.isra.0>
 8001128:	e7dc      	b.n	80010e4 <tcp_echoserver_recv+0x2c>
  else if (es->state == ES_RECEIVED)
 800112a:	2b02      	cmp	r3, #2
 800112c:	d109      	bne.n	8001142 <tcp_echoserver_recv+0x8a>
    if(es->p == NULL)
 800112e:	68a0      	ldr	r0, [r4, #8]
 8001130:	b918      	cbnz	r0, 800113a <tcp_echoserver_recv+0x82>
      es->p = p;
 8001132:	4621      	mov	r1, r4
 8001134:	f841 5f08 	str.w	r5, [r1, #8]!
 8001138:	e7f3      	b.n	8001122 <tcp_echoserver_recv+0x6a>
      pbuf_chain(ptr,p);
 800113a:	4629      	mov	r1, r5
 800113c:	f007 fbd4 	bl	80088e8 <pbuf_chain>
 8001140:	e7d0      	b.n	80010e4 <tcp_echoserver_recv+0x2c>
    tcp_recved(tpcb, p->tot_len);
 8001142:	8929      	ldrh	r1, [r5, #8]
 8001144:	4630      	mov	r0, r6
 8001146:	f007 fe2f 	bl	8008da8 <tcp_recved>
    es->p = NULL;
 800114a:	60a7      	str	r7, [r4, #8]
 800114c:	e7d9      	b.n	8001102 <tcp_echoserver_recv+0x4a>
 800114e:	bf00      	nop
 8001150:	080115b4 	.word	0x080115b4
 8001154:	080115ef 	.word	0x080115ef
 8001158:	0801153a 	.word	0x0801153a
 800115c:	08001081 	.word	0x08001081

08001160 <tcp_echoserver_init>:
{
 8001160:	b510      	push	{r4, lr}
  tcp_echoserver_pcb = tcp_new();
 8001162:	4c0d      	ldr	r4, [pc, #52]	; (8001198 <tcp_echoserver_init+0x38>)
 8001164:	f008 fc92 	bl	8009a8c <tcp_new>
 8001168:	6020      	str	r0, [r4, #0]
  if (tcp_echoserver_pcb != NULL)
 800116a:	b1a0      	cbz	r0, 8001196 <tcp_echoserver_init+0x36>
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, SERVER_PORT);
 800116c:	2250      	movs	r2, #80	; 0x50
 800116e:	490b      	ldr	r1, [pc, #44]	; (800119c <tcp_echoserver_init+0x3c>)
 8001170:	f007 fd24 	bl	8008bbc <tcp_bind>
    if (err == ERR_OK)
 8001174:	b948      	cbnz	r0, 800118a <tcp_echoserver_init+0x2a>
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8001176:	21ff      	movs	r1, #255	; 0xff
 8001178:	6820      	ldr	r0, [r4, #0]
 800117a:	f007 fddb 	bl	8008d34 <tcp_listen_with_backlog>
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <tcp_echoserver_init+0x40>)
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8001180:	6020      	str	r0, [r4, #0]
}
 8001182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8001186:	f007 bebb 	b.w	8008f00 <tcp_accept>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 800118a:	6821      	ldr	r1, [r4, #0]
 800118c:	2001      	movs	r0, #1
}
 800118e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8001192:	f006 bfad 	b.w	80080f0 <memp_free>
}
 8001196:	bd10      	pop	{r4, pc}
 8001198:	200001c4 	.word	0x200001c4
 800119c:	08011328 	.word	0x08011328
 80011a0:	08000f95 	.word	0x08000f95

080011a4 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <LCD_LOG_DeInit+0x34>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 80011a6:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <LCD_LOG_DeInit+0x38>)
 80011aa:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <LCD_LOG_DeInit+0x3c>)
 80011b0:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
 80011b2:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <LCD_LOG_DeInit+0x40>)
 80011b4:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <LCD_LOG_DeInit+0x44>)
 80011b8:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top_bak = 0;
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <LCD_LOG_DeInit+0x48>)
 80011bc:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 80011be:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <LCD_LOG_DeInit+0x4c>)
 80011c0:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_invert= ENABLE;
 80011c2:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <LCD_LOG_DeInit+0x50>)
 80011c4:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
 80011c6:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <LCD_LOG_DeInit+0x54>)
 80011c8:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <LCD_LOG_DeInit+0x58>)
 80011cc:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
 80011ce:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <LCD_LOG_DeInit+0x5c>)
 80011d0:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <LCD_LOG_DeInit+0x60>)
 80011d4:	8013      	strh	r3, [r2, #0]
}
 80011d6:	4770      	bx	lr
 80011d8:	200042c0 	.word	0x200042c0
 80011dc:	ff000080 	.word	0xff000080
 80011e0:	20000662 	.word	0x20000662
 80011e4:	20000668 	.word	0x20000668
 80011e8:	20000660 	.word	0x20000660
 80011ec:	2000065e 	.word	0x2000065e
 80011f0:	2000065c 	.word	0x2000065c
 80011f4:	20000664 	.word	0x20000664
 80011f8:	2000066a 	.word	0x2000066a
 80011fc:	20000665 	.word	0x20000665
 8001200:	20000666 	.word	0x20000666
 8001204:	200042c4 	.word	0x200042c4

08001208 <LCD_LOG_Init>:
{
 8001208:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 800120a:	f7ff ffcb 	bl	80011a4 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800120e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8001216:	f001 bab5 	b.w	8002784 <BSP_LCD_Clear>
	...

0800121c <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 800121c:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800121e:	4c16      	ldr	r4, [pc, #88]	; (8001278 <LCD_LOG_SetHeader+0x5c>)
{
 8001220:	4606      	mov	r6, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8001222:	4d16      	ldr	r5, [pc, #88]	; (800127c <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8001224:	4620      	mov	r0, r4
 8001226:	f001 fa99 	bl	800275c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800122a:	4628      	mov	r0, r5
 800122c:	f001 fa82 	bl	8002734 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8001230:	f001 fa2a 	bl	8002688 <BSP_LCD_GetXSize>
 8001234:	88e3      	ldrh	r3, [r4, #6]
 8001236:	2100      	movs	r1, #0
 8001238:	b282      	uxth	r2, r0
 800123a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800123e:	4608      	mov	r0, r1
 8001240:	b29b      	uxth	r3, r3
 8001242:	f001 fb87 	bl	8002954 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8001246:	f04f 30ff 	mov.w	r0, #4294967295
 800124a:	f001 fa73 	bl	8002734 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800124e:	4628      	mov	r0, r5
 8001250:	f001 fa7a 	bl	8002748 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 8001254:	4632      	mov	r2, r6
 8001256:	88e1      	ldrh	r1, [r4, #6]
 8001258:	2301      	movs	r3, #1
 800125a:	2000      	movs	r0, #0
 800125c:	f001 fb14 	bl	8002888 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f001 fa70 	bl	8002748 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <LCD_LOG_SetHeader+0x64>)
 800126a:	f001 fa63 	bl	8002734 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <LCD_LOG_SetHeader+0x68>)
}
 8001270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8001274:	f001 ba72 	b.w	800275c <BSP_LCD_SetFont>
 8001278:	2000010c 	.word	0x2000010c
 800127c:	ff0000ff 	.word	0xff0000ff
 8001280:	ff000080 	.word	0xff000080
 8001284:	20000104 	.word	0x20000104

08001288 <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 800128a:	4d1c      	ldr	r5, [pc, #112]	; (80012fc <LCD_LOG_SetFooter+0x74>)
{
 800128c:	4606      	mov	r6, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800128e:	4f1c      	ldr	r7, [pc, #112]	; (8001300 <LCD_LOG_SetFooter+0x78>)
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8001290:	4628      	mov	r0, r5
 8001292:	f001 fa63 	bl	800275c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8001296:	4638      	mov	r0, r7
 8001298:	f001 fa4c 	bl	8002734 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 800129c:	f001 fa00 	bl	80026a0 <BSP_LCD_GetYSize>
 80012a0:	88e9      	ldrh	r1, [r5, #6]
 80012a2:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
 80012a6:	31fc      	adds	r1, #252	; 0xfc
 80012a8:	4401      	add	r1, r0
 80012aa:	b28c      	uxth	r4, r1
 80012ac:	f001 f9ec 	bl	8002688 <BSP_LCD_GetXSize>
 80012b0:	88eb      	ldrh	r3, [r5, #6]
 80012b2:	b282      	uxth	r2, r0
 80012b4:	4621      	mov	r1, r4
 80012b6:	3304      	adds	r3, #4
 80012b8:	2000      	movs	r0, #0
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	f001 fb4a 	bl	8002954 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f001 fa36 	bl	8002734 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80012c8:	4638      	mov	r0, r7
 80012ca:	f001 fa3d 	bl	8002748 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 80012ce:	f001 f9e7 	bl	80026a0 <BSP_LCD_GetYSize>
 80012d2:	88e9      	ldrh	r1, [r5, #6]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4632      	mov	r2, r6
 80012d8:	1a41      	subs	r1, r0, r1
 80012da:	2000      	movs	r0, #0
 80012dc:	b289      	uxth	r1, r1
 80012de:	f001 fad3 	bl	8002888 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80012e2:	f04f 30ff 	mov.w	r0, #4294967295
 80012e6:	f001 fa2f 	bl	8002748 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <LCD_LOG_SetFooter+0x7c>)
 80012ec:	f001 fa22 	bl	8002734 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80012f0:	4628      	mov	r0, r5
}
 80012f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80012f6:	f001 ba31 	b.w	800275c <BSP_LCD_SetFont>
 80012fa:	bf00      	nop
 80012fc:	20000104 	.word	0x20000104
 8001300:	ff0000ff 	.word	0xff0000ff
 8001304:	ff000080 	.word	0xff000080

08001308 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8001308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800130c:	4d1c      	ldr	r5, [pc, #112]	; (8001380 <LCD_LOG_UpdateDisplay+0x78>)
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <LCD_LOG_UpdateDisplay+0x7c>)
 8001310:	882b      	ldrh	r3, [r5, #0]
 8001312:	8812      	ldrh	r2, [r2, #0]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	4f1c      	ldr	r7, [pc, #112]	; (8001388 <LCD_LOG_UpdateDisplay+0x80>)
 8001318:	d811      	bhi.n	800133e <LCD_LOG_UpdateDisplay+0x36>
 800131a:	4293      	cmp	r3, r2
 800131c:	d311      	bcc.n	8001342 <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800131e:	2484      	movs	r4, #132	; 0x84
 8001320:	fb04 7303 	mla	r3, r4, r3, r7
 8001324:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8001328:	f001 fa04 	bl	8002734 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800132c:	8829      	ldrh	r1, [r5, #0]
 800132e:	1d08      	adds	r0, r1, #4
 8001330:	fb04 7101 	mla	r1, r4, r1, r7
 8001334:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 8001336:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800133a:	f001 baf7 	b.w	800292c <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800133e:	4293      	cmp	r3, r2
 8001340:	d201      	bcs.n	8001346 <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8001342:	3375      	adds	r3, #117	; 0x75
 8001344:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 8001346:	3b10      	subs	r3, #16
 8001348:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800134a:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800134e:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
 8001352:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001354:	19a1      	adds	r1, r4, r6
 8001356:	fb91 f5f8 	sdiv	r5, r1, r8
 800135a:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800135e:	fb09 7505 	mla	r5, r9, r5, r7
 8001362:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8001366:	f001 f9e5 	bl	8002734 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800136a:	1d30      	adds	r0, r6, #4
 800136c:	3601      	adds	r6, #1
 800136e:	4629      	mov	r1, r5
 8001370:	b280      	uxth	r0, r0
 8001372:	f001 fadb 	bl	800292c <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8001376:	2e11      	cmp	r6, #17
 8001378:	d1ec      	bne.n	8001354 <LCD_LOG_UpdateDisplay+0x4c>
}
 800137a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800137e:	bf00      	nop
 8001380:	20000660 	.word	0x20000660
 8001384:	20000668 	.word	0x20000668
 8001388:	2000066c 	.word	0x2000066c

0800138c <__io_putchar>:
{
 800138c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001390:	4607      	mov	r7, r0
  sFONT *cFont = BSP_LCD_GetFont();
 8001392:	f001 f9ed 	bl	8002770 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <__io_putchar+0x104>)
  sFONT *cFont = BSP_LCD_GetFont();
 8001398:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	bb43      	cbnz	r3, 80013f0 <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
 800139e:	4a3d      	ldr	r2, [pc, #244]	; (8001494 <__io_putchar+0x108>)
 80013a0:	4c3d      	ldr	r4, [pc, #244]	; (8001498 <__io_putchar+0x10c>)
 80013a2:	7811      	ldrb	r1, [r2, #0]
 80013a4:	2901      	cmp	r1, #1
 80013a6:	d10b      	bne.n	80013c0 <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80013a8:	493c      	ldr	r1, [pc, #240]	; (800149c <__io_putchar+0x110>)
      LCD_ScrollActive = DISABLE;
 80013aa:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80013ac:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <__io_putchar+0x114>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80013b0:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80013b2:	493c      	ldr	r1, [pc, #240]	; (80014a4 <__io_putchar+0x118>)
      LCD_Scrolled = DISABLE;
 80013b4:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80013b6:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
 80013b8:	4a3b      	ldr	r2, [pc, #236]	; (80014a8 <__io_putchar+0x11c>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80013ba:	493c      	ldr	r1, [pc, #240]	; (80014ac <__io_putchar+0x120>)
      LCD_ScrollBackStep = 0;
 80013bc:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80013be:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 80013c0:	4e3b      	ldr	r6, [pc, #236]	; (80014b0 <__io_putchar+0x124>)
 80013c2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80014bc <__io_putchar+0x130>
 80013c6:	8835      	ldrh	r5, [r6, #0]
 80013c8:	f001 f95e 	bl	8002688 <BSP_LCD_GetXSize>
 80013cc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80013d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80013d4:	4285      	cmp	r5, r0
 80013d6:	4635      	mov	r5, r6
 80013d8:	d20e      	bcs.n	80013f8 <__io_putchar+0x6c>
 80013da:	2f0a      	cmp	r7, #10
 80013dc:	d00c      	beq.n	80013f8 <__io_putchar+0x6c>
 80013de:	8832      	ldrh	r2, [r6, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80013e0:	8823      	ldrh	r3, [r4, #0]
 80013e2:	1c51      	adds	r1, r2, #1
 80013e4:	8031      	strh	r1, [r6, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80013e6:	2184      	movs	r1, #132	; 0x84
 80013e8:	fb01 9903 	mla	r9, r1, r3, r9
 80013ec:	f809 7002 	strb.w	r7, [r9, r2]
}
 80013f0:	4638      	mov	r0, r7
 80013f2:	b003      	add	sp, #12
 80013f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 80013f8:	4e2c      	ldr	r6, [pc, #176]	; (80014ac <__io_putchar+0x120>)
 80013fa:	8822      	ldrh	r2, [r4, #0]
 80013fc:	8833      	ldrh	r3, [r6, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d809      	bhi.n	8001416 <__io_putchar+0x8a>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8001402:	4a2c      	ldr	r2, [pc, #176]	; (80014b4 <__io_putchar+0x128>)
 8001404:	7811      	ldrb	r1, [r2, #0]
 8001406:	2900      	cmp	r1, #0
 8001408:	d136      	bne.n	8001478 <__io_putchar+0xec>
          LCD_CacheBuffer_yptr_top++;
 800140a:	3301      	adds	r3, #1
 800140c:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 800140e:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 8001410:	bf14      	ite	ne
 8001412:	8033      	strhne	r3, [r6, #0]
            LCD_CacheBuffer_yptr_top = 0;  
 8001414:	8031      	strheq	r1, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001416:	f8b5 a000 	ldrh.w	sl, [r5]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800141a:	f04f 0b84 	mov.w	fp, #132	; 0x84
 800141e:	2220      	movs	r2, #32
 8001420:	9201      	str	r2, [sp, #4]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001422:	f001 f931 	bl	8002688 <BSP_LCD_GetXSize>
 8001426:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800142a:	9a01      	ldr	r2, [sp, #4]
 800142c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001430:	4550      	cmp	r0, sl
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001432:	8823      	ldrh	r3, [r4, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001434:	d823      	bhi.n	800147e <__io_putchar+0xf2>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8001436:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
 8001438:	f04f 0800 	mov.w	r8, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800143c:	fb02 9303 	mla	r3, r2, r3, r9
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <__io_putchar+0x12c>)
      LCD_CacheBuffer_xptr = 0;
 8001442:	f8a5 8000 	strh.w	r8, [r5]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
 800144c:	f7ff ff5c 	bl	8001308 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 8001450:	8823      	ldrh	r3, [r4, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8001456:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 8001458:	bf05      	ittet	eq
 800145a:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800145c:	4a15      	ldreq	r2, [pc, #84]	; (80014b4 <__io_putchar+0x128>)
      LCD_CacheBuffer_yptr_bottom ++; 
 800145e:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_bottom = 0;
 8001460:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
 8001464:	bf04      	itt	eq
 8001466:	8033      	strheq	r3, [r6, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001468:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
 800146a:	2f0a      	cmp	r7, #10
 800146c:	d0c0      	beq.n	80013f0 <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800146e:	882a      	ldrh	r2, [r5, #0]
 8001470:	8823      	ldrh	r3, [r4, #0]
 8001472:	1c51      	adds	r1, r2, #1
 8001474:	8029      	strh	r1, [r5, #0]
 8001476:	e7b6      	b.n	80013e6 <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	7013      	strb	r3, [r2, #0]
 800147c:	e7cb      	b.n	8001416 <__io_putchar+0x8a>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800147e:	8829      	ldrh	r1, [r5, #0]
 8001480:	fb0b 9303 	mla	r3, fp, r3, r9
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001484:	f10a 0a01 	add.w	sl, sl, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001488:	1c48      	adds	r0, r1, #1
 800148a:	545a      	strb	r2, [r3, r1]
 800148c:	8028      	strh	r0, [r5, #0]
 800148e:	e7c7      	b.n	8001420 <__io_putchar+0x94>
 8001490:	20000665 	.word	0x20000665
 8001494:	2000066a 	.word	0x2000066a
 8001498:	20000660 	.word	0x20000660
 800149c:	2000065c 	.word	0x2000065c
 80014a0:	20000666 	.word	0x20000666
 80014a4:	2000065e 	.word	0x2000065e
 80014a8:	200042c4 	.word	0x200042c4
 80014ac:	20000668 	.word	0x20000668
 80014b0:	20000662 	.word	0x20000662
 80014b4:	20000664 	.word	0x20000664
 80014b8:	200042c0 	.word	0x200042c0
 80014bc:	2000066c 	.word	0x2000066c

080014c0 <mfxstm32l152_DeInit>:
  uint8_t idx = 0;
  
  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <mfxstm32l152_DeInit+0x28>)
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	4282      	cmp	r2, r0
 80014c6:	d00a      	beq.n	80014de <mfxstm32l152_DeInit+0x1e>
 80014c8:	785a      	ldrb	r2, [r3, #1]
 80014ca:	4282      	cmp	r2, r0
 80014cc:	d009      	beq.n	80014e2 <mfxstm32l152_DeInit+0x22>
 80014ce:	789a      	ldrb	r2, [r3, #2]
 80014d0:	4282      	cmp	r2, r0
 80014d2:	d108      	bne.n	80014e6 <mfxstm32l152_DeInit+0x26>
 80014d4:	2202      	movs	r2, #2
    {
      mfxstm32l152[idx] = 0;
 80014d6:	2100      	movs	r1, #0
 80014d8:	5499      	strb	r1, [r3, r2]
    MFX_IO_DeInit();
 80014da:	f001 b80b 	b.w	80024f4 <MFX_IO_DeInit>
    if(mfxstm32l152[idx] == DeviceAddr)
 80014de:	2200      	movs	r2, #0
 80014e0:	e7f9      	b.n	80014d6 <mfxstm32l152_DeInit+0x16>
 80014e2:	2201      	movs	r2, #1
 80014e4:	e7f7      	b.n	80014d6 <mfxstm32l152_DeInit+0x16>
}
 80014e6:	4770      	bx	lr
 80014e8:	200001c8 	.word	0x200001c8

080014ec <mfxstm32l152_IO_ClearIT>:
  if (pin_0_7)
 80014ec:	f011 02ff 	ands.w	r2, r1, #255	; 0xff
{
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	4604      	mov	r4, r0
  pin_8_15  = IO_Pin >> 8;
 80014f4:	f3c1 2607 	ubfx	r6, r1, #8, #8
  pin_16_23 = IO_Pin >> 16;
 80014f8:	f3c1 4507 	ubfx	r5, r1, #16, #8
  if (pin_0_7)
 80014fc:	d002      	beq.n	8001504 <mfxstm32l152_IO_ClearIT+0x18>
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 80014fe:	2154      	movs	r1, #84	; 0x54
 8001500:	f001 f834 	bl	800256c <MFX_IO_Write>
  if (pin_8_15)
 8001504:	b126      	cbz	r6, 8001510 <mfxstm32l152_IO_ClearIT+0x24>
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8001506:	4632      	mov	r2, r6
 8001508:	2155      	movs	r1, #85	; 0x55
 800150a:	4620      	mov	r0, r4
 800150c:	f001 f82e 	bl	800256c <MFX_IO_Write>
  if (pin_16_23)
 8001510:	b135      	cbz	r5, 8001520 <mfxstm32l152_IO_ClearIT+0x34>
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001512:	462a      	mov	r2, r5
 8001514:	4620      	mov	r0, r4
 8001516:	2156      	movs	r1, #86	; 0x56
}
 8001518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 800151c:	f001 b826 	b.w	800256c <MFX_IO_Write>
}
 8001520:	bd70      	pop	{r4, r5, r6, pc}

08001522 <mfxstm32l152_Reset>:
{
 8001522:	b508      	push	{r3, lr}
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	f001 f820 	bl	800256c <MFX_IO_Write>
  MFX_IO_Delay(10);
 800152c:	200a      	movs	r0, #10
}
 800152e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_Delay(10);
 8001532:	f001 b82b 	b.w	800258c <MFX_IO_Delay>

08001536 <mfxstm32l152_LowPower>:
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8001536:	2240      	movs	r2, #64	; 0x40
{
 8001538:	b508      	push	{r3, lr}
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 800153a:	4611      	mov	r1, r2
 800153c:	f001 f816 	bl	800256c <MFX_IO_Write>
}
 8001540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_EnableWakeupPin();
 8001544:	f001 b825 	b.w	8002592 <MFX_IO_EnableWakeupPin>

08001548 <mfxstm32l152_ReadID>:
{
 8001548:	b510      	push	{r4, lr}
 800154a:	4604      	mov	r4, r0
  MFX_IO_Delay(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f001 f81d 	bl	800258c <MFX_IO_Delay>
  MFX_IO_Init();
 8001552:	f000 ffcd 	bl	80024f0 <MFX_IO_Init>
  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8001556:	2100      	movs	r1, #0
 8001558:	4620      	mov	r0, r4
 800155a:	f001 f80a 	bl	8002572 <MFX_IO_Read>
}
 800155e:	bd10      	pop	{r4, pc}

08001560 <mfxstm32l152_IO_Start>:
{
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	460d      	mov	r5, r1
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8001564:	2140      	movs	r1, #64	; 0x40
{
 8001566:	4604      	mov	r4, r0
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8001568:	f001 f803 	bl	8002572 <MFX_IO_Read>
  if (IO_Pin > 0xFFFF)
 800156c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8001570:	f04f 0140 	mov.w	r1, #64	; 0x40
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;  
 8001574:	bf2c      	ite	cs
 8001576:	f040 0209 	orrcs.w	r2, r0, #9
 800157a:	f000 02f7 	andcc.w	r2, r0, #247	; 0xf7
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 800157e:	4620      	mov	r0, r4
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;  
 8001580:	bf2c      	ite	cs
 8001582:	b2d2      	uxtbcs	r2, r2
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;  
 8001584:	f042 0201 	orrcc.w	r2, r2, #1
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8001588:	f000 fff0 	bl	800256c <MFX_IO_Write>
  MFX_IO_Delay(1);
 800158c:	2001      	movs	r0, #1
}
 800158e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Delay(1);
 8001592:	f000 bffb 	b.w	800258c <MFX_IO_Delay>

08001596 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001596:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t tmp = 0;
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
  pin_8_15  = PinPosition >> 8;
 800159a:	ea4f 2b12 	mov.w	fp, r2, lsr #8
{
 800159e:	4691      	mov	r9, r2
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 80015a0:	ea4f 4812 	mov.w	r8, r2, lsr #16
  
  if (pin_0_7)
 80015a4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
{
 80015a8:	4605      	mov	r5, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	461f      	mov	r7, r3
  pin_8_15  = PinPosition >> 8;
 80015ae:	fa5f fa8b 	uxtb.w	sl, fp
  pin_16_23 = PinPosition >> 16;
 80015b2:	fa5f f688 	uxtb.w	r6, r8
  if (pin_0_7)
 80015b6:	d00a      	beq.n	80015ce <mfxstm32l152_reg24_setPinValue+0x38>
 80015b8:	9201      	str	r2, [sp, #4]
  {  
    /* Get the current register value */ 
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80015ba:	f000 ffda 	bl	8002572 <MFX_IO_Read>
  
    /* Set the selected pin direction */
    if (PinValue != 0)
 80015be:	b35f      	cbz	r7, 8001618 <mfxstm32l152_reg24_setPinValue+0x82>
    {
      tmp |= (uint8_t)pin_0_7;
 80015c0:	9a01      	ldr	r2, [sp, #4]
 80015c2:	4302      	orrs	r2, r0
    }  
    else 
    {
      tmp &= ~(uint8_t)pin_0_7;
 80015c4:	b2d2      	uxtb	r2, r2
    }
  
    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 80015c6:	4621      	mov	r1, r4
 80015c8:	4628      	mov	r0, r5
 80015ca:	f000 ffcf 	bl	800256c <MFX_IO_Write>
  }

  if (pin_8_15)
 80015ce:	f1ba 0f00 	cmp.w	sl, #0
 80015d2:	d00f      	beq.n	80015f4 <mfxstm32l152_reg24_setPinValue+0x5e>
  {
    /* Get the current register value */ 
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80015d4:	f104 0901 	add.w	r9, r4, #1
 80015d8:	4628      	mov	r0, r5
 80015da:	fa5f f989 	uxtb.w	r9, r9
 80015de:	4649      	mov	r1, r9
 80015e0:	f000 ffc7 	bl	8002572 <MFX_IO_Read>
  
    /* Set the selected pin direction */
    if (PinValue != 0)
 80015e4:	b1df      	cbz	r7, 800161e <mfxstm32l152_reg24_setPinValue+0x88>
    {
      tmp |= (uint8_t)pin_8_15;
 80015e6:	ea4a 0200 	orr.w	r2, sl, r0
    }  
    else 
    {
      tmp &= ~(uint8_t)pin_8_15;
 80015ea:	b2d2      	uxtb	r2, r2
    }
  
    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 80015ec:	4649      	mov	r1, r9
 80015ee:	4628      	mov	r0, r5
 80015f0:	f000 ffbc 	bl	800256c <MFX_IO_Write>
  }  

  if (pin_16_23)
 80015f4:	b1ce      	cbz	r6, 800162a <mfxstm32l152_reg24_setPinValue+0x94>
  {
    /* Get the current register value */ 
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80015f6:	3402      	adds	r4, #2
 80015f8:	4628      	mov	r0, r5
 80015fa:	b2e4      	uxtb	r4, r4
 80015fc:	4621      	mov	r1, r4
 80015fe:	f000 ffb8 	bl	8002572 <MFX_IO_Read>
  
    /* Set the selected pin direction */
    if (PinValue != 0)
 8001602:	b17f      	cbz	r7, 8001624 <mfxstm32l152_reg24_setPinValue+0x8e>
    {
      tmp |= (uint8_t)pin_16_23;
 8001604:	ea46 0200 	orr.w	r2, r6, r0
    }  
    else 
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001608:	b2d2      	uxtb	r2, r2
    }
  
    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 800160a:	4621      	mov	r1, r4
 800160c:	4628      	mov	r0, r5
  } 
}
 800160e:	b003      	add	sp, #12
 8001610:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001614:	f000 bfaa 	b.w	800256c <MFX_IO_Write>
      tmp &= ~(uint8_t)pin_0_7;
 8001618:	ea20 0209 	bic.w	r2, r0, r9
 800161c:	e7d2      	b.n	80015c4 <mfxstm32l152_reg24_setPinValue+0x2e>
      tmp &= ~(uint8_t)pin_8_15;
 800161e:	ea20 020b 	bic.w	r2, r0, fp
 8001622:	e7e2      	b.n	80015ea <mfxstm32l152_reg24_setPinValue+0x54>
      tmp &= ~(uint8_t)pin_16_23;
 8001624:	ea20 0208 	bic.w	r2, r0, r8
 8001628:	e7ee      	b.n	8001608 <mfxstm32l152_reg24_setPinValue+0x72>
}
 800162a:	b003      	add	sp, #12
 800162c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001630 <mfxstm32l152_IO_ReadPin>:
{
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(IO_Pin & 0x000000FF)
 8001632:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
{
 8001636:	4607      	mov	r7, r0
 8001638:	460d      	mov	r5, r1
  if(IO_Pin & 0x000000FF)
 800163a:	d003      	beq.n	8001644 <mfxstm32l152_IO_ReadPin+0x14>
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 800163c:	2110      	movs	r1, #16
 800163e:	f000 ff98 	bl	8002572 <MFX_IO_Read>
 8001642:	4604      	mov	r4, r0
  if(IO_Pin & 0x0000FF00)
 8001644:	f415 467f 	ands.w	r6, r5, #65280	; 0xff00
 8001648:	d004      	beq.n	8001654 <mfxstm32l152_IO_ReadPin+0x24>
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 800164a:	2111      	movs	r1, #17
 800164c:	4638      	mov	r0, r7
 800164e:	f000 ff90 	bl	8002572 <MFX_IO_Read>
 8001652:	4606      	mov	r6, r0
  if(IO_Pin & 0x00FF0000)
 8001654:	f415 007f 	ands.w	r0, r5, #16711680	; 0xff0000
 8001658:	d003      	beq.n	8001662 <mfxstm32l152_IO_ReadPin+0x32>
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 800165a:	2112      	movs	r1, #18
 800165c:	4638      	mov	r0, r7
 800165e:	f000 ff88 	bl	8002572 <MFX_IO_Read>
  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8001662:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8001666:	eb04 4000 	add.w	r0, r4, r0, lsl #16
}
 800166a:	4028      	ands	r0, r5
 800166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800166e <mfxstm32l152_IO_ITStatus>:
{
 800166e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(IO_Pin & 0xFF)
 8001670:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
{
 8001674:	4607      	mov	r7, r0
 8001676:	460d      	mov	r5, r1
  if(IO_Pin & 0xFF)
 8001678:	d003      	beq.n	8001682 <mfxstm32l152_IO_ITStatus+0x14>
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 800167a:	210c      	movs	r1, #12
 800167c:	f000 ff79 	bl	8002572 <MFX_IO_Read>
 8001680:	4604      	mov	r4, r0
  if(IO_Pin & 0xFFFF00)
 8001682:	f025 467f 	bic.w	r6, r5, #4278190080	; 0xff000000
 8001686:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 800168a:	b126      	cbz	r6, 8001696 <mfxstm32l152_IO_ITStatus+0x28>
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 800168c:	210d      	movs	r1, #13
 800168e:	4638      	mov	r0, r7
 8001690:	f000 ff6f 	bl	8002572 <MFX_IO_Read>
 8001694:	b286      	uxth	r6, r0
  if(IO_Pin & 0xFFFF0000)
 8001696:	0c28      	lsrs	r0, r5, #16
 8001698:	0400      	lsls	r0, r0, #16
 800169a:	b118      	cbz	r0, 80016a4 <mfxstm32l152_IO_ITStatus+0x36>
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 800169c:	210e      	movs	r1, #14
 800169e:	4638      	mov	r0, r7
 80016a0:	f000 ff67 	bl	8002572 <MFX_IO_Read>
  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80016a4:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 80016a8:	eb04 4000 	add.w	r0, r4, r0, lsl #16
}
 80016ac:	4028      	ands	r0, r5
 80016ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080016b0 <mfxstm32l152_TS_Start>:
{
 80016b0:	b510      	push	{r4, lr}
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80016b2:	2140      	movs	r1, #64	; 0x40
{
 80016b4:	4604      	mov	r4, r0
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80016b6:	f000 ff5c 	bl	8002572 <MFX_IO_Read>
  mode |= MFXSTM32L152_TS_EN;  
 80016ba:	f040 0202 	orr.w	r2, r0, #2
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80016be:	2140      	movs	r1, #64	; 0x40
 80016c0:	4620      	mov	r0, r4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	f000 ff52 	bl	800256c <MFX_IO_Write>
  MFX_IO_Delay(2); 
 80016c8:	2002      	movs	r0, #2
 80016ca:	f000 ff5f 	bl	800258c <MFX_IO_Delay>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_SETTLING, 0x32);
 80016ce:	4620      	mov	r0, r4
 80016d0:	2232      	movs	r2, #50	; 0x32
 80016d2:	21a0      	movs	r1, #160	; 0xa0
 80016d4:	f000 ff4a 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_TOUCH_DET_DELAY, 0x5);
 80016d8:	4620      	mov	r0, r4
 80016da:	2205      	movs	r2, #5
 80016dc:	21a1      	movs	r1, #161	; 0xa1
 80016de:	f000 ff45 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_AVE, 0x04);
 80016e2:	4620      	mov	r0, r4
 80016e4:	2204      	movs	r2, #4
 80016e6:	21a2      	movs	r1, #162	; 0xa2
 80016e8:	f000 ff40 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_FIFO_TH, 0x01);
 80016ec:	4620      	mov	r0, r4
 80016ee:	2201      	movs	r2, #1
 80016f0:	21a4      	movs	r1, #164	; 0xa4
 80016f2:	f000 ff3b 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_FIFO_TH, MFXSTM32L152_TS_CLEAR_FIFO);
 80016f6:	4620      	mov	r0, r4
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	21a4      	movs	r1, #164	; 0xa4
 80016fc:	f000 ff36 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_TRACK, 0x00);
 8001700:	4620      	mov	r0, r4
 8001702:	2200      	movs	r2, #0
 8001704:	21a3      	movs	r1, #163	; 0xa3
 8001706:	f000 ff31 	bl	800256c <MFX_IO_Write>
  mfxstm32l152_IO_ClearIT(DeviceAddr, 0xFFFFFF);
 800170a:	4620      	mov	r0, r4
 800170c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001710:	f7ff feec 	bl	80014ec <mfxstm32l152_IO_ClearIT>
  MFX_IO_Delay(1);
 8001714:	2001      	movs	r0, #1
}
 8001716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MFX_IO_Delay(1);
 800171a:	f000 bf37 	b.w	800258c <MFX_IO_Delay>

0800171e <mfxstm32l152_IDD_Start>:
{
 800171e:	b510      	push	{r4, lr}
 8001720:	b2c4      	uxtb	r4, r0
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	4620      	mov	r0, r4
 8001726:	f000 ff24 	bl	8002572 <MFX_IO_Read>
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 800172a:	f040 0201 	orr.w	r2, r0, #1
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	4620      	mov	r0, r4
 8001732:	b2d2      	uxtb	r2, r2
}
 8001734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8001738:	f000 bf18 	b.w	800256c <MFX_IO_Write>

0800173c <mfxstm32l152_IDD_Config>:
{
 800173c:	b084      	sub	sp, #16
 800173e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001742:	ac0b      	add	r4, sp, #44	; 0x2c
 8001744:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8001748:	b2c4      	uxtb	r4, r0
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800174a:	2140      	movs	r1, #64	; 0x40
 800174c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8001750:	4620      	mov	r0, r4
 8001752:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8001756:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 800175a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800175e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8001762:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
 8001766:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 800176a:	f000 ff02 	bl	8002572 <MFX_IO_Read>
  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 800176e:	0743      	lsls	r3, r0, #29
 8001770:	d406      	bmi.n	8001780 <mfxstm32l152_IDD_Config+0x44>
    mode |= MFXSTM32L152_IDD_EN;
 8001772:	f040 0204 	orr.w	r2, r0, #4
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	4620      	mov	r0, r4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f000 fef6 	bl	800256c <MFX_IO_Write>
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8001780:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8001784:	4620      	mov	r0, r4
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8001786:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 800178a:	2180      	movs	r1, #128	; 0x80
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 800178c:	f002 0240 	and.w	r2, r2, #64	; 0x40
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8001790:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001794:	431a      	orrs	r2, r3
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8001796:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	f003 030e 	and.w	r3, r3, #14
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 80017a0:	431a      	orrs	r2, r3
 80017a2:	f000 fee3 	bl	800256c <MFX_IO_Write>
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 80017a6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 80017aa:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 80017ae:	4620      	mov	r0, r4
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 80017b0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 80017b4:	2181      	movs	r1, #129	; 0x81
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 80017b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 80017ba:	431a      	orrs	r2, r3
 80017bc:	f000 fed6 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 80017c0:	4620      	mov	r0, r4
 80017c2:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80017c6:	2182      	movs	r1, #130	; 0x82
 80017c8:	f000 fed0 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 80017cc:	4620      	mov	r0, r4
 80017ce:	fa5f f28b 	uxtb.w	r2, fp
 80017d2:	2183      	movs	r1, #131	; 0x83
 80017d4:	f000 feca 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 80017d8:	4620      	mov	r0, r4
 80017da:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80017de:	2184      	movs	r1, #132	; 0x84
 80017e0:	f000 fec4 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80017e4:	4620      	mov	r0, r4
 80017e6:	fa5f f28a 	uxtb.w	r2, sl
 80017ea:	2185      	movs	r1, #133	; 0x85
 80017ec:	f000 febe 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80017f0:	4620      	mov	r0, r4
 80017f2:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80017f6:	2186      	movs	r1, #134	; 0x86
 80017f8:	f000 feb8 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80017fc:	4620      	mov	r0, r4
 80017fe:	fa5f f289 	uxtb.w	r2, r9
 8001802:	2187      	movs	r1, #135	; 0x87
 8001804:	f000 feb2 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8001808:	4620      	mov	r0, r4
 800180a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800180e:	2188      	movs	r1, #136	; 0x88
 8001810:	f000 feac 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8001814:	4620      	mov	r0, r4
 8001816:	fa5f f288 	uxtb.w	r2, r8
 800181a:	2189      	movs	r1, #137	; 0x89
 800181c:	f000 fea6 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8001820:	4620      	mov	r0, r4
 8001822:	0a3a      	lsrs	r2, r7, #8
 8001824:	218a      	movs	r1, #138	; 0x8a
 8001826:	f000 fea1 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 800182a:	4620      	mov	r0, r4
 800182c:	b2fa      	uxtb	r2, r7
 800182e:	218b      	movs	r1, #139	; 0x8b
 8001830:	f000 fe9c 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8001834:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8001838:	4620      	mov	r0, r4
 800183a:	2190      	movs	r1, #144	; 0x90
 800183c:	f000 fe96 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001840:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8001844:	4620      	mov	r0, r4
 8001846:	2191      	movs	r1, #145	; 0x91
 8001848:	f000 fe90 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 800184c:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 8001850:	4620      	mov	r0, r4
 8001852:	2192      	movs	r1, #146	; 0x92
 8001854:	f000 fe8a 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8001858:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800185c:	4620      	mov	r0, r4
 800185e:	2193      	movs	r1, #147	; 0x93
 8001860:	f000 fe84 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8001864:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001868:	4620      	mov	r0, r4
 800186a:	2194      	movs	r1, #148	; 0x94
 800186c:	f000 fe7e 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8001870:	4620      	mov	r0, r4
 8001872:	0a32      	lsrs	r2, r6, #8
 8001874:	218c      	movs	r1, #140	; 0x8c
 8001876:	f000 fe79 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 800187a:	4620      	mov	r0, r4
 800187c:	b2f2      	uxtb	r2, r6
 800187e:	218d      	movs	r1, #141	; 0x8d
 8001880:	f000 fe74 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8001884:	4620      	mov	r0, r4
 8001886:	0a2a      	lsrs	r2, r5, #8
 8001888:	218e      	movs	r1, #142	; 0x8e
 800188a:	f000 fe6f 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 800188e:	4620      	mov	r0, r4
 8001890:	b2ea      	uxtb	r2, r5
 8001892:	218f      	movs	r1, #143	; 0x8f
 8001894:	f000 fe6a 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8001898:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 800189c:	4620      	mov	r0, r4
 800189e:	2196      	movs	r1, #150	; 0x96
 80018a0:	f000 fe64 	bl	800256c <MFX_IO_Write>
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80018a4:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 80018a8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 80018ac:	4620      	mov	r0, r4
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80018ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 80018b2:	2197      	movs	r1, #151	; 0x97
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 80018b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 80018b8:	431a      	orrs	r2, r3
 80018ba:	f000 fe57 	bl	800256c <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 80018be:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80018c2:	4620      	mov	r0, r4
 80018c4:	2198      	movs	r1, #152	; 0x98
}
 80018c6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ca:	b004      	add	sp, #16
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 80018cc:	f000 be4e 	b.w	800256c <MFX_IO_Write>

080018d0 <mfxstm32l152_Error_ReadSrc>:
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 80018d0:	2103      	movs	r1, #3
 80018d2:	b2c0      	uxtb	r0, r0
 80018d4:	f000 be4d 	b.w	8002572 <MFX_IO_Read>

080018d8 <mfxstm32l152_Error_ReadMsg>:
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 80018d8:	2104      	movs	r1, #4
 80018da:	b2c0      	uxtb	r0, r0
 80018dc:	f000 be49 	b.w	8002572 <MFX_IO_Read>

080018e0 <mfxstm32l152_TS_GetXY>:
{
 80018e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MFX_IO_ReadMultiple(DeviceAddr, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy)) ;
 80018e2:	2303      	movs	r3, #3
{
 80018e4:	460e      	mov	r6, r1
 80018e6:	4615      	mov	r5, r2
  MFX_IO_ReadMultiple(DeviceAddr, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy)) ;
 80018e8:	2124      	movs	r1, #36	; 0x24
 80018ea:	aa01      	add	r2, sp, #4
{
 80018ec:	4604      	mov	r4, r0
  MFX_IO_ReadMultiple(DeviceAddr, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy)) ;
 80018ee:	f000 fe43 	bl	8002578 <MFX_IO_ReadMultiple>
  *X = (data_xy[1]<<4) + (data_xy[0]>>4); 
 80018f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018f6:	f89d 1005 	ldrb.w	r1, [sp, #5]
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_FIFO_TH, MFXSTM32L152_TS_CLEAR_FIFO);
 80018fa:	4620      	mov	r0, r4
  *X = (data_xy[1]<<4) + (data_xy[0]>>4); 
 80018fc:	091a      	lsrs	r2, r3, #4
  *Y = (data_xy[2]<<4) + (data_xy[0]&4); 
 80018fe:	f003 0304 	and.w	r3, r3, #4
  *X = (data_xy[1]<<4) + (data_xy[0]>>4); 
 8001902:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_FIFO_TH, MFXSTM32L152_TS_CLEAR_FIFO);
 8001906:	21a4      	movs	r1, #164	; 0xa4
  *X = (data_xy[1]<<4) + (data_xy[0]>>4); 
 8001908:	8032      	strh	r2, [r6, #0]
  *Y = (data_xy[2]<<4) + (data_xy[0]&4); 
 800190a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800190e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_FIFO_TH, MFXSTM32L152_TS_CLEAR_FIFO);
 8001912:	2280      	movs	r2, #128	; 0x80
  *Y = (data_xy[2]<<4) + (data_xy[0]&4); 
 8001914:	802b      	strh	r3, [r5, #0]
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_FIFO_TH, MFXSTM32L152_TS_CLEAR_FIFO);
 8001916:	f000 fe29 	bl	800256c <MFX_IO_Write>
}
 800191a:	b002      	add	sp, #8
 800191c:	bd70      	pop	{r4, r5, r6, pc}

0800191e <mfxstm32l152_IDD_GetValue>:
{
 800191e:	b513      	push	{r0, r1, r4, lr}
  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8001920:	2303      	movs	r3, #3
{
 8001922:	460c      	mov	r4, r1
  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8001924:	aa01      	add	r2, sp, #4
 8001926:	2114      	movs	r1, #20
 8001928:	b2c0      	uxtb	r0, r0
 800192a:	f000 fe25 	bl	8002578 <MFX_IO_ReadMultiple>
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 800192e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001932:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800193c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001940:	4313      	orrs	r3, r2
 8001942:	6023      	str	r3, [r4, #0]
}
 8001944:	b002      	add	sp, #8
 8001946:	bd10      	pop	{r4, pc}

08001948 <mfxstm32l152_IO_WritePin>:
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8001948:	2301      	movs	r3, #1
  if (PinState != 0)
 800194a:	b11a      	cbz	r2, 8001954 <mfxstm32l152_IO_WritePin+0xc>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800194c:	460a      	mov	r2, r1
 800194e:	216c      	movs	r1, #108	; 0x6c
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8001950:	f7ff be21 	b.w	8001596 <mfxstm32l152_reg24_setPinValue>
 8001954:	460a      	mov	r2, r1
 8001956:	2170      	movs	r1, #112	; 0x70
 8001958:	e7fa      	b.n	8001950 <mfxstm32l152_IO_WritePin+0x8>

0800195a <mfxstm32l152_TS_DetectTouch>:
{
 800195a:	b510      	push	{r4, lr}
  state = MFX_IO_Read(DeviceAddr, MFXSTM32L152_TS_FIFO_STA);
 800195c:	2120      	movs	r1, #32
{
 800195e:	4604      	mov	r4, r0
  state = MFX_IO_Read(DeviceAddr, MFXSTM32L152_TS_FIFO_STA);
 8001960:	f000 fe07 	bl	8002572 <MFX_IO_Read>
  if(state > 0)
 8001964:	f010 0008 	ands.w	r0, r0, #8
 8001968:	d006      	beq.n	8001978 <mfxstm32l152_TS_DetectTouch+0x1e>
    if(MFX_IO_Read(DeviceAddr, MFXSTM32L152_TS_FIFO_LEVEL) > 0)
 800196a:	2121      	movs	r1, #33	; 0x21
 800196c:	4620      	mov	r0, r4
 800196e:	f000 fe00 	bl	8002572 <MFX_IO_Read>
  uint8_t ret = 0;
 8001972:	3000      	adds	r0, #0
 8001974:	bf18      	it	ne
 8001976:	2001      	movne	r0, #1
}
 8001978:	bd10      	pop	{r4, pc}
	...

0800197c <mfxstm32l152_WakeUp>:
{
 800197c:	b508      	push	{r3, lr}
    if(mfxstm32l152[idx] == DeviceAddr)
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <mfxstm32l152_WakeUp+0x24>)
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	4282      	cmp	r2, r0
 8001984:	d007      	beq.n	8001996 <mfxstm32l152_WakeUp+0x1a>
 8001986:	785a      	ldrb	r2, [r3, #1]
 8001988:	4282      	cmp	r2, r0
 800198a:	d004      	beq.n	8001996 <mfxstm32l152_WakeUp+0x1a>
 800198c:	789b      	ldrb	r3, [r3, #2]
 800198e:	4283      	cmp	r3, r0
 8001990:	d001      	beq.n	8001996 <mfxstm32l152_WakeUp+0x1a>
    MFX_IO_EnableWakeupPin();
 8001992:	f000 fdfe 	bl	8002592 <MFX_IO_EnableWakeupPin>
}
 8001996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_Wakeup();
 800199a:	f000 bdf9 	b.w	8002590 <MFX_IO_Wakeup>
 800199e:	bf00      	nop
 80019a0:	200001c8 	.word	0x200001c8

080019a4 <mfxstm32l152_EnableITSource>:
{
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	460c      	mov	r4, r1
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80019a8:	2142      	movs	r1, #66	; 0x42
{
 80019aa:	4605      	mov	r5, r0
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80019ac:	f000 fde1 	bl	8002572 <MFX_IO_Read>
  tmp |= Source; 
 80019b0:	ea40 0204 	orr.w	r2, r0, r4
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80019b4:	2142      	movs	r1, #66	; 0x42
 80019b6:	4628      	mov	r0, r5
 80019b8:	b2d2      	uxtb	r2, r2
}
 80019ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80019be:	f000 bdd5 	b.w	800256c <MFX_IO_Write>

080019c2 <mfxstm32l152_IO_EnableIT>:
{ 
 80019c2:	b510      	push	{r4, lr}
 80019c4:	4604      	mov	r4, r0
  MFX_IO_ITConfig();
 80019c6:	f000 fd97 	bl	80024f8 <MFX_IO_ITConfig>
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 80019ca:	2101      	movs	r1, #1
 80019cc:	4620      	mov	r0, r4
}
 80019ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 80019d2:	f7ff bfe7 	b.w	80019a4 <mfxstm32l152_EnableITSource>

080019d6 <mfxstm32l152_TS_EnableIT>:
{
 80019d6:	b510      	push	{r4, lr}
 80019d8:	4604      	mov	r4, r0
  MFX_IO_ITConfig();
 80019da:	f000 fd8d 	bl	80024f8 <MFX_IO_ITConfig>
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_TS_DET);
 80019de:	2108      	movs	r1, #8
 80019e0:	4620      	mov	r0, r4
}
 80019e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_TS_DET);
 80019e6:	f7ff bfdd 	b.w	80019a4 <mfxstm32l152_EnableITSource>

080019ea <mfxstm32l152_IDD_EnableIT>:
{
 80019ea:	b510      	push	{r4, lr}
 80019ec:	4604      	mov	r4, r0
  MFX_IO_ITConfig();
 80019ee:	f000 fd83 	bl	80024f8 <MFX_IO_ITConfig>
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80019f2:	2102      	movs	r1, #2
 80019f4:	4620      	mov	r0, r4
}
 80019f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80019fa:	f7ff bfd3 	b.w	80019a4 <mfxstm32l152_EnableITSource>

080019fe <mfxstm32l152_Error_EnableIT>:
{
 80019fe:	b510      	push	{r4, lr}
 8001a00:	4604      	mov	r4, r0
  MFX_IO_ITConfig();
 8001a02:	f000 fd79 	bl	80024f8 <MFX_IO_ITConfig>
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001a06:	2104      	movs	r1, #4
 8001a08:	4620      	mov	r0, r4
}
 8001a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001a0e:	f7ff bfc9 	b.w	80019a4 <mfxstm32l152_EnableITSource>

08001a12 <mfxstm32l152_DisableITSource>:
{
 8001a12:	b538      	push	{r3, r4, r5, lr}
 8001a14:	460c      	mov	r4, r1
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8001a16:	2142      	movs	r1, #66	; 0x42
{
 8001a18:	4605      	mov	r5, r0
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8001a1a:	f000 fdaa 	bl	8002572 <MFX_IO_Read>
  tmp &= ~Source; 
 8001a1e:	ea20 0204 	bic.w	r2, r0, r4
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8001a22:	2142      	movs	r1, #66	; 0x42
 8001a24:	4628      	mov	r0, r5
 8001a26:	b2d2      	uxtb	r2, r2
}
 8001a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8001a2c:	f000 bd9e 	b.w	800256c <MFX_IO_Write>

08001a30 <mfxstm32l152_IO_DisableIT>:
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);    
 8001a30:	2101      	movs	r1, #1
 8001a32:	f7ff bfee 	b.w	8001a12 <mfxstm32l152_DisableITSource>

08001a36 <mfxstm32l152_TS_DisableIT>:
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_TS_DET);    
 8001a36:	2108      	movs	r1, #8
 8001a38:	f7ff bfeb 	b.w	8001a12 <mfxstm32l152_DisableITSource>

08001a3c <mfxstm32l152_IDD_DisableIT>:
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	f7ff bfe8 	b.w	8001a12 <mfxstm32l152_DisableITSource>

08001a42 <mfxstm32l152_Error_DisableIT>:
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001a42:	2104      	movs	r1, #4
 8001a44:	f7ff bfe5 	b.w	8001a12 <mfxstm32l152_DisableITSource>

08001a48 <mfxstm32l152_GlobalITStatus>:
{
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	460c      	mov	r4, r1
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8001a4c:	2108      	movs	r1, #8
 8001a4e:	f000 fd90 	bl	8002572 <MFX_IO_Read>
}
 8001a52:	4020      	ands	r0, r4
 8001a54:	bd10      	pop	{r4, pc}

08001a56 <mfxstm32l152_TS_ITStatus>:
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_TS));
 8001a56:	21f8      	movs	r1, #248	; 0xf8
 8001a58:	f7ff bff6 	b.w	8001a48 <mfxstm32l152_GlobalITStatus>

08001a5c <mfxstm32l152_IDD_GetITStatus>:
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	f7ff bff3 	b.w	8001a48 <mfxstm32l152_GlobalITStatus>

08001a62 <mfxstm32l152_Error_GetITStatus>:
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8001a62:	2104      	movs	r1, #4
 8001a64:	f7ff bff0 	b.w	8001a48 <mfxstm32l152_GlobalITStatus>

08001a68 <mfxstm32l152_ClearGlobalIT>:
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8001a68:	460a      	mov	r2, r1
 8001a6a:	2144      	movs	r1, #68	; 0x44
 8001a6c:	f000 bd7e 	b.w	800256c <MFX_IO_Write>

08001a70 <mfxstm32l152_TS_ClearIT>:
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_TS);
 8001a70:	21f8      	movs	r1, #248	; 0xf8
 8001a72:	f7ff bff9 	b.w	8001a68 <mfxstm32l152_ClearGlobalIT>

08001a76 <mfxstm32l152_IDD_ClearIT>:
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001a76:	2102      	movs	r1, #2
 8001a78:	f7ff bff6 	b.w	8001a68 <mfxstm32l152_ClearGlobalIT>

08001a7c <mfxstm32l152_Error_ClearIT>:
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	f7ff bff3 	b.w	8001a68 <mfxstm32l152_ClearGlobalIT>

08001a82 <mfxstm32l152_SetIrqOutPinPolarity>:
{
 8001a82:	b538      	push	{r3, r4, r5, lr}
 8001a84:	460d      	mov	r5, r1
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8001a86:	2141      	movs	r1, #65	; 0x41
{
 8001a88:	4604      	mov	r4, r0
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8001a8a:	f000 fd72 	bl	8002572 <MFX_IO_Read>
  tmp &= ~(uint8_t)0x02;
 8001a8e:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8001a92:	2141      	movs	r1, #65	; 0x41
 8001a94:	4620      	mov	r0, r4
 8001a96:	432a      	orrs	r2, r5
 8001a98:	f000 fd68 	bl	800256c <MFX_IO_Write>
  MFX_IO_Delay(1);
 8001a9c:	2001      	movs	r0, #1
}
 8001a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Delay(1);
 8001aa2:	f000 bd73 	b.w	800258c <MFX_IO_Delay>

08001aa6 <mfxstm32l152_SetIrqOutPinType>:
{
 8001aa6:	b538      	push	{r3, r4, r5, lr}
 8001aa8:	460d      	mov	r5, r1
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8001aaa:	2141      	movs	r1, #65	; 0x41
{
 8001aac:	4604      	mov	r4, r0
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8001aae:	f000 fd60 	bl	8002572 <MFX_IO_Read>
  tmp &= ~(uint8_t)0x01;
 8001ab2:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8001ab6:	2141      	movs	r1, #65	; 0x41
 8001ab8:	4620      	mov	r0, r4
 8001aba:	432a      	orrs	r2, r5
 8001abc:	f000 fd56 	bl	800256c <MFX_IO_Write>
  MFX_IO_Delay(1);
 8001ac0:	2001      	movs	r0, #1
}
 8001ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Delay(1);
 8001ac6:	f000 bd61 	b.w	800258c <MFX_IO_Delay>
	...

08001acc <mfxstm32l152_Init>:
    if(mfxstm32l152[idx] == DeviceAddr)
 8001acc:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <mfxstm32l152_Init+0x40>)
{
 8001ace:	b510      	push	{r4, lr}
    if(mfxstm32l152[idx] == DeviceAddr)
 8001ad0:	7813      	ldrb	r3, [r2, #0]
{
 8001ad2:	4604      	mov	r4, r0
    if(mfxstm32l152[idx] == DeviceAddr)
 8001ad4:	4298      	cmp	r0, r3
 8001ad6:	d00c      	beq.n	8001af2 <mfxstm32l152_Init+0x26>
 8001ad8:	7850      	ldrb	r0, [r2, #1]
 8001ada:	4284      	cmp	r4, r0
 8001adc:	d009      	beq.n	8001af2 <mfxstm32l152_Init+0x26>
 8001ade:	7891      	ldrb	r1, [r2, #2]
 8001ae0:	428c      	cmp	r4, r1
 8001ae2:	d006      	beq.n	8001af2 <mfxstm32l152_Init+0x26>
 8001ae4:	b113      	cbz	r3, 8001aec <mfxstm32l152_Init+0x20>
 8001ae6:	b170      	cbz	r0, 8001b06 <mfxstm32l152_Init+0x3a>
 8001ae8:	b919      	cbnz	r1, 8001af2 <mfxstm32l152_Init+0x26>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001aea:	2302      	movs	r3, #2
      mfxstm32l152[empty] = DeviceAddr;
 8001aec:	54d4      	strb	r4, [r2, r3]
      MFX_IO_Init();
 8001aee:	f000 fcff 	bl	80024f0 <MFX_IO_Init>
  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8001af2:	4620      	mov	r0, r4
 8001af4:	2102      	movs	r1, #2
 8001af6:	f7ff ffc4 	bl	8001a82 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8001afa:	4620      	mov	r0, r4
 8001afc:	2101      	movs	r1, #1
}
 8001afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8001b02:	f7ff bfd0 	b.w	8001aa6 <mfxstm32l152_SetIrqOutPinType>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001b06:	2301      	movs	r3, #1
 8001b08:	e7f0      	b.n	8001aec <mfxstm32l152_Init+0x20>
 8001b0a:	bf00      	nop
 8001b0c:	200001c8 	.word	0x200001c8

08001b10 <mfxstm32l152_IO_InitPin>:
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8001b10:	4613      	mov	r3, r2
 8001b12:	460a      	mov	r2, r1
 8001b14:	2160      	movs	r1, #96	; 0x60
 8001b16:	f7ff bd3e 	b.w	8001596 <mfxstm32l152_reg24_setPinValue>

08001b1a <mfxstm32l152_IO_SetIrqEvtMode>:
{
 8001b1a:	b508      	push	{r3, lr}
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	460a      	mov	r2, r1
 8001b20:	214c      	movs	r1, #76	; 0x4c
 8001b22:	f7ff fd38 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001b26:	2001      	movs	r0, #1
}
 8001b28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_Delay(1);
 8001b2c:	f000 bd2e 	b.w	800258c <MFX_IO_Delay>

08001b30 <mfxstm32l152_IO_SetIrqTypeMode>:
{
 8001b30:	b508      	push	{r3, lr}
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8001b32:	4613      	mov	r3, r2
 8001b34:	460a      	mov	r2, r1
 8001b36:	2150      	movs	r1, #80	; 0x50
 8001b38:	f7ff fd2d 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001b3c:	2001      	movs	r0, #1
}
 8001b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_Delay(1);
 8001b42:	f000 bd23 	b.w	800258c <MFX_IO_Delay>

08001b46 <mfxstm32l152_IO_EnablePinIT>:
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8001b46:	460a      	mov	r2, r1
 8001b48:	2301      	movs	r3, #1
 8001b4a:	2148      	movs	r1, #72	; 0x48
 8001b4c:	f7ff bd23 	b.w	8001596 <mfxstm32l152_reg24_setPinValue>

08001b50 <mfxstm32l152_IO_DisablePinIT>:
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8001b50:	460a      	mov	r2, r1
 8001b52:	2300      	movs	r3, #0
 8001b54:	2148      	movs	r1, #72	; 0x48
 8001b56:	f7ff bd1e 	b.w	8001596 <mfxstm32l152_reg24_setPinValue>

08001b5a <mfxstm32l152_IO_Config>:
{
 8001b5a:	b538      	push	{r3, r4, r5, lr}
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	460d      	mov	r5, r1
  switch(IO_Mode)
 8001b60:	2a17      	cmp	r2, #23
 8001b62:	d836      	bhi.n	8001bd2 <mfxstm32l152_IO_Config+0x78>
 8001b64:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001b68:	004f0021 	.word	0x004f0021
 8001b6c:	0091005f 	.word	0x0091005f
 8001b70:	00f800cb 	.word	0x00f800cb
 8001b74:	00180018 	.word	0x00180018
 8001b78:	00400037 	.word	0x00400037
 8001b7c:	005b0035 	.word	0x005b0035
 8001b80:	00350057 	.word	0x00350057
 8001b84:	004f0053 	.word	0x004f0053
 8001b88:	00820079 	.word	0x00820079
 8001b8c:	00bc00b3 	.word	0x00bc00b3
 8001b90:	00e900e0 	.word	0x00e900e0
 8001b94:	0116010d 	.word	0x0116010d
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001b98:	f7ff ffda 	bl	8001b50 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001b9c:	2200      	movs	r2, #0
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f7ff ffb5 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e026      	b.n	8001bf8 <mfxstm32l152_IO_Config+0x9e>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001baa:	f7ff ffd1 	bl	8001b50 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff ffac 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	462a      	mov	r2, r5
 8001bbc:	2164      	movs	r1, #100	; 0x64
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff fce9 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	462a      	mov	r2, r5
 8001bc8:	2168      	movs	r1, #104	; 0x68
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f7ff fce3 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
  uint8_t error_code = 0;
 8001bd0:	2200      	movs	r2, #0
}
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	bd38      	pop	{r3, r4, r5, pc}
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001bd6:	f7ff ffbb 	bl	8001b50 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001bda:	2200      	movs	r2, #0
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001bdc:	4629      	mov	r1, r5
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7ff ff96 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8001be4:	2301      	movs	r3, #1
 8001be6:	e7e8      	b.n	8001bba <mfxstm32l152_IO_Config+0x60>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001be8:	f7ff ffb2 	bl	8001b50 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001bec:	2200      	movs	r2, #0
 8001bee:	4629      	mov	r1, r5
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff ff8d 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	462a      	mov	r2, r5
 8001bfa:	2164      	movs	r1, #100	; 0x64
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff fcca 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001c02:	2300      	movs	r3, #0
 8001c04:	e7df      	b.n	8001bc6 <mfxstm32l152_IO_Config+0x6c>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001c06:	f7ff ffa3 	bl	8001b50 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	e7c7      	b.n	8001b9e <mfxstm32l152_IO_Config+0x44>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001c0e:	f7ff ff9f 	bl	8001b50 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001c12:	2201      	movs	r2, #1
 8001c14:	e7cc      	b.n	8001bb0 <mfxstm32l152_IO_Config+0x56>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001c16:	f7ff ff9b 	bl	8001b50 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	e7e7      	b.n	8001bee <mfxstm32l152_IO_Config+0x94>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001c1e:	f7ff ff97 	bl	8001b50 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001c22:	2201      	movs	r2, #1
 8001c24:	e7da      	b.n	8001bdc <mfxstm32l152_IO_Config+0x82>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001c26:	f7ff fecc 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN); 
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff ff6e 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001c34:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001c36:	462a      	mov	r2, r5
 8001c38:	2164      	movs	r1, #100	; 0x64
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff fcab 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001c40:	2301      	movs	r3, #1
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001c42:	462a      	mov	r2, r5
 8001c44:	2168      	movs	r1, #104	; 0x68
 8001c46:	4620      	mov	r0, r4
 8001c48:	f7ff fca5 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);      
 8001c4c:	2201      	movs	r2, #1
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001c4e:	4629      	mov	r1, r5
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff ff62 	bl	8001b1a <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);  
 8001c56:	2201      	movs	r2, #1
 8001c58:	e030      	b.n	8001cbc <mfxstm32l152_IO_Config+0x162>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001c5a:	f7ff feb2 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4629      	mov	r1, r5
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff ff54 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e7e4      	b.n	8001c36 <mfxstm32l152_IO_Config+0xdc>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001c6c:	f7ff fea9 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001c70:	2200      	movs	r2, #0
 8001c72:	4629      	mov	r1, r5
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff ff4b 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	462a      	mov	r2, r5
 8001c7e:	2164      	movs	r1, #100	; 0x64
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff fc88 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001c86:	2300      	movs	r3, #0
 8001c88:	e7db      	b.n	8001c42 <mfxstm32l152_IO_Config+0xe8>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001c8a:	f7ff fe9a 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4629      	mov	r1, r5
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff ff3c 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001c98:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001c9a:	462a      	mov	r2, r5
 8001c9c:	2164      	movs	r1, #100	; 0x64
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7ff fc79 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	462a      	mov	r2, r5
 8001ca8:	2168      	movs	r1, #104	; 0x68
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff fc73 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001cb0:	2201      	movs	r2, #1
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff ff30 	bl	8001b1a <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);      
 8001cba:	2200      	movs	r2, #0
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);  
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff ff36 	bl	8001b30 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f7ff ff3d 	bl	8001b46 <mfxstm32l152_IO_EnablePinIT>
 8001ccc:	e780      	b.n	8001bd0 <mfxstm32l152_IO_Config+0x76>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001cce:	f7ff fe78 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7ff ff1a 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e7dc      	b.n	8001c9a <mfxstm32l152_IO_Config+0x140>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001ce0:	f7ff fe6f 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN); 
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff ff11 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001cee:	2301      	movs	r3, #1
 8001cf0:	462a      	mov	r2, r5
 8001cf2:	2164      	movs	r1, #100	; 0x64
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff fc4e 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e7d3      	b.n	8001ca6 <mfxstm32l152_IO_Config+0x14c>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001cfe:	f7ff fe60 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN); 
 8001d02:	2200      	movs	r2, #0
 8001d04:	4629      	mov	r1, r5
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff ff02 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001d0c:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001d0e:	462a      	mov	r2, r5
 8001d10:	2164      	movs	r1, #100	; 0x64
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff fc3f 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001d18:	2301      	movs	r3, #1
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001d1a:	462a      	mov	r2, r5
 8001d1c:	2168      	movs	r1, #104	; 0x68
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff fc39 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001d24:	2200      	movs	r2, #0
 8001d26:	e7c4      	b.n	8001cb2 <mfxstm32l152_IO_Config+0x158>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001d28:	f7ff fe4b 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4629      	mov	r1, r5
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7ff feed 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001d36:	2301      	movs	r3, #1
 8001d38:	e7e9      	b.n	8001d0e <mfxstm32l152_IO_Config+0x1b4>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001d3a:	f7ff fe42 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4629      	mov	r1, r5
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff fee4 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001d48:	2301      	movs	r3, #1
 8001d4a:	462a      	mov	r2, r5
 8001d4c:	2164      	movs	r1, #100	; 0x64
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff fc21 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001d54:	2300      	movs	r3, #0
 8001d56:	e7e0      	b.n	8001d1a <mfxstm32l152_IO_Config+0x1c0>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001d58:	f7ff fe33 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN); 
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4629      	mov	r1, r5
 8001d60:	4620      	mov	r0, r4
 8001d62:	f7ff fed5 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001d66:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001d68:	462a      	mov	r2, r5
 8001d6a:	2164      	movs	r1, #100	; 0x64
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff fc12 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001d72:	2301      	movs	r3, #1
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001d74:	462a      	mov	r2, r5
 8001d76:	2168      	movs	r1, #104	; 0x68
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7ff fc0c 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	e765      	b.n	8001c4e <mfxstm32l152_IO_Config+0xf4>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001d82:	f7ff fe1e 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001d86:	2200      	movs	r2, #0
 8001d88:	4629      	mov	r1, r5
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff fec0 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001d90:	2301      	movs	r3, #1
 8001d92:	e7e9      	b.n	8001d68 <mfxstm32l152_IO_Config+0x20e>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001d94:	f7ff fe15 	bl	80019c2 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff feb7 	bl	8001b10 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001da2:	2301      	movs	r3, #1
 8001da4:	462a      	mov	r2, r5
 8001da6:	2164      	movs	r1, #100	; 0x64
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fbf4 	bl	8001596 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001dae:	2300      	movs	r3, #0
 8001db0:	e7e0      	b.n	8001d74 <mfxstm32l152_IO_Config+0x21a>

08001db2 <stmpe811_IO_WritePin>:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @param PinState: The new IO pin state.
  * @retval None
  */
void stmpe811_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001db2:	b2c0      	uxtb	r0, r0
 8001db4:	b2c9      	uxtb	r1, r1
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001db6:	b11a      	cbz	r2, 8001dc0 <stmpe811_IO_WritePin+0xe>
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 8001db8:	460a      	mov	r2, r1
 8001dba:	2110      	movs	r1, #16
  }
  else
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_CLR_PIN, (uint8_t)IO_Pin);
 8001dbc:	f000 bb89 	b.w	80024d2 <IOE_Write>
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	2111      	movs	r1, #17
 8001dc4:	e7fa      	b.n	8001dbc <stmpe811_IO_WritePin+0xa>

08001dc6 <stmpe811_Reset>:
{
 8001dc6:	b510      	push	{r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001dc8:	b2c4      	uxtb	r4, r0
 8001dca:	2202      	movs	r2, #2
 8001dcc:	2103      	movs	r1, #3
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f000 fb7f 	bl	80024d2 <IOE_Write>
  IOE_Delay(10); 
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f000 fb89 	bl	80024ec <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001dda:	4620      	mov	r0, r4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2103      	movs	r1, #3
 8001de0:	f000 fb77 	bl	80024d2 <IOE_Write>
  IOE_Delay(2); 
 8001de4:	2002      	movs	r0, #2
}
 8001de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8001dea:	f000 bb7f 	b.w	80024ec <IOE_Delay>

08001dee <stmpe811_ReadID>:
{
 8001dee:	b538      	push	{r3, r4, r5, lr}
 8001df0:	4604      	mov	r4, r0
  IOE_Init(); 
 8001df2:	f000 fb6b 	bl	80024cc <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001df6:	2100      	movs	r1, #0
 8001df8:	b2e4      	uxtb	r4, r4
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f000 fb6b 	bl	80024d6 <IOE_Read>
 8001e00:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001e02:	2101      	movs	r1, #1
 8001e04:	4620      	mov	r0, r4
 8001e06:	f000 fb66 	bl	80024d6 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001e0a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8001e0e:	b280      	uxth	r0, r0
 8001e10:	bd38      	pop	{r3, r4, r5, pc}

08001e12 <stmpe811_IO_ReadPin>:
  *        of the following values:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @retval IO pin(s) state.
  */
uint32_t stmpe811_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001e12:	b510      	push	{r4, lr}
 8001e14:	460c      	mov	r4, r1
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 8001e16:	b2c0      	uxtb	r0, r0
 8001e18:	2112      	movs	r1, #18
 8001e1a:	f000 fb5c 	bl	80024d6 <IOE_Read>
 8001e1e:	4020      	ands	r0, r4
}
 8001e20:	b2c0      	uxtb	r0, r0
 8001e22:	bd10      	pop	{r4, pc}

08001e24 <stmpe811_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  STMPE811_PIN_x Where x can be from 0 to 7.             
  * @retval Status of the checked IO pin(s).
  */
uint32_t stmpe811_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001e24:	b510      	push	{r4, lr}
 8001e26:	460c      	mov	r4, r1
  /* Get the Interrupt status */
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 8001e28:	b2c0      	uxtb	r0, r0
 8001e2a:	210d      	movs	r1, #13
 8001e2c:	f000 fb53 	bl	80024d6 <IOE_Read>
 8001e30:	4020      	ands	r0, r4
}
 8001e32:	b2c0      	uxtb	r0, r0
 8001e34:	bd10      	pop	{r4, pc}

08001e36 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001e36:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001e38:	b2c4      	uxtb	r4, r0
 8001e3a:	2140      	movs	r1, #64	; 0x40
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f000 fb4a 	bl	80024d6 <IOE_Read>
  
  if(state > 0)
 8001e42:	0603      	lsls	r3, r0, #24
 8001e44:	d507      	bpl.n	8001e56 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001e46:	214c      	movs	r1, #76	; 0x4c
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f000 fb44 	bl	80024d6 <IOE_Read>
    {
      ret = 1;
 8001e4e:	3000      	adds	r0, #0
 8001e50:	bf18      	it	ne
 8001e52:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8001e54:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001e56:	2201      	movs	r2, #1
 8001e58:	214b      	movs	r1, #75	; 0x4b
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f000 fb39 	bl	80024d2 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001e60:	4620      	mov	r0, r4
 8001e62:	2200      	movs	r2, #0
 8001e64:	214b      	movs	r1, #75	; 0x4b
 8001e66:	f000 fb34 	bl	80024d2 <IOE_Write>
  uint8_t ret = 0;
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	e7f2      	b.n	8001e54 <stmpe811_TS_DetectTouch+0x1e>

08001e6e <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001e70:	2304      	movs	r3, #4
 8001e72:	b2c4      	uxtb	r4, r0
{
 8001e74:	460e      	mov	r6, r1
 8001e76:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001e78:	21d7      	movs	r1, #215	; 0xd7
 8001e7a:	eb0d 0203 	add.w	r2, sp, r3
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f000 fb2b 	bl	80024da <IOE_ReadMultiple>
 8001e84:	9b01      	ldr	r3, [sp, #4]
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001e86:	4620      	mov	r0, r4
 8001e88:	214b      	movs	r1, #75	; 0x4b
 8001e8a:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001e8c:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001e8e:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001e92:	8032      	strh	r2, [r6, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001e94:	2201      	movs	r2, #1
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001e96:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001e98:	f000 fb1b 	bl	80024d2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	214b      	movs	r1, #75	; 0x4b
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f000 fb16 	bl	80024d2 <IOE_Write>
}
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001eac <stmpe811_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <stmpe811_Init+0x2c>)
{
 8001eae:	b510      	push	{r4, lr}
    if(stmpe811[idx] == DeviceAddr)
 8001eb0:	7813      	ldrb	r3, [r2, #0]
{
 8001eb2:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8001eb4:	4298      	cmp	r0, r3
 8001eb6:	d00d      	beq.n	8001ed4 <stmpe811_Init+0x28>
 8001eb8:	7851      	ldrb	r1, [r2, #1]
 8001eba:	4288      	cmp	r0, r1
 8001ebc:	d00a      	beq.n	8001ed4 <stmpe811_Init+0x28>
 8001ebe:	b10b      	cbz	r3, 8001ec4 <stmpe811_Init+0x18>
 8001ec0:	b941      	cbnz	r1, 8001ed4 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001ec2:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 8001ec4:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 8001ec6:	f000 fb01 	bl	80024cc <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8001eca:	4620      	mov	r0, r4
}
 8001ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8001ed0:	f7ff bf79 	b.w	8001dc6 <stmpe811_Reset>
}
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200001cb 	.word	0x200001cb

08001edc <stmpe811_EnableGlobalIT>:
{
 8001edc:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001ede:	b2c4      	uxtb	r4, r0
 8001ee0:	2109      	movs	r1, #9
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 faf7 	bl	80024d6 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001ee8:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001eec:	2109      	movs	r1, #9
 8001eee:	4620      	mov	r0, r4
 8001ef0:	b2d2      	uxtb	r2, r2
}
 8001ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001ef6:	f000 baec 	b.w	80024d2 <IOE_Write>

08001efa <stmpe811_DisableGlobalIT>:
{
 8001efa:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001efc:	b2c4      	uxtb	r4, r0
 8001efe:	2109      	movs	r1, #9
 8001f00:	4620      	mov	r0, r4
 8001f02:	f000 fae8 	bl	80024d6 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001f06:	2109      	movs	r1, #9
 8001f08:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8001f0c:	4620      	mov	r0, r4
}
 8001f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001f12:	f000 bade 	b.w	80024d2 <IOE_Write>

08001f16 <stmpe811_EnableITSource>:
{
 8001f16:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001f18:	b2c5      	uxtb	r5, r0
{
 8001f1a:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001f1c:	210a      	movs	r1, #10
 8001f1e:	4628      	mov	r0, r5
 8001f20:	f000 fad9 	bl	80024d6 <IOE_Read>
  tmp |= Source; 
 8001f24:	ea40 0204 	orr.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001f28:	210a      	movs	r1, #10
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	b2d2      	uxtb	r2, r2
}
 8001f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001f32:	f000 bace 	b.w	80024d2 <IOE_Write>

08001f36 <stmpe811_IO_EnableIT>:
{ 
 8001f36:	b510      	push	{r4, lr}
 8001f38:	4604      	mov	r4, r0
  IOE_ITConfig();
 8001f3a:	f000 fac9 	bl	80024d0 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_GIT_IO);
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff ffe8 	bl	8001f16 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8001f46:	4620      	mov	r0, r4
}
 8001f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8001f4c:	f7ff bfc6 	b.w	8001edc <stmpe811_EnableGlobalIT>

08001f50 <stmpe811_TS_EnableIT>:
{
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
  IOE_ITConfig();
 8001f54:	f000 fabc 	bl	80024d0 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001f58:	211f      	movs	r1, #31
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff ffdb 	bl	8001f16 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001f60:	4620      	mov	r0, r4
}
 8001f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001f66:	f7ff bfb9 	b.w	8001edc <stmpe811_EnableGlobalIT>

08001f6a <stmpe811_DisableITSource>:
{
 8001f6a:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001f6c:	b2c5      	uxtb	r5, r0
{
 8001f6e:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001f70:	210a      	movs	r1, #10
 8001f72:	4628      	mov	r0, r5
 8001f74:	f000 faaf 	bl	80024d6 <IOE_Read>
  tmp &= ~Source; 
 8001f78:	ea20 0204 	bic.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001f7c:	210a      	movs	r1, #10
 8001f7e:	4628      	mov	r0, r5
 8001f80:	b2d2      	uxtb	r2, r2
}
 8001f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001f86:	f000 baa4 	b.w	80024d2 <IOE_Write>

08001f8a <stmpe811_IO_DisableIT>:
{
 8001f8a:	b510      	push	{r4, lr}
 8001f8c:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8001f8e:	f7ff ffb4 	bl	8001efa <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	4620      	mov	r0, r4
}
 8001f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8001f9a:	f7ff bfe6 	b.w	8001f6a <stmpe811_DisableITSource>

08001f9e <stmpe811_TS_DisableIT>:
{
 8001f9e:	b510      	push	{r4, lr}
 8001fa0:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8001fa2:	f7ff ffaa 	bl	8001efa <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001fa6:	211f      	movs	r1, #31
 8001fa8:	4620      	mov	r0, r4
}
 8001faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001fae:	f7ff bfdc 	b.w	8001f6a <stmpe811_DisableITSource>

08001fb2 <stmpe811_SetITPolarity>:
{
 8001fb2:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001fb4:	b2c4      	uxtb	r4, r0
{
 8001fb6:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001fb8:	2109      	movs	r1, #9
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f000 fa8b 	bl	80024d6 <IOE_Read>
  tmp &= ~(uint8_t)0x04;
 8001fc0:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001fc4:	2109      	movs	r1, #9
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	432a      	orrs	r2, r5
}
 8001fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001fce:	f000 ba80 	b.w	80024d2 <IOE_Write>

08001fd2 <stmpe811_SetITType>:
{
 8001fd2:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001fd4:	b2c4      	uxtb	r4, r0
{
 8001fd6:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001fd8:	2109      	movs	r1, #9
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f000 fa7b 	bl	80024d6 <IOE_Read>
  tmp &= ~(uint8_t)0x02;
 8001fe0:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001fe4:	2109      	movs	r1, #9
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	432a      	orrs	r2, r5
}
 8001fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001fee:	f000 ba70 	b.w	80024d2 <IOE_Write>

08001ff2 <stmpe811_ReadGITStatus>:
{
 8001ff2:	b510      	push	{r4, lr}
 8001ff4:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001ff6:	b2c0      	uxtb	r0, r0
 8001ff8:	210b      	movs	r1, #11
 8001ffa:	f000 fa6c 	bl	80024d6 <IOE_Read>
}
 8001ffe:	4020      	ands	r0, r4
 8002000:	bd10      	pop	{r4, pc}

08002002 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002002:	211f      	movs	r1, #31
 8002004:	f7ff bff5 	b.w	8001ff2 <stmpe811_ReadGITStatus>

08002008 <stmpe811_ClearGlobalIT>:
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002008:	460a      	mov	r2, r1
 800200a:	b2c0      	uxtb	r0, r0
 800200c:	210b      	movs	r1, #11
 800200e:	f000 ba60 	b.w	80024d2 <IOE_Write>

08002012 <stmpe811_IO_ClearIT>:
{
 8002012:	b538      	push	{r3, r4, r5, lr}
 8002014:	4604      	mov	r4, r0
 8002016:	460d      	mov	r5, r1
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_GIT_IO);
 8002018:	2180      	movs	r1, #128	; 0x80
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_STA, (uint8_t)IO_Pin);  
 800201a:	b2e4      	uxtb	r4, r4
 800201c:	b2ed      	uxtb	r5, r5
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_GIT_IO);
 800201e:	f7ff fff3 	bl	8002008 <stmpe811_ClearGlobalIT>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_STA, (uint8_t)IO_Pin);  
 8002022:	4620      	mov	r0, r4
 8002024:	462a      	mov	r2, r5
 8002026:	210d      	movs	r1, #13
 8002028:	f000 fa53 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_ED, (uint8_t)IO_Pin);
 800202c:	462a      	mov	r2, r5
 800202e:	4620      	mov	r0, r4
 8002030:	2114      	movs	r1, #20
 8002032:	f000 fa4e 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, (uint8_t)IO_Pin);
 8002036:	462a      	mov	r2, r5
 8002038:	4620      	mov	r0, r4
 800203a:	2115      	movs	r1, #21
 800203c:	f000 fa49 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8002040:	462a      	mov	r2, r5
 8002042:	4620      	mov	r0, r4
 8002044:	2116      	movs	r1, #22
}
 8002046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 800204a:	f000 ba42 	b.w	80024d2 <IOE_Write>

0800204e <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800204e:	211f      	movs	r1, #31
 8002050:	f7ff bfda 	b.w	8002008 <stmpe811_ClearGlobalIT>

08002054 <stmpe811_IO_InitPin>:
{
 8002054:	b570      	push	{r4, r5, r6, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 8002056:	b2c4      	uxtb	r4, r0
{
 8002058:	4616      	mov	r6, r2
 800205a:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 800205c:	2113      	movs	r1, #19
 800205e:	4620      	mov	r0, r4
 8002060:	f000 fa39 	bl	80024d6 <IOE_Read>
  if (Direction != STMPE811_DIRECTION_IN)
 8002064:	b146      	cbz	r6, 8002078 <stmpe811_IO_InitPin+0x24>
    tmp |= (uint8_t)IO_Pin;
 8002066:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 800206a:	4620      	mov	r0, r4
    tmp &= ~(uint8_t)IO_Pin;
 800206c:	b2d2      	uxtb	r2, r2
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 800206e:	2113      	movs	r1, #19
}
 8002070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8002074:	f000 ba2d 	b.w	80024d2 <IOE_Write>
    tmp &= ~(uint8_t)IO_Pin;
 8002078:	ea20 0205 	bic.w	r2, r0, r5
 800207c:	e7f5      	b.n	800206a <stmpe811_IO_InitPin+0x16>

0800207e <stmpe811_IO_DisableAF>:
{
 800207e:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002080:	b2c5      	uxtb	r5, r0
{
 8002082:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002084:	2117      	movs	r1, #23
 8002086:	4628      	mov	r0, r5
 8002088:	f000 fa25 	bl	80024d6 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 800208c:	ea40 0204 	orr.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8002090:	2117      	movs	r1, #23
 8002092:	4628      	mov	r0, r5
 8002094:	b2d2      	uxtb	r2, r2
}
 8002096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 800209a:	f000 ba1a 	b.w	80024d2 <IOE_Write>

0800209e <stmpe811_IO_Start>:
{
 800209e:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80020a0:	b2c5      	uxtb	r5, r0
{
 80020a2:	4604      	mov	r4, r0
 80020a4:	460e      	mov	r6, r1
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80020a6:	2104      	movs	r1, #4
 80020a8:	4628      	mov	r0, r5
 80020aa:	f000 fa14 	bl	80024d6 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80020ae:	2104      	movs	r1, #4
 80020b0:	f000 02fa 	and.w	r2, r0, #250	; 0xfa
 80020b4:	4628      	mov	r0, r5
 80020b6:	f000 fa0c 	bl	80024d2 <IOE_Write>
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 80020ba:	4620      	mov	r0, r4
 80020bc:	b2f1      	uxtb	r1, r6
}
 80020be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 80020c2:	f7ff bfdc 	b.w	800207e <stmpe811_IO_DisableAF>

080020c6 <stmpe811_IO_EnableAF>:
{
 80020c6:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80020c8:	b2c5      	uxtb	r5, r0
{
 80020ca:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80020cc:	2117      	movs	r1, #23
 80020ce:	4628      	mov	r0, r5
 80020d0:	f000 fa01 	bl	80024d6 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 80020d4:	ea20 0204 	bic.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80020d8:	2117      	movs	r1, #23
 80020da:	4628      	mov	r0, r5
 80020dc:	b2d2      	uxtb	r2, r2
}
 80020de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80020e2:	f000 b9f6 	b.w	80024d2 <IOE_Write>

080020e6 <stmpe811_TS_Start>:
{
 80020e6:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80020e8:	b2c4      	uxtb	r4, r0
{
 80020ea:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80020ec:	2104      	movs	r1, #4
 80020ee:	4620      	mov	r0, r4
 80020f0:	f000 f9f1 	bl	80024d6 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80020f4:	2104      	movs	r1, #4
 80020f6:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80020fa:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80020fc:	4620      	mov	r0, r4
 80020fe:	f000 f9e8 	bl	80024d2 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002102:	4630      	mov	r0, r6
 8002104:	21f0      	movs	r1, #240	; 0xf0
 8002106:	f7ff ffde 	bl	80020c6 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800210a:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 800210e:	4620      	mov	r0, r4
 8002110:	2104      	movs	r1, #4
 8002112:	f000 f9de 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002116:	2249      	movs	r2, #73	; 0x49
 8002118:	2120      	movs	r1, #32
 800211a:	4620      	mov	r0, r4
 800211c:	f000 f9d9 	bl	80024d2 <IOE_Write>
  IOE_Delay(2); 
 8002120:	2002      	movs	r0, #2
 8002122:	f000 f9e3 	bl	80024ec <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002126:	4620      	mov	r0, r4
 8002128:	2201      	movs	r2, #1
 800212a:	2121      	movs	r1, #33	; 0x21
 800212c:	f000 f9d1 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002130:	4620      	mov	r0, r4
 8002132:	229a      	movs	r2, #154	; 0x9a
 8002134:	2141      	movs	r1, #65	; 0x41
 8002136:	f000 f9cc 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800213a:	4620      	mov	r0, r4
 800213c:	2201      	movs	r2, #1
 800213e:	214a      	movs	r1, #74	; 0x4a
 8002140:	f000 f9c7 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002144:	4620      	mov	r0, r4
 8002146:	2201      	movs	r2, #1
 8002148:	214b      	movs	r1, #75	; 0x4b
 800214a:	f000 f9c2 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800214e:	4620      	mov	r0, r4
 8002150:	2200      	movs	r2, #0
 8002152:	214b      	movs	r1, #75	; 0x4b
 8002154:	f000 f9bd 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002158:	4620      	mov	r0, r4
 800215a:	2201      	movs	r2, #1
 800215c:	2156      	movs	r1, #86	; 0x56
 800215e:	f000 f9b8 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002162:	4620      	mov	r0, r4
 8002164:	2201      	movs	r2, #1
 8002166:	2158      	movs	r1, #88	; 0x58
 8002168:	f000 f9b3 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800216c:	4620      	mov	r0, r4
 800216e:	2201      	movs	r2, #1
 8002170:	2140      	movs	r1, #64	; 0x40
 8002172:	f000 f9ae 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002176:	4620      	mov	r0, r4
 8002178:	22ff      	movs	r2, #255	; 0xff
 800217a:	210b      	movs	r1, #11
 800217c:	f000 f9a9 	bl	80024d2 <IOE_Write>
  IOE_Delay(2); 
 8002180:	2002      	movs	r0, #2
}
 8002182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8002186:	f000 b9b1 	b.w	80024ec <IOE_Delay>

0800218a <stmpe811_IO_SetEdgeMode>:
{
 800218a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800218e:	460f      	mov	r7, r1
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8002190:	b2c6      	uxtb	r6, r0
 8002192:	2116      	movs	r1, #22
{
 8002194:	4690      	mov	r8, r2
  tmp1 &= ~(uint8_t)IO_Pin;
 8002196:	43fc      	mvns	r4, r7
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8002198:	4630      	mov	r0, r6
 800219a:	f000 f99c 	bl	80024d6 <IOE_Read>
 800219e:	4605      	mov	r5, r0
  tmp1 &= ~(uint8_t)IO_Pin;
 80021a0:	b264      	sxtb	r4, r4
  tmp2 = IOE_Read(DeviceAddr, STMPE811_REG_IO_RE);
 80021a2:	2115      	movs	r1, #21
 80021a4:	4630      	mov	r0, r6
 80021a6:	f000 f996 	bl	80024d6 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 80021aa:	ea04 0305 	and.w	r3, r4, r5
  if (Edge & STMPE811_EDGE_FALLING)
 80021ae:	f018 0f01 	tst.w	r8, #1
  tmp2 &= ~(uint8_t)IO_Pin;
 80021b2:	ea04 0400 	and.w	r4, r4, r0
  tmp1 &= ~(uint8_t)IO_Pin;
 80021b6:	b2da      	uxtb	r2, r3
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 80021b8:	4630      	mov	r0, r6
  tmp2 &= ~(uint8_t)IO_Pin;
 80021ba:	b2e4      	uxtb	r4, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 80021bc:	f04f 0116 	mov.w	r1, #22
    tmp1 |= (uint8_t)IO_Pin;
 80021c0:	bf1c      	itt	ne
 80021c2:	ea42 0307 	orrne.w	r3, r2, r7
 80021c6:	b2da      	uxtbne	r2, r3
  if (Edge & STMPE811_EDGE_RISING)
 80021c8:	f018 0f02 	tst.w	r8, #2
    tmp2 |= (uint8_t)IO_Pin;
 80021cc:	bf1c      	itt	ne
 80021ce:	433c      	orrne	r4, r7
 80021d0:	b2e4      	uxtbne	r4, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 80021d2:	f000 f97e 	bl	80024d2 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 80021d6:	4630      	mov	r0, r6
 80021d8:	4622      	mov	r2, r4
 80021da:	2115      	movs	r1, #21
}
 80021dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 80021e0:	f000 b977 	b.w	80024d2 <IOE_Write>

080021e4 <stmpe811_IO_EnablePinIT>:
{
 80021e4:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 80021e6:	b2c5      	uxtb	r5, r0
{
 80021e8:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 80021ea:	210c      	movs	r1, #12
 80021ec:	4628      	mov	r0, r5
 80021ee:	f000 f972 	bl	80024d6 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 80021f2:	ea40 0204 	orr.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 80021f6:	210c      	movs	r1, #12
 80021f8:	4628      	mov	r0, r5
 80021fa:	b2d2      	uxtb	r2, r2
}
 80021fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8002200:	f000 b967 	b.w	80024d2 <IOE_Write>

08002204 <stmpe811_IO_Config>:
{
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	4604      	mov	r4, r0
 8002208:	460d      	mov	r5, r1
  switch(IO_Mode)
 800220a:	2a05      	cmp	r2, #5
 800220c:	d80a      	bhi.n	8002224 <stmpe811_IO_Config+0x20>
 800220e:	e8df f002 	tbb	[pc, r2]
 8002212:	0b03      	.short	0x0b03
 8002214:	4733220d 	.word	0x4733220d
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN);
 8002218:	2200      	movs	r2, #0
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_OUT);
 800221a:	4629      	mov	r1, r5
 800221c:	4620      	mov	r0, r4
 800221e:	f7ff ff19 	bl	8002054 <stmpe811_IO_InitPin>
  uint8_t error_code = 0;
 8002222:	2200      	movs	r2, #0
}
 8002224:	4610      	mov	r0, r2
 8002226:	bd38      	pop	{r3, r4, r5, pc}
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_OUT);
 8002228:	2201      	movs	r2, #1
 800222a:	e7f6      	b.n	800221a <stmpe811_IO_Config+0x16>
    stmpe811_IO_EnableIT(DeviceAddr);
 800222c:	f7ff fe83 	bl	8001f36 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8002230:	4629      	mov	r1, r5
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff ffd6 	bl	80021e4 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8002238:	2200      	movs	r2, #0
 800223a:	4629      	mov	r1, r5
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff ff09 	bl	8002054 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);      
 8002242:	2102      	movs	r1, #2
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff fec4 	bl	8001fd2 <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_RISING); 
 800224a:	2202      	movs	r2, #2
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 800224c:	4629      	mov	r1, r5
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ff9b 	bl	800218a <stmpe811_IO_SetEdgeMode>
 8002254:	e7e5      	b.n	8002222 <stmpe811_IO_Config+0x1e>
    stmpe811_IO_EnableIT(DeviceAddr);
 8002256:	f7ff fe6e 	bl	8001f36 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 800225a:	4629      	mov	r1, r5
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff ffc1 	bl	80021e4 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8002262:	2200      	movs	r2, #0
 8002264:	4629      	mov	r1, r5
 8002266:	4620      	mov	r0, r4
 8002268:	f7ff fef4 	bl	8002054 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);    
 800226c:	2102      	movs	r1, #2
 800226e:	4620      	mov	r0, r4
 8002270:	f7ff feaf 	bl	8001fd2 <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8002274:	2201      	movs	r2, #1
 8002276:	e7e9      	b.n	800224c <stmpe811_IO_Config+0x48>
    stmpe811_IO_EnableIT(DeviceAddr);
 8002278:	f7ff fe5d 	bl	8001f36 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 800227c:	4629      	mov	r1, r5
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff ffb0 	bl	80021e4 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8002284:	2200      	movs	r2, #0
 8002286:	4629      	mov	r1, r5
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff fee3 	bl	8002054 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 800228e:	2100      	movs	r1, #0
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff fe9e 	bl	8001fd2 <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_LOW);      
 8002296:	2100      	movs	r1, #0
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff fe8a 	bl	8001fb2 <stmpe811_SetITPolarity>
 800229e:	e7c0      	b.n	8002222 <stmpe811_IO_Config+0x1e>
    stmpe811_IO_EnableIT(DeviceAddr);
 80022a0:	f7ff fe49 	bl	8001f36 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 80022a4:	4629      	mov	r1, r5
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff ff9c 	bl	80021e4 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 80022ac:	2200      	movs	r2, #0
 80022ae:	4629      	mov	r1, r5
 80022b0:	4620      	mov	r0, r4
 80022b2:	f7ff fecf 	bl	8002054 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 80022b6:	2100      	movs	r1, #0
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fe8a 	bl	8001fd2 <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 80022be:	2104      	movs	r1, #4
 80022c0:	e7ea      	b.n	8002298 <stmpe811_IO_Config+0x94>
	...

080022c4 <I2Cx_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval None
  */
static void I2Cx_Init(void)
{
 80022c4:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&hEvalI2c) == HAL_I2C_STATE_RESET)
 80022c6:	4c2c      	ldr	r4, [pc, #176]	; (8002378 <I2Cx_Init+0xb4>)
{
 80022c8:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&hEvalI2c) == HAL_I2C_STATE_RESET)
 80022ca:	4620      	mov	r0, r4
 80022cc:	f002 f9fc 	bl	80046c8 <HAL_I2C_GetState>
 80022d0:	4606      	mov	r6, r0
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d14d      	bne.n	8002372 <I2Cx_Init+0xae>
  {
    hEvalI2c.Instance              = EVAL_I2Cx;
    hEvalI2c.Init.Timing           = EVAL_I2Cx_TIMING;
 80022d6:	4a29      	ldr	r2, [pc, #164]	; (800237c <I2Cx_Init+0xb8>)
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022d8:	f44f 7180 	mov.w	r1, #256	; 0x100
    hEvalI2c.Init.Timing           = EVAL_I2Cx_TIMING;
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <I2Cx_Init+0xbc>)
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022de:	4d29      	ldr	r5, [pc, #164]	; (8002384 <I2Cx_Init+0xc0>)
    hEvalI2c.Init.OwnAddress1      = 0;
 80022e0:	60a0      	str	r0, [r4, #8]
    hEvalI2c.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    hEvalI2c.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    hEvalI2c.Init.OwnAddress2      = 0;
 80022e2:	6160      	str	r0, [r4, #20]
    hEvalI2c.Init.Timing           = EVAL_I2Cx_TIMING;
 80022e4:	e9c4 2300 	strd	r2, r3, [r4]
    hEvalI2c.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022e8:	2301      	movs	r3, #1
    hEvalI2c.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    hEvalI2c.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022ea:	e9c4 0007 	strd	r0, r0, [r4, #28]
    hEvalI2c.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022ee:	e9c4 3003 	strd	r3, r0, [r4, #12]
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	632b      	str	r3, [r5, #48]	; 0x30
 80022fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 80022fc:	9005      	str	r0, [sp, #20]
  gpio_init_structure.Alternate = EVAL_I2Cx_SCL_SDA_AF;
 80022fe:	2002      	movs	r0, #2
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002308:	2312      	movs	r3, #18
 800230a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = EVAL_I2Cx_SCL_SDA_AF;
 800230e:	2304      	movs	r3, #4
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002310:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = EVAL_I2Cx_SCL_SDA_AF;
 8002312:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002316:	481c      	ldr	r0, [pc, #112]	; (8002388 <I2Cx_Init+0xc4>)
 8002318:	f001 fcf8 	bl	8003d0c <HAL_GPIO_Init>
  gpio_init_structure.Pin = EVAL_I2Cx_SDA_PIN;
 800231c:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002320:	a903      	add	r1, sp, #12
 8002322:	4819      	ldr	r0, [pc, #100]	; (8002388 <I2Cx_Init+0xc4>)
  gpio_init_structure.Pin = EVAL_I2Cx_SDA_PIN;
 8002324:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002326:	f001 fcf1 	bl	8003d0c <HAL_GPIO_Init>
  EVAL_I2Cx_CLK_ENABLE();
 800232a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  HAL_NVIC_SetPriority(EVAL_I2Cx_EV_IRQn, 0x0F, 0);
 800232c:	4632      	mov	r2, r6
 800232e:	210f      	movs	r1, #15
 8002330:	201f      	movs	r0, #31
  EVAL_I2Cx_CLK_ENABLE();
 8002332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002336:	642b      	str	r3, [r5, #64]	; 0x40
 8002338:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800233a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	9b02      	ldr	r3, [sp, #8]
  EVAL_I2Cx_FORCE_RESET(); 
 8002342:	6a2b      	ldr	r3, [r5, #32]
 8002344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002348:	622b      	str	r3, [r5, #32]
  EVAL_I2Cx_RELEASE_RESET(); 
 800234a:	6a2b      	ldr	r3, [r5, #32]
 800234c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002350:	622b      	str	r3, [r5, #32]
  HAL_NVIC_SetPriority(EVAL_I2Cx_EV_IRQn, 0x0F, 0);
 8002352:	f000 fdff 	bl	8002f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_EV_IRQn);
 8002356:	201f      	movs	r0, #31
 8002358:	f000 fe2e 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EVAL_I2Cx_ER_IRQn, 0x0F, 0);
 800235c:	4632      	mov	r2, r6
 800235e:	210f      	movs	r1, #15
 8002360:	2020      	movs	r0, #32
 8002362:	f000 fdf7 	bl	8002f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_ER_IRQn);
 8002366:	2020      	movs	r0, #32
 8002368:	f000 fe26 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    
    /* Init the I2C */
    I2Cx_MspInit();
    HAL_I2C_Init(&hEvalI2c);    
 800236c:	4620      	mov	r0, r4
 800236e:	f001 ff40 	bl	80041f2 <HAL_I2C_Init>
  }
}
 8002372:	b008      	add	sp, #32
 8002374:	bd70      	pop	{r4, r5, r6, pc}
 8002376:	bf00      	nop
 8002378:	200001d0 	.word	0x200001d0
 800237c:	40005400 	.word	0x40005400
 8002380:	40912732 	.word	0x40912732
 8002384:	40023800 	.word	0x40023800
 8002388:	40020400 	.word	0x40020400

0800238c <I2Cx_Error.isra.1>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(uint8_t Addr)
 800238c:	b508      	push	{r3, lr}
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&hEvalI2c);
 800238e:	4803      	ldr	r0, [pc, #12]	; (800239c <I2Cx_Error.isra.1+0x10>)
 8002390:	f001 ff81 	bl	8004296 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
}
 8002394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init();
 8002398:	f7ff bf94 	b.w	80022c4 <I2Cx_Init>
 800239c:	200001d0 	.word	0x200001d0

080023a0 <I2Cx_Read>:
{
 80023a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Value = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	aa06      	add	r2, sp, #24
  status = HAL_I2C_Mem_Read(&hEvalI2c, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 80023a6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
  uint8_t Value = 0;
 80023aa:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&hEvalI2c, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 80023ae:	2301      	movs	r3, #1
 80023b0:	9200      	str	r2, [sp, #0]
 80023b2:	460a      	mov	r2, r1
 80023b4:	4601      	mov	r1, r0
 80023b6:	4806      	ldr	r0, [pc, #24]	; (80023d0 <I2Cx_Read+0x30>)
 80023b8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80023bc:	f002 f8ca 	bl	8004554 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80023c0:	b108      	cbz	r0, 80023c6 <I2Cx_Read+0x26>
    I2Cx_Error(Addr);
 80023c2:	f7ff ffe3 	bl	800238c <I2Cx_Error.isra.1>
}
 80023c6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80023ca:	b007      	add	sp, #28
 80023cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80023d0:	200001d0 	.word	0x200001d0

080023d4 <I2Cx_Write>:
{
 80023d4:	b510      	push	{r4, lr}
 80023d6:	b086      	sub	sp, #24
  status = HAL_I2C_Mem_Write(&hEvalI2c, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100); 
 80023d8:	2301      	movs	r3, #1
{
 80023da:	ac06      	add	r4, sp, #24
 80023dc:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(&hEvalI2c, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100); 
 80023e0:	2264      	movs	r2, #100	; 0x64
 80023e2:	9400      	str	r4, [sp, #0]
 80023e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80023e8:	460a      	mov	r2, r1
 80023ea:	4601      	mov	r1, r0
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <I2Cx_Write+0x28>)
 80023ee:	f001 fffd 	bl	80043ec <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80023f2:	b108      	cbz	r0, 80023f8 <I2Cx_Write+0x24>
    I2Cx_Error(Addr);
 80023f4:	f7ff ffca 	bl	800238c <I2Cx_Error.isra.1>
}
 80023f8:	b006      	add	sp, #24
 80023fa:	bd10      	pop	{r4, pc}
 80023fc:	200001d0 	.word	0x200001d0

08002400 <I2Cx_ReadMultiple>:
{
 8002400:	b530      	push	{r4, r5, lr}
  if(Addr == EXC7200_I2C_ADDRESS)
 8002402:	2808      	cmp	r0, #8
{
 8002404:	b085      	sub	sp, #20
 8002406:	4615      	mov	r5, r2
 8002408:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800240c:	461a      	mov	r2, r3
 800240e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  if(Addr == EXC7200_I2C_ADDRESS)
 8002412:	d10b      	bne.n	800242c <I2Cx_ReadMultiple+0x2c>
    status = HAL_I2C_Master_Receive(&hEvalI2c, Addr, Buffer, Length, 1000);  
 8002414:	4601      	mov	r1, r0
 8002416:	9400      	str	r4, [sp, #0]
 8002418:	4809      	ldr	r0, [pc, #36]	; (8002440 <I2Cx_ReadMultiple+0x40>)
 800241a:	f001 ff55 	bl	80042c8 <HAL_I2C_Master_Receive>
    status = HAL_I2C_Mem_Read(&hEvalI2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800241e:	4604      	mov	r4, r0
  if(status != HAL_OK)
 8002420:	b108      	cbz	r0, 8002426 <I2Cx_ReadMultiple+0x26>
    I2Cx_Error(Addr);
 8002422:	f7ff ffb3 	bl	800238c <I2Cx_Error.isra.1>
}
 8002426:	4620      	mov	r0, r4
 8002428:	b005      	add	sp, #20
 800242a:	bd30      	pop	{r4, r5, pc}
    status = HAL_I2C_Mem_Read(&hEvalI2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800242c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002430:	9200      	str	r2, [sp, #0]
 8002432:	462b      	mov	r3, r5
 8002434:	460a      	mov	r2, r1
 8002436:	4601      	mov	r1, r0
 8002438:	4801      	ldr	r0, [pc, #4]	; (8002440 <I2Cx_ReadMultiple+0x40>)
 800243a:	f002 f88b 	bl	8004554 <HAL_I2C_Mem_Read>
 800243e:	e7ee      	b.n	800241e <I2Cx_ReadMultiple+0x1e>
 8002440:	200001d0 	.word	0x200001d0

08002444 <BSP_LED_Init>:
{
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <BSP_LED_Init+0x78>)
 8002446:	b570      	push	{r4, r5, r6, lr}
 8002448:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800244c:	b088      	sub	sp, #32
  if ((Led == LED1) || (Led == LED3))
 800244e:	b160      	cbz	r0, 800246a <BSP_LED_Init+0x26>
 8002450:	2802      	cmp	r0, #2
 8002452:	d026      	beq.n	80024a2 <BSP_LED_Init+0x5e>
  BSP_IO_Init();	/* Initialize MFX */
 8002454:	f000 f89e 	bl	8002594 <BSP_IO_Init>
  BSP_IO_ConfigPin(GPIO_PIN[Led], IO_MODE_OUTPUT_PP_PU);
 8002458:	210e      	movs	r1, #14
 800245a:	4620      	mov	r0, r4
 800245c:	f000 f8cc 	bl	80025f8 <BSP_IO_ConfigPin>
  BSP_IO_WritePin(GPIO_PIN[Led], BSP_IO_PIN_SET);
 8002460:	2101      	movs	r1, #1
 8002462:	4620      	mov	r0, r4
 8002464:	f000 f8d4 	bl	8002610 <BSP_IO_WritePin>
}
 8002468:	e019      	b.n	800249e <BSP_LED_Init+0x5a>
      LED1_GPIO_CLK_ENABLE();
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <BSP_LED_Init+0x7c>)
      gpio_led = LED1_GPIO_PORT;
 800246c:	4d15      	ldr	r5, [pc, #84]	; (80024c4 <BSP_LED_Init+0x80>)
      LED1_GPIO_CLK_ENABLE();
 800246e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002470:	f042 0220 	orr.w	r2, r2, #32
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002480:	2601      	movs	r6, #1
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002482:	2303      	movs	r3, #3
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8002484:	a903      	add	r1, sp, #12
 8002486:	4628      	mov	r0, r5
    gpio_init_structure.Pin = GPIO_PIN[Led];
 8002488:	9403      	str	r4, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800248a:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800248c:	e9cd 6604 	strd	r6, r6, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8002490:	f001 fc3c 	bl	8003d0c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8002494:	4632      	mov	r2, r6
 8002496:	b2a1      	uxth	r1, r4
 8002498:	4628      	mov	r0, r5
 800249a:	f001 fd1f 	bl	8003edc <HAL_GPIO_WritePin>
}
 800249e:	b008      	add	sp, #32
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
      LED3_GPIO_CLK_ENABLE();
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <BSP_LED_Init+0x7c>)
      gpio_led = LED3_GPIO_PORT;
 80024a4:	4d08      	ldr	r5, [pc, #32]	; (80024c8 <BSP_LED_Init+0x84>)
      LED3_GPIO_CLK_ENABLE();
 80024a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a8:	f042 0202 	orr.w	r2, r2, #2
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	9b02      	ldr	r3, [sp, #8]
 80024b8:	e7e2      	b.n	8002480 <BSP_LED_Init+0x3c>
 80024ba:	bf00      	nop
 80024bc:	0800d5fc 	.word	0x0800d5fc
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40021400 	.word	0x40021400
 80024c8:	40020400 	.word	0x40020400

080024cc <IOE_Init>:
 80024cc:	f7ff befa 	b.w	80022c4 <I2Cx_Init>

080024d0 <IOE_ITConfig>:
 80024d0:	4770      	bx	lr

080024d2 <IOE_Write>:
  * @param  Value: Data to be written
  * @retval None
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  I2Cx_Write(Addr, Reg, Value);
 80024d2:	f7ff bf7f 	b.w	80023d4 <I2Cx_Write>

080024d6 <IOE_Read>:
  * @param  Reg: Register address 
  * @retval Read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
  return I2Cx_Read(Addr, Reg);
 80024d6:	f7ff bf63 	b.w	80023a0 <I2Cx_Read>

080024da <IOE_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80024da:	b507      	push	{r0, r1, r2, lr}
 return I2Cx_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	2201      	movs	r2, #1
 80024e2:	f7ff ff8d 	bl	8002400 <I2Cx_ReadMultiple>
}
 80024e6:	b003      	add	sp, #12
 80024e8:	f85d fb04 	ldr.w	pc, [sp], #4

080024ec <IOE_Delay>:
 80024ec:	f000 bd0e 	b.w	8002f0c <HAL_Delay>

080024f0 <MFX_IO_Init>:
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
  I2Cx_Init();
 80024f0:	f7ff bee8 	b.w	80022c4 <I2Cx_Init>

080024f4 <MFX_IO_DeInit>:
  * @brief  DeInitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
}
 80024f4:	4770      	bx	lr
	...

080024f8 <MFX_IO_ITConfig>:
void MFX_IO_ITConfig(void)
{
  static uint8_t mfx_io_it_enabled = 0;
  GPIO_InitTypeDef  gpio_init_structure;
  
  if(mfx_io_it_enabled == 0)
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <MFX_IO_ITConfig+0x64>)
{
 80024fa:	b500      	push	{lr}
  if(mfx_io_it_enabled == 0)
 80024fc:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
{
 8002500:	b089      	sub	sp, #36	; 0x24
  if(mfx_io_it_enabled == 0)
 8002502:	bb42      	cbnz	r2, 8002556 <MFX_IO_ITConfig+0x5e>
  {
    mfx_io_it_enabled = 1;
 8002504:	2101      	movs	r1, #1
    
    gpio_init_structure.Pin   = GPIO_PIN_8;
    gpio_init_structure.Pull  = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_LOW;
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002506:	4816      	ldr	r0, [pc, #88]	; (8002560 <MFX_IO_ITConfig+0x68>)
    mfx_io_it_enabled = 1;
 8002508:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <MFX_IO_ITConfig+0x6c>)
 800250e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002510:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002514:	6319      	str	r1, [r3, #48]	; 0x30
 8002516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002518:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800251c:	9101      	str	r1, [sp, #4]
 800251e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002520:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002522:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002526:	6459      	str	r1, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002528:	a903      	add	r1, sp, #12
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	9b02      	ldr	r3, [sp, #8]
    gpio_init_structure.Pin   = GPIO_PIN_8;
 8002534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002538:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <MFX_IO_ITConfig+0x70>)
    gpio_init_structure.Speed = GPIO_SPEED_LOW;
 800253c:	e9cd 2205 	strd	r2, r2, [sp, #20]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8002540:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002542:	f001 fbe3 	bl	8003d0c <HAL_GPIO_Init>
    
    /* Enable and set GPIO EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(EXTI9_5_IRQn), 0x0F, 0x0F);
 8002546:	220f      	movs	r2, #15
 8002548:	2017      	movs	r0, #23
 800254a:	4611      	mov	r1, r2
 800254c:	f000 fd02 	bl	8002f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI9_5_IRQn));
 8002550:	2017      	movs	r0, #23
 8002552:	f000 fd31 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  }
}
 8002556:	b009      	add	sp, #36	; 0x24
 8002558:	f85d fb04 	ldr.w	pc, [sp], #4
 800255c:	200001d0 	.word	0x200001d0
 8002560:	40022000 	.word	0x40022000
 8002564:	40023800 	.word	0x40023800
 8002568:	10110000 	.word	0x10110000

0800256c <MFX_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  I2Cx_Write((uint8_t) Addr, Reg, Value);
 800256c:	b2c0      	uxtb	r0, r0
 800256e:	f7ff bf31 	b.w	80023d4 <I2Cx_Write>

08002572 <MFX_IO_Read>:
  * @param  Reg: Register address 
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
  return I2Cx_Read((uint8_t) Addr, Reg);
 8002572:	b2c0      	uxtb	r0, r0
 8002574:	f7ff bf14 	b.w	80023a0 <I2Cx_Read>

08002578 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002578:	b507      	push	{r0, r1, r2, lr}
 return I2Cx_ReadMultiple((uint8_t)Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	2201      	movs	r2, #1
 8002580:	b2c0      	uxtb	r0, r0
 8002582:	f7ff ff3d 	bl	8002400 <I2Cx_ReadMultiple>
}
 8002586:	b003      	add	sp, #12
 8002588:	f85d fb04 	ldr.w	pc, [sp], #4

0800258c <MFX_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800258c:	f000 bcbe 	b.w	8002f0c <HAL_Delay>

08002590 <MFX_IO_Wakeup>:
 8002590:	4770      	bx	lr

08002592 <MFX_IO_EnableWakeupPin>:
 8002592:	4770      	bx	lr

08002594 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8002594:	b570      	push	{r4, r5, r6, lr}
  uint8_t ret = IO_OK;
  
  if (IoDrv == NULL)  /* Checks if MFX initialization never done */
 8002596:	4d0d      	ldr	r5, [pc, #52]	; (80025cc <BSP_IO_Init+0x38>)
 8002598:	682c      	ldr	r4, [r5, #0]
 800259a:	b99c      	cbnz	r4, 80025c4 <BSP_IO_Init+0x30>
  {
    /* Read ID and verify the MFX is ready */
    mfxstm32l152Identifier = mfxstm32l152_io_drv.ReadID(IO_I2C_ADDRESS);
 800259c:	4e0c      	ldr	r6, [pc, #48]	; (80025d0 <BSP_IO_Init+0x3c>)
 800259e:	2084      	movs	r0, #132	; 0x84
 80025a0:	6873      	ldr	r3, [r6, #4]
 80025a2:	4798      	blx	r3
 80025a4:	b2c0      	uxtb	r0, r0
 80025a6:	7128      	strb	r0, [r5, #4]
    if((mfxstm32l152Identifier == MFXSTM32L152_ID_1) || (mfxstm32l152Identifier == MFXSTM32L152_ID_2))
 80025a8:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80025ac:	2879      	cmp	r0, #121	; 0x79
 80025ae:	d10b      	bne.n	80025c8 <BSP_IO_Init+0x34>
    {
      /* Initialize the IO driver structure */
      IoDrv = &mfxstm32l152_io_drv;

      /* Initialize MFX */
      IoDrv->Init(IO_I2C_ADDRESS);
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	2084      	movs	r0, #132	; 0x84
      IoDrv = &mfxstm32l152_io_drv;
 80025b4:	602e      	str	r6, [r5, #0]
      IoDrv->Init(IO_I2C_ADDRESS);
 80025b6:	4798      	blx	r3
      IoDrv->Start(IO_I2C_ADDRESS, IO_PIN_ALL);
 80025b8:	682b      	ldr	r3, [r5, #0]
 80025ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80025be:	2084      	movs	r0, #132	; 0x84
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4798      	blx	r3
  uint8_t ret = IO_OK;
 80025c4:	2000      	movs	r0, #0
  {
    /* MFX initialization already done : do nothing */
  }
  
  return ret;
}
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
      ret = IO_ERROR;
 80025c8:	2001      	movs	r0, #1
 80025ca:	e7fc      	b.n	80025c6 <BSP_IO_Init+0x32>
 80025cc:	20000268 	.word	0x20000268
 80025d0:	2000004c 	.word	0x2000004c

080025d4 <BSP_IO_ITGetStatus>:
  * @retval IO_OK if read status OK. Other value if error.
  */
uint32_t BSP_IO_ITGetStatus(uint32_t IoPin)
{
  /* Return the IO Pin IT status */
  return (IoDrv->ITStatus(IO_I2C_ADDRESS, IoPin));
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <BSP_IO_ITGetStatus+0xc>)
 80025d6:	4601      	mov	r1, r0
 80025d8:	2084      	movs	r0, #132	; 0x84
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	4718      	bx	r3
 80025e0:	20000268 	.word	0x20000268

080025e4 <BSP_IO_ITClear>:
  * @retval None
  */
void BSP_IO_ITClear(void)
{
  /* Clear all IO IT pending bits */
  IoDrv->ClearIT(IO_I2C_ADDRESS, MFXSTM32L152_GPIO_PINS_ALL);
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <BSP_IO_ITClear+0x10>)
 80025e6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80025ea:	2084      	movs	r0, #132	; 0x84
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	4718      	bx	r3
 80025f2:	bf00      	nop
 80025f4:	20000268 	.word	0x20000268

080025f8 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL_PD
  *            @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval IO_OK if all initializations are OK. Other value if error.  
  */
uint8_t BSP_IO_ConfigPin(uint32_t IoPin, IO_ModeTypedef IoMode)
{
 80025f8:	b508      	push	{r3, lr}
  /* Configure the selected IO pin(s) mode */
  IoDrv->Config(IO_I2C_ADDRESS, IoPin, IoMode);
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <BSP_IO_ConfigPin+0x14>)
 80025fc:	460a      	mov	r2, r1
 80025fe:	4601      	mov	r1, r0
 8002600:	2084      	movs	r0, #132	; 0x84
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	4798      	blx	r3
  
  return IO_OK;  
}
 8002608:	2000      	movs	r0, #0
 800260a:	bd08      	pop	{r3, pc}
 800260c:	20000268 	.word	0x20000268

08002610 <BSP_IO_WritePin>:
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IoPin, BSP_IO_PinStateTypeDef PinState)
{
  /* Set the Pin state */
  IoDrv->WritePin(IO_I2C_ADDRESS, IoPin, PinState);
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <BSP_IO_WritePin+0x10>)
 8002612:	460a      	mov	r2, r1
 8002614:	4601      	mov	r1, r0
 8002616:	2084      	movs	r0, #132	; 0x84
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	4718      	bx	r3
 800261e:	bf00      	nop
 8002620:	20000268 	.word	0x20000268

08002624 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dEval.Init.Mode         = DMA2D_R2M;
 8002628:	4c15      	ldr	r4, [pc, #84]	; (8002680 <LL_FillBuffer+0x5c>)
{
 800262a:	4617      	mov	r7, r2
 800262c:	4698      	mov	r8, r3
  hDma2dEval.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800262e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002632:	2300      	movs	r3, #0
{
 8002634:	4681      	mov	r9, r0
  hDma2dEval.Init.OutputOffset = OffLine;      
  
  hDma2dEval.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dEval) == HAL_OK) 
 8002636:	4620      	mov	r0, r4
{
 8002638:	460e      	mov	r6, r1
 800263a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hDma2dEval.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800263c:	e9c4 2301 	strd	r2, r3, [r4, #4]
  hDma2dEval.Init.OutputOffset = OffLine;      
 8002640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002642:	60e3      	str	r3, [r4, #12]
  hDma2dEval.Instance = DMA2D;
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <LL_FillBuffer+0x60>)
 8002646:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dEval) == HAL_OK) 
 8002648:	f000 fe25 	bl	8003296 <HAL_DMA2D_Init>
 800264c:	b9a0      	cbnz	r0, 8002678 <LL_FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dEval, LayerIndex) == HAL_OK) 
 800264e:	4649      	mov	r1, r9
 8002650:	4620      	mov	r0, r4
 8002652:	f000 fee7 	bl	8003424 <HAL_DMA2D_ConfigLayer>
 8002656:	b978      	cbnz	r0, 8002678 <LL_FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&hDma2dEval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002658:	f8cd 8000 	str.w	r8, [sp]
 800265c:	463b      	mov	r3, r7
 800265e:	4632      	mov	r2, r6
 8002660:	4629      	mov	r1, r5
 8002662:	4620      	mov	r0, r4
 8002664:	f000 fe43 	bl	80032ee <HAL_DMA2D_Start>
 8002668:	b930      	cbnz	r0, 8002678 <LL_FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dEval, 10);
 800266a:	210a      	movs	r1, #10
 800266c:	4620      	mov	r0, r4
      }
    }
  } 
}
 800266e:	b003      	add	sp, #12
 8002670:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dEval, 10);
 8002674:	f000 be55 	b.w	8003322 <HAL_DMA2D_PollForTransfer>
}
 8002678:	b003      	add	sp, #12
 800267a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800267e:	bf00      	nop
 8002680:	20000270 	.word	0x20000270
 8002684:	4002b000 	.word	0x4002b000

08002688 <BSP_LCD_GetXSize>:
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <BSP_LCD_GetXSize+0x10>)
 800268a:	2134      	movs	r1, #52	; 0x34
 800268c:	4a03      	ldr	r2, [pc, #12]	; (800269c <BSP_LCD_GetXSize+0x14>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	fb01 2303 	mla	r3, r1, r3, r2
}
 8002694:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8002696:	4770      	bx	lr
 8002698:	20000270 	.word	0x20000270
 800269c:	200042c8 	.word	0x200042c8

080026a0 <BSP_LCD_GetYSize>:
  return hLtdcEval.LayerCfg[ActiveLayer].ImageHeight;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <BSP_LCD_GetYSize+0x10>)
 80026a2:	2134      	movs	r1, #52	; 0x34
 80026a4:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <BSP_LCD_GetYSize+0x14>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	fb01 2303 	mla	r3, r1, r3, r2
}
 80026ac:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80026ae:	4770      	bx	lr
 80026b0:	20000270 	.word	0x20000270
 80026b4:	200042c8 	.word	0x200042c8

080026b8 <BSP_LCD_LayerDefaultInit>:
{     
 80026b8:	b570      	push	{r4, r5, r6, lr}
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 80026ba:	4d18      	ldr	r5, [pc, #96]	; (800271c <BSP_LCD_LayerDefaultInit+0x64>)
{     
 80026bc:	4604      	mov	r4, r0
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 80026be:	2634      	movs	r6, #52	; 0x34
 80026c0:	4817      	ldr	r0, [pc, #92]	; (8002720 <BSP_LCD_LayerDefaultInit+0x68>)
 80026c2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
{     
 80026c4:	b08e      	sub	sp, #56	; 0x38
  layer_cfg.WindowX0 = 0;
 80026c6:	2300      	movs	r3, #0
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 80026c8:	fb06 0202 	mla	r2, r6, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
 80026cc:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 80026ce:	21ff      	movs	r1, #255	; 0xff
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 80026d0:	6e16      	ldr	r6, [r2, #96]	; 0x60
  return hLtdcEval.LayerCfg[ActiveLayer].ImageHeight;
 80026d2:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.WindowX0 = 0;
 80026d4:	9301      	str	r3, [sp, #4]
  layer_cfg.Backcolor.Blue = 0;
 80026d6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 80026da:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026de:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
 80026e2:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
 80026e6:	e9cd 6302 	strd	r6, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80026ee:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80026f0:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026f4:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcEval, &layer_cfg, LayerIndex); 
 80026f8:	4622      	mov	r2, r4
 80026fa:	a901      	add	r1, sp, #4
 80026fc:	f002 f8da 	bl	80048b4 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002700:	200c      	movs	r0, #12
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	fb00 5004 	mla	r0, r0, r4, r5
 800270a:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].pFont     = &Font24;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <BSP_LCD_LayerDefaultInit+0x6c>)
 800270e:	64c3      	str	r3, [r0, #76]	; 0x4c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002710:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002714:	6443      	str	r3, [r0, #68]	; 0x44
}
 8002716:	b00e      	add	sp, #56	; 0x38
 8002718:	bd70      	pop	{r4, r5, r6, pc}
 800271a:	bf00      	nop
 800271c:	20000270 	.word	0x20000270
 8002720:	200042c8 	.word	0x200042c8
 8002724:	200000f4 	.word	0x200000f4

08002728 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8002728:	4b01      	ldr	r3, [pc, #4]	; (8002730 <BSP_LCD_SelectLayer+0x8>)
 800272a:	6418      	str	r0, [r3, #64]	; 0x40
} 
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000270 	.word	0x20000270

08002734 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <BSP_LCD_SetTextColor+0x10>)
 8002736:	210c      	movs	r1, #12
 8002738:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800273a:	fb01 2303 	mla	r3, r1, r3, r2
 800273e:	6458      	str	r0, [r3, #68]	; 0x44
}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000270 	.word	0x20000270

08002748 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8002748:	4a03      	ldr	r2, [pc, #12]	; (8002758 <BSP_LCD_SetBackColor+0x10>)
 800274a:	210c      	movs	r1, #12
 800274c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800274e:	fb01 2303 	mla	r3, r1, r3, r2
 8002752:	6498      	str	r0, [r3, #72]	; 0x48
}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000270 	.word	0x20000270

0800275c <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 800275c:	4a03      	ldr	r2, [pc, #12]	; (800276c <BSP_LCD_SetFont+0x10>)
 800275e:	210c      	movs	r1, #12
 8002760:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002762:	fb01 2303 	mla	r3, r1, r3, r2
 8002766:	64d8      	str	r0, [r3, #76]	; 0x4c
}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000270 	.word	0x20000270

08002770 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8002770:	4a03      	ldr	r2, [pc, #12]	; (8002780 <BSP_LCD_GetFont+0x10>)
 8002772:	210c      	movs	r1, #12
 8002774:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002776:	fb01 2303 	mla	r3, r1, r3, r2
}
 800277a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000270 	.word	0x20000270

08002784 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcEval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <BSP_LCD_Clear+0x24>)
{ 
 8002786:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcEval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002788:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return hLtdcEval.LayerCfg[ActiveLayer].ImageHeight;
 800278a:	2134      	movs	r1, #52	; 0x34
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcEval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800278e:	9001      	str	r0, [sp, #4]
 8002790:	4620      	mov	r0, r4
  return hLtdcEval.LayerCfg[ActiveLayer].ImageHeight;
 8002792:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcEval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002796:	2300      	movs	r3, #0
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
 800279e:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 80027a0:	f7ff ff40 	bl	8002624 <LL_FillBuffer>
}
 80027a4:	b002      	add	sp, #8
 80027a6:	bd10      	pop	{r4, pc}
 80027a8:	20000270 	.word	0x20000270
 80027ac:	200042c8 	.word	0x200042c8

080027b0 <BSP_LCD_DrawPixel>:
  *(__IO uint32_t*) (hLtdcEval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <BSP_LCD_DrawPixel+0x1c>)
{
 80027b2:	b530      	push	{r4, r5, lr}
  *(__IO uint32_t*) (hLtdcEval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 80027b6:	2534      	movs	r5, #52	; 0x34
 80027b8:	4c05      	ldr	r4, [pc, #20]	; (80027d0 <BSP_LCD_DrawPixel+0x20>)
 80027ba:	fb05 4303 	mla	r3, r5, r3, r4
  *(__IO uint32_t*) (hLtdcEval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80027be:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	fb04 0101 	mla	r1, r4, r1, r0
 80027c6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80027ca:	bd30      	pop	{r4, r5, pc}
 80027cc:	20000270 	.word	0x20000270
 80027d0:	200042c8 	.word	0x200042c8

080027d4 <BSP_LCD_DisplayChar>:
{
 80027d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d8:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027da:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
 80027de:	f04f 0800 	mov.w	r8, #0
{
 80027e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027e6:	4827      	ldr	r0, [pc, #156]	; (8002884 <BSP_LCD_DisplayChar+0xb0>)
 80027e8:	210c      	movs	r1, #12
 80027ea:	f8d0 b040 	ldr.w	fp, [r0, #64]	; 0x40
 80027ee:	fb01 010b 	mla	r1, r1, fp, r0
 80027f2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80027f4:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 80027f8:	88cb      	ldrh	r3, [r1, #6]
 80027fa:	f10a 0607 	add.w	r6, sl, #7
 80027fe:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002800:	435d      	muls	r5, r3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002802:	10f6      	asrs	r6, r6, #3
 8002804:	9300      	str	r3, [sp, #0]
  offset =  8 *((width + 7)/8) -  width ;
 8002806:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 800280a:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
 800280e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8002812:	fa52 f380 	uxtab	r3, r2, r0
 8002816:	9303      	str	r3, [sp, #12]
 8002818:	9b02      	ldr	r3, [sp, #8]
 800281a:	eb03 0908 	add.w	r9, r3, r8
  for(i = 0; i < height; i++)
 800281e:	9b00      	ldr	r3, [sp, #0]
 8002820:	4598      	cmp	r8, r3
 8002822:	fa1f f989 	uxth.w	r9, r9
 8002826:	d302      	bcc.n	800282e <BSP_LCD_DisplayChar+0x5a>
}
 8002828:	b005      	add	sp, #20
 800282a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 800282e:	2e01      	cmp	r6, #1
 8002830:	782c      	ldrb	r4, [r5, #0]
 8002832:	d004      	beq.n	800283e <BSP_LCD_DisplayChar+0x6a>
 8002834:	2e02      	cmp	r6, #2
 8002836:	d109      	bne.n	800284c <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];      
 8002838:	882c      	ldrh	r4, [r5, #0]
 800283a:	ba64      	rev16	r4, r4
 800283c:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 800283e:	2700      	movs	r7, #0
 8002840:	45ba      	cmp	sl, r7
 8002842:	d80a      	bhi.n	800285a <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 8002844:	f108 0801 	add.w	r8, r8, #1
 8002848:	4435      	add	r5, r6
 800284a:	e7e5      	b.n	8002818 <BSP_LCD_DisplayChar+0x44>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800284c:	786a      	ldrb	r2, [r5, #1]
 800284e:	0424      	lsls	r4, r4, #16
 8002850:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8002854:	78aa      	ldrb	r2, [r5, #2]
 8002856:	4314      	orrs	r4, r2
 8002858:	e7f1      	b.n	800283e <BSP_LCD_DisplayChar+0x6a>
 800285a:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 800285c:	2201      	movs	r2, #1
 800285e:	19d8      	adds	r0, r3, r7
 8002860:	9b03      	ldr	r3, [sp, #12]
 8002862:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <BSP_LCD_DisplayChar+0xb0>)
 8002866:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8002868:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 800286a:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800286c:	4649      	mov	r1, r9
      if(line & (1 << (width- j + offset- 1))) 
 800286e:	4222      	tst	r2, r4
 8002870:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002874:	fb02 320b 	mla	r2, r2, fp, r3
 8002878:	bf14      	ite	ne
 800287a:	6c52      	ldrne	r2, [r2, #68]	; 0x44
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800287c:	6c92      	ldreq	r2, [r2, #72]	; 0x48
 800287e:	f7ff ff97 	bl	80027b0 <BSP_LCD_DrawPixel>
 8002882:	e7dd      	b.n	8002840 <BSP_LCD_DisplayChar+0x6c>
 8002884:	20000270 	.word	0x20000270

08002888 <BSP_LCD_DisplayStringAt>:
{
 8002888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800288c:	4607      	mov	r7, r0
 800288e:	460d      	mov	r5, r1
 8002890:	4614      	mov	r4, r2
 8002892:	1b10      	subs	r0, r2, r4
  while (*ptr++) size ++ ;
 8002894:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002898:	2900      	cmp	r1, #0
 800289a:	d1fa      	bne.n	8002892 <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 800289c:	4a21      	ldr	r2, [pc, #132]	; (8002924 <BSP_LCD_DisplayStringAt+0x9c>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800289e:	260c      	movs	r6, #12
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 80028a0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8002928 <BSP_LCD_DisplayStringAt+0xa0>
 80028a4:	f04f 0e34 	mov.w	lr, #52	; 0x34
 80028a8:	6c11      	ldr	r1, [r2, #64]	; 0x40
  switch (Mode)
 80028aa:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80028ac:	fb06 2601 	mla	r6, r6, r1, r2
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 80028b0:	fb0e 8e01 	mla	lr, lr, r1, r8
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80028b4:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
 80028b6:	f8de 2060 	ldr.w	r2, [lr, #96]	; 0x60
 80028ba:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80028be:	fbb2 f2fc 	udiv	r2, r2, ip
  switch (Mode)
 80028c2:	d01a      	beq.n	80028fa <BSP_LCD_DisplayStringAt+0x72>
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d01f      	beq.n	8002908 <BSP_LCD_DisplayStringAt+0x80>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80028c8:	b23b      	sxth	r3, r7
    ref_column = 1;
 80028ca:	46a1      	mov	r9, r4
 80028cc:	2b00      	cmp	r3, #0
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 80028ce:	f04f 0334 	mov.w	r3, #52	; 0x34
    ref_column = 1;
 80028d2:	bfd8      	it	le
 80028d4:	2701      	movle	r7, #1
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 80028d6:	fb03 8801 	mla	r8, r3, r1, r8
 80028da:	eba9 0304 	sub.w	r3, r9, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80028de:	88b0      	ldrh	r0, [r6, #4]
 80028e0:	f8d8 1060 	ldr.w	r1, [r8, #96]	; 0x60
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f819 2b01 	ldrb.w	r2, [r9], #1
 80028ea:	fb00 1313 	mls	r3, r0, r3, r1
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	4283      	cmp	r3, r0
 80028f2:	d300      	bcc.n	80028f6 <BSP_LCD_DisplayStringAt+0x6e>
 80028f4:	b96a      	cbnz	r2, 8002912 <BSP_LCD_DisplayStringAt+0x8a>
}
 80028f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80028fa:	1a10      	subs	r0, r2, r0
 80028fc:	fb0c f000 	mul.w	r0, ip, r0
 8002900:	eb07 0050 	add.w	r0, r7, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002904:	b287      	uxth	r7, r0
      break;
 8002906:	e7df      	b.n	80028c8 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002908:	1a10      	subs	r0, r2, r0
 800290a:	fb10 f00c 	smulbb	r0, r0, ip
 800290e:	1bc0      	subs	r0, r0, r7
 8002910:	e7f8      	b.n	8002904 <BSP_LCD_DisplayStringAt+0x7c>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002912:	4638      	mov	r0, r7
 8002914:	4629      	mov	r1, r5
 8002916:	f7ff ff5d 	bl	80027d4 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800291a:	88b0      	ldrh	r0, [r6, #4]
 800291c:	4438      	add	r0, r7
 800291e:	b287      	uxth	r7, r0
 8002920:	e7db      	b.n	80028da <BSP_LCD_DisplayStringAt+0x52>
 8002922:	bf00      	nop
 8002924:	20000270 	.word	0x20000270
 8002928:	200042c8 	.word	0x200042c8

0800292c <BSP_LCD_DisplayStringAtLine>:
  return DrawProp[ActiveLayer].pFont;
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <BSP_LCD_DisplayStringAtLine+0x24>)
{  
 800292e:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
 8002930:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002932:	240c      	movs	r4, #12
 8002934:	fb04 2303 	mla	r3, r4, r3, r2
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002938:	460a      	mov	r2, r1
}
 800293a:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002940:	88db      	ldrh	r3, [r3, #6]
 8002942:	fb13 f000 	smulbb	r0, r3, r0
 8002946:	2303      	movs	r3, #3
 8002948:	b281      	uxth	r1, r0
 800294a:	2000      	movs	r0, #0
 800294c:	f7ff bf9c 	b.w	8002888 <BSP_LCD_DisplayStringAt>
 8002950:	20000270 	.word	0x20000270

08002954 <BSP_LCD_FillRect>:
{
 8002954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002956:	4f0c      	ldr	r7, [pc, #48]	; (8002988 <BSP_LCD_FillRect+0x34>)
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 8002958:	2534      	movs	r5, #52	; 0x34
 800295a:	4c0c      	ldr	r4, [pc, #48]	; (800298c <BSP_LCD_FillRect+0x38>)
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800295c:	6c3e      	ldr	r6, [r7, #64]	; 0x40
  return hLtdcEval.LayerCfg[ActiveLayer].ImageWidth;
 800295e:	fb05 4506 	mla	r5, r5, r6, r4
 8002962:	6e2c      	ldr	r4, [r5, #96]	; 0x60
  x_address = (hLtdcEval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002964:	fb04 0001 	mla	r0, r4, r1, r0
 8002968:	6de9      	ldr	r1, [r5, #92]	; 0x5c
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800296a:	250c      	movs	r5, #12
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800296c:	1aa4      	subs	r4, r4, r2
 800296e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002972:	4630      	mov	r0, r6
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002974:	fb05 7506 	mla	r5, r5, r6, r7
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002978:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800297a:	9400      	str	r4, [sp, #0]
 800297c:	9501      	str	r5, [sp, #4]
 800297e:	f7ff fe51 	bl	8002624 <LL_FillBuffer>
}
 8002982:	b003      	add	sp, #12
 8002984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002986:	bf00      	nop
 8002988:	20000270 	.word	0x20000270
 800298c:	200042c8 	.word	0x200042c8

08002990 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <BSP_LCD_MspInit+0xac>)
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002992:	482b      	ldr	r0, [pc, #172]	; (8002a40 <BSP_LCD_MspInit+0xb0>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002996:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 800299a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
{
 800299e:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029a2:	2402      	movs	r4, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80029a4:	2600      	movs	r6, #0
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80029a6:	250e      	movs	r5, #14
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029a8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80029ac:	a905      	add	r1, sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029ae:	9200      	str	r2, [sp, #0]
 80029b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80029b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
 80029ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029bc:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80029c0:	9201      	str	r2, [sp, #4]
 80029c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
 80029cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ce:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80029d2:	9202      	str	r2, [sp, #8]
 80029d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80029d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
 80029de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80029e4:	9203      	str	r2, [sp, #12]
 80029e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80029e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80029f2:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	9304      	str	r3, [sp, #16]
 80029fa:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029fc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002a00:	e9cd 6407 	strd	r6, r4, [sp, #28]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a04:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a08:	f001 f980 	bl	8003d0c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002a10:	a905      	add	r1, sp, #20
 8002a12:	480c      	ldr	r0, [pc, #48]	; (8002a44 <BSP_LCD_MspInit+0xb4>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002a14:	9509      	str	r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a16:	e9cd 3405 	strd	r3, r4, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002a1a:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002a1e:	f001 f975 	bl	8003d0c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002a22:	23ff      	movs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002a24:	a905      	add	r1, sp, #20
 8002a26:	4808      	ldr	r0, [pc, #32]	; (8002a48 <BSP_LCD_MspInit+0xb8>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002a28:	9509      	str	r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a2a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002a2e:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002a32:	f001 f96b 	bl	8003d0c <HAL_GPIO_Init>
}
 8002a36:	b00a      	add	sp, #40	; 0x28
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40022400 	.word	0x40022400
 8002a48:	40022800 	.word	0x40022800

08002a4c <BSP_LCD_ClockConfig>:
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <BSP_LCD_ClockConfig+0x50>)
 8002a4e:	2082      	movs	r0, #130	; 0x82
{
 8002a50:	b510      	push	{r4, lr}
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002a52:	685b      	ldr	r3, [r3, #4]
{
 8002a54:	460c      	mov	r4, r1
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002a56:	4798      	blx	r3
 8002a58:	f640 0311 	movw	r3, #2065	; 0x811
 8002a5c:	4298      	cmp	r0, r3
 8002a5e:	4810      	ldr	r0, [pc, #64]	; (8002aa0 <BSP_LCD_ClockConfig+0x54>)
 8002a60:	d10d      	bne.n	8002a7e <BSP_LCD_ClockConfig+0x32>
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a62:	2308      	movs	r3, #8
    HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002a64:	305c      	adds	r0, #92	; 0x5c
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a66:	6003      	str	r3, [r0, #0]
    periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002a68:	23c0      	movs	r3, #192	; 0xc0
 8002a6a:	6143      	str	r3, [r0, #20]
    periph_clk_init_struct.PLLSAI.PLLSAIR = AMPIRE480272_FREQUENCY_DIVIDER;
 8002a6c:	2305      	movs	r3, #5
 8002a6e:	61c3      	str	r3, [r0, #28]
    periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a74:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002a7a:	f002 ba0d 	b.w	8004e98 <HAL_RCCEx_PeriphCLKConfig>
    if(*(uint32_t *)Params == LCD_MAX_PCLK)
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	b953      	cbnz	r3, 8002a98 <BSP_LCD_ClockConfig+0x4c>
      periph_clk_init_struct.PLLSAI.PLLSAIN = 151;
 8002a82:	2397      	movs	r3, #151	; 0x97
      periph_clk_init_struct.PLLSAI.PLLSAIN = 120;
 8002a84:	6703      	str	r3, [r0, #112]	; 0x70
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;    
 8002a86:	2308      	movs	r3, #8
 8002a88:	65c3      	str	r3, [r0, #92]	; 0x5c
    periph_clk_init_struct.PLLSAI.PLLSAIR = 3;    
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	6783      	str	r3, [r0, #120]	; 0x78
    periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <BSP_LCD_ClockConfig+0x58>)
 8002a96:	e7ee      	b.n	8002a76 <BSP_LCD_ClockConfig+0x2a>
      periph_clk_init_struct.PLLSAI.PLLSAIN = 120;
 8002a98:	2378      	movs	r3, #120	; 0x78
 8002a9a:	e7f3      	b.n	8002a84 <BSP_LCD_ClockConfig+0x38>
 8002a9c:	200000cc 	.word	0x200000cc
 8002aa0:	20000270 	.word	0x20000270
 8002aa4:	200002cc 	.word	0x200002cc

08002aa8 <BSP_LCD_InitEx>:
{    
 8002aa8:	b510      	push	{r4, lr}
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <BSP_LCD_InitEx+0xc8>)
  PCLK_profile = PclkConfig;
 8002aac:	4c31      	ldr	r4, [pc, #196]	; (8002b74 <BSP_LCD_InitEx+0xcc>)
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002aae:	685b      	ldr	r3, [r3, #4]
  PCLK_profile = PclkConfig;
 8002ab0:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002ab4:	2082      	movs	r0, #130	; 0x82
 8002ab6:	4798      	blx	r3
 8002ab8:	f640 0311 	movw	r3, #2065	; 0x811
 8002abc:	4298      	cmp	r0, r3
 8002abe:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <BSP_LCD_InitEx+0xd0>)
 8002ac0:	d13c      	bne.n	8002b3c <BSP_LCD_InitEx+0x94>
    hLtdcEval.Init.VerticalSync = (AMPIRE480272_VSYNC - 1);
 8002ac2:	2209      	movs	r2, #9
 8002ac4:	2128      	movs	r1, #40	; 0x28
    hLtdcEval.Init.AccumulatedVBP = (AMPIRE480272_VSYNC + AMPIRE480272_VBP - 1);  
 8002ac6:	202a      	movs	r0, #42	; 0x2a
    hLtdcEval.Init.AccumulatedActiveW = (AMPIRE480272_WIDTH + AMPIRE480272_HSYNC + AMPIRE480272_HBP - 1);
 8002ac8:	f240 1c1b 	movw	ip, #283	; 0x11b
    hLtdcEval.Init.TotalWidth = (AMPIRE480272_WIDTH + AMPIRE480272_HSYNC + AMPIRE480272_HBP + AMPIRE480272_HFP - 1);
 8002acc:	f240 1e1d 	movw	lr, #285	; 0x11d
    hLtdcEval.Init.VerticalSync = (AMPIRE480272_VSYNC - 1);
 8002ad0:	e9c3 1205 	strd	r1, r2, [r3, #20]
    hLtdcEval.Init.AccumulatedVBP = (AMPIRE480272_VSYNC + AMPIRE480272_VBP - 1);  
 8002ad4:	220b      	movs	r2, #11
 8002ad6:	e9c3 0207 	strd	r0, r2, [r3, #28]
    hLtdcEval.Init.AccumulatedActiveW = (AMPIRE480272_WIDTH + AMPIRE480272_HSYNC + AMPIRE480272_HBP - 1);
 8002ada:	f240 220a 	movw	r2, #522	; 0x20a
 8002ade:	e9c3 2c09 	strd	r2, ip, [r3, #36]	; 0x24
    hLtdcEval.Init.TotalWidth = (AMPIRE480272_WIDTH + AMPIRE480272_HSYNC + AMPIRE480272_HBP + AMPIRE480272_HFP - 1);
 8002ae2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8002ae6:	e9c3 2e0b 	strd	r2, lr, [r3, #44]	; 0x2c
    hLtdcEval.LayerCfg->ImageWidth  = AMPIRE480272_WIDTH;
 8002aea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002aee:	661a      	str	r2, [r3, #96]	; 0x60
    hLtdcEval.LayerCfg->ImageHeight = AMPIRE480272_HEIGHT;   
 8002af0:	f44f 7288 	mov.w	r2, #272	; 0x110
    hLtdcEval.LayerCfg->ImageHeight = AMPIRE640480_HEIGHT;
 8002af4:	665a      	str	r2, [r3, #100]	; 0x64
  hLtdcEval.Init.Backcolor.Blue = 0;
 8002af6:	2200      	movs	r2, #0
  BSP_LCD_ClockConfig(&hLtdcEval, &PCLK_profile);
 8002af8:	4920      	ldr	r1, [pc, #128]	; (8002b7c <BSP_LCD_InitEx+0xd4>)
  hLtdcEval.Init.Backcolor.Blue = 0;
 8002afa:	869a      	strh	r2, [r3, #52]	; 0x34
  hLtdcEval.Init.Backcolor.Green = 0;
 8002afc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BSP_LCD_ClockConfig(&hLtdcEval, &PCLK_profile);
 8002b00:	481d      	ldr	r0, [pc, #116]	; (8002b78 <BSP_LCD_InitEx+0xd0>)
  hLtdcEval.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002b02:	e9c3 2201 	strd	r2, r2, [r3, #4]
  hLtdcEval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b06:	e9c3 2203 	strd	r2, r2, [r3, #12]
  hLtdcEval.Instance = LTDC;
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <BSP_LCD_InitEx+0xd8>)
 8002b0c:	601a      	str	r2, [r3, #0]
  BSP_LCD_ClockConfig(&hLtdcEval, &PCLK_profile);
 8002b0e:	f7ff ff9d 	bl	8002a4c <BSP_LCD_ClockConfig>
  if(HAL_LTDC_GetState(&hLtdcEval) == HAL_LTDC_STATE_RESET)
 8002b12:	4819      	ldr	r0, [pc, #100]	; (8002b78 <BSP_LCD_InitEx+0xd0>)
 8002b14:	f001 fef7 	bl	8004906 <HAL_LTDC_GetState>
 8002b18:	4601      	mov	r1, r0
 8002b1a:	b910      	cbnz	r0, 8002b22 <BSP_LCD_InitEx+0x7a>
    BSP_LCD_MspInit(&hLtdcEval, NULL);
 8002b1c:	4816      	ldr	r0, [pc, #88]	; (8002b78 <BSP_LCD_InitEx+0xd0>)
 8002b1e:	f7ff ff37 	bl	8002990 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcEval);
 8002b22:	4815      	ldr	r0, [pc, #84]	; (8002b78 <BSP_LCD_InitEx+0xd0>)
 8002b24:	f001 fe5a 	bl	80047dc <HAL_LTDC_Init>
  BSP_SDRAM_Init();
 8002b28:	f000 f93e 	bl	8002da8 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8002b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b2e:	220c      	movs	r2, #12
}
 8002b30:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 8002b32:	fb02 4403 	mla	r4, r2, r3, r4
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <BSP_LCD_InitEx+0xdc>)
 8002b38:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8002b3a:	bd10      	pop	{r4, pc}
    hLtdcEval.Init.VerticalSync = (AMPIRE640480_VSYNC - 1);
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	211d      	movs	r1, #29
    hLtdcEval.Init.AccumulatedVBP = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);  
 8002b40:	208f      	movs	r0, #143	; 0x8f
    hLtdcEval.Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8002b42:	f240 2c02 	movw	ip, #514	; 0x202
    hLtdcEval.Init.TotalWidth = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1); 
 8002b46:	f44f 7e03 	mov.w	lr, #524	; 0x20c
    hLtdcEval.Init.VerticalSync = (AMPIRE640480_VSYNC - 1);
 8002b4a:	e9c3 1205 	strd	r1, r2, [r3, #20]
    hLtdcEval.Init.AccumulatedVBP = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);  
 8002b4e:	2222      	movs	r2, #34	; 0x22
 8002b50:	e9c3 0207 	strd	r0, r2, [r3, #28]
    hLtdcEval.Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8002b54:	f240 320f 	movw	r2, #783	; 0x30f
 8002b58:	e9c3 2c09 	strd	r2, ip, [r3, #36]	; 0x24
    hLtdcEval.Init.TotalWidth = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1); 
 8002b5c:	f240 321f 	movw	r2, #799	; 0x31f
 8002b60:	e9c3 2e0b 	strd	r2, lr, [r3, #44]	; 0x2c
    hLtdcEval.LayerCfg->ImageWidth  = AMPIRE640480_WIDTH;
 8002b64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002b68:	661a      	str	r2, [r3, #96]	; 0x60
    hLtdcEval.LayerCfg->ImageHeight = AMPIRE640480_HEIGHT;
 8002b6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b6e:	e7c1      	b.n	8002af4 <BSP_LCD_InitEx+0x4c>
 8002b70:	200000cc 	.word	0x200000cc
 8002b74:	20000270 	.word	0x20000270
 8002b78:	200042c8 	.word	0x200042c8
 8002b7c:	20000350 	.word	0x20000350
 8002b80:	40016800 	.word	0x40016800
 8002b84:	200000f4 	.word	0x200000f4

08002b88 <BSP_LCD_Init>:
  return (BSP_LCD_InitEx(LCD_MAX_PCLK));
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7ff bf8d 	b.w	8002aa8 <BSP_LCD_InitEx>
	...

08002b90 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002b94:	4c21      	ldr	r4, [pc, #132]	; (8002c1c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b96:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b98:	4d21      	ldr	r5, [pc, #132]	; (8002c20 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8002b9a:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b9e:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ba0:	4621      	mov	r1, r4
{
 8002ba2:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba8:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8002baa:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002bae:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002bb2:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bb6:	f002 fc1a 	bl	80053ee <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002bba:	4630      	mov	r0, r6
 8002bbc:	f000 f9a6 	bl	8002f0c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002bc0:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc8:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002bca:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002bce:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002bd2:	f002 fc0c 	bl	80053ee <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002bd6:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bd8:	4621      	mov	r1, r4
 8002bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bde:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002be0:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8002be4:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8002be6:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bea:	f002 fc00 	bl	80053ee <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002bee:	f44f 730c 	mov.w	r3, #560	; 0x230
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002bf8:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002bfa:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bfc:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8002bfe:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c00:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8002c04:	9b01      	ldr	r3, [sp, #4]
 8002c06:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c08:	f002 fbf1 	bl	80053ee <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	4628      	mov	r0, r5
}
 8002c10:	b003      	add	sp, #12
 8002c12:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002c16:	f002 bc01 	b.w	800541c <HAL_SDRAM_ProgramRefreshRate>
 8002c1a:	bf00      	nop
 8002c1c:	20000354 	.word	0x20000354
 8002c20:	20004370 	.word	0x20004370

08002c24 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c24:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <BSP_SDRAM_MspInit+0x160>)
 8002c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c28:	f042 0201 	orr.w	r2, r2, #1
{  
 8002c2c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8002c30:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8002c34:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002c36:	ac0e      	add	r4, sp, #56	; 0x38
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002c38:	4853      	ldr	r0, [pc, #332]	; (8002d88 <BSP_SDRAM_MspInit+0x164>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c3a:	f002 0201 	and.w	r2, r2, #1
 8002c3e:	9201      	str	r2, [sp, #4]
 8002c40:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8002c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c44:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c4c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002c50:	9202      	str	r2, [sp, #8]
 8002c52:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c56:	f042 0208 	orr.w	r2, r2, #8
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5e:	f002 0208 	and.w	r2, r2, #8
 8002c62:	9203      	str	r2, [sp, #12]
 8002c64:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c68:	f042 0210 	orr.w	r2, r2, #16
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c70:	f002 0210 	and.w	r2, r2, #16
 8002c74:	9204      	str	r2, [sp, #16]
 8002c76:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7a:	f042 0220 	orr.w	r2, r2, #32
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c82:	f002 0220 	and.w	r2, r2, #32
 8002c86:	9205      	str	r2, [sp, #20]
 8002c88:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
 8002c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c94:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002c98:	9206      	str	r2, [sp, #24]
 8002c9a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002caa:	9207      	str	r2, [sp, #28]
 8002cac:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002cb6:	2201      	movs	r2, #1
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	9308      	str	r3, [sp, #32]
 8002cc0:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002cc8:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002cca:	230c      	movs	r3, #12
 8002ccc:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002cce:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002cd2:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	f001 f818 	bl	8003d0c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002cdc:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	482a      	ldr	r0, [pc, #168]	; (8002d8c <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002ce4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ce6:	f001 f811 	bl	8003d0c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002cea:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002cee:	4621      	mov	r1, r4
 8002cf0:	4827      	ldr	r0, [pc, #156]	; (8002d90 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002cf2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002cf4:	f001 f80a 	bl	8003d0c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002cf8:	f248 1333 	movw	r3, #33075	; 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	4825      	ldr	r0, [pc, #148]	; (8002d94 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002d00:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d02:	f001 f803 	bl	8003d0c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002d06:	f64f 732c 	movw	r3, #65324	; 0xff2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	4822      	ldr	r0, [pc, #136]	; (8002d98 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002d0e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002d10:	f000 fffc 	bl	8003d0c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d14:	f240 63ff 	movw	r3, #1791	; 0x6ff
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8002d18:	4621      	mov	r1, r4
 8002d1a:	4820      	ldr	r0, [pc, #128]	; (8002d9c <BSP_SDRAM_MspInit+0x178>)
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002d1c:	2400      	movs	r4, #0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d1e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8002d20:	f000 fff4 	bl	8003d0c <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002d24:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <BSP_SDRAM_MspInit+0x17c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002d26:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002d28:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002d2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002d30:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002d32:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002d34:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002d36:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d3e:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002d42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d46:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002d4e:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d52:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d54:	e9c3 240e 	strd	r2, r4, [r3, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002d58:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <BSP_SDRAM_MspInit+0x180>)
 8002d5a:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002d5e:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002d60:	6335      	str	r5, [r6, #48]	; 0x30
 8002d62:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
 8002d64:	f000 fa2a 	bl	80031bc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002d68:	4628      	mov	r0, r5
 8002d6a:	f000 f9a9 	bl	80030c0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d6e:	4622      	mov	r2, r4
 8002d70:	210f      	movs	r1, #15
 8002d72:	2038      	movs	r0, #56	; 0x38
 8002d74:	f000 f8ee 	bl	8002f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d78:	2038      	movs	r0, #56	; 0x38
 8002d7a:	f000 f91d 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
}
 8002d7e:	b00e      	add	sp, #56	; 0x38
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40021400 	.word	0x40021400
 8002d94:	40021800 	.word	0x40021800
 8002d98:	40021c00 	.word	0x40021c00
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	20000354 	.word	0x20000354
 8002da4:	40026410 	.word	0x40026410

08002da8 <BSP_SDRAM_Init>:
{ 
 8002da8:	b570      	push	{r4, r5, r6, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8002dac:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002dae:	4c1b      	ldr	r4, [pc, #108]	; (8002e1c <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8002db0:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8002db2:	4d1b      	ldr	r5, [pc, #108]	; (8002e20 <BSP_SDRAM_Init+0x78>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002db4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002db8:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002dba:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002dbc:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002dbe:	2601      	movs	r6, #1
  Timing.RCDDelay             = 2;
 8002dc0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
 8002dc4:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
 8002dc8:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
 8002dcc:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002dd4:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002dd6:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002dda:	f44f 73c0 	mov.w	r3, #384	; 0x180
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002dde:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002de0:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de8:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002dec:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002dee:	e9c4 1601 	strd	r1, r6, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002df2:	f7ff ff17 	bl	8002c24 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002df6:	f105 0170 	add.w	r1, r5, #112	; 0x70
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	4c09      	ldr	r4, [pc, #36]	; (8002e24 <BSP_SDRAM_Init+0x7c>)
 8002dfe:	f002 fad6 	bl	80053ae <HAL_SDRAM_Init>
    sdramstatus = SDRAM_ERROR;
 8002e02:	2800      	cmp	r0, #0
 8002e04:	bf14      	ite	ne
 8002e06:	4630      	movne	r0, r6
 8002e08:	2000      	moveq	r0, #0
 8002e0a:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002e0c:	f240 6003 	movw	r0, #1539	; 0x603
 8002e10:	f7ff febe 	bl	8002b90 <BSP_SDRAM_Initialization_sequence>
}
 8002e14:	7820      	ldrb	r0, [r4, #0]
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	a0000140 	.word	0xa0000140
 8002e1c:	20004370 	.word	0x20004370
 8002e20:	20000354 	.word	0x20000354
 8002e24:	2000011c 	.word	0x2000011c

08002e28 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e28:	490f      	ldr	r1, [pc, #60]	; (8002e68 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e2a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e2c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <SystemInit+0x44>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002e42:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002e4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <SystemInit+0x48>)
 8002e52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e5c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e62:	608b      	str	r3, [r1, #8]
#endif
}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000ed00 	.word	0xe000ed00
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	24003010 	.word	0x24003010

08002e74 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e78:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e7a:	4e0e      	ldr	r6, [pc, #56]	; (8002eb4 <HAL_InitTick+0x3c>)
{
 8002e7c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e82:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <HAL_InitTick+0x40>)
 8002e84:	7830      	ldrb	r0, [r6, #0]
 8002e86:	fbb3 f3f0 	udiv	r3, r3, r0
 8002e8a:	6810      	ldr	r0, [r2, #0]
 8002e8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e90:	f000 f8a0 	bl	8002fd4 <HAL_SYSTICK_Config>
 8002e94:	4604      	mov	r4, r0
 8002e96:	b950      	cbnz	r0, 8002eae <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e98:	2d0f      	cmp	r5, #15
 8002e9a:	d808      	bhi.n	8002eae <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	f000 f856 	bl	8002f54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e7fc      	b.n	8002eac <HAL_InitTick+0x34>
 8002eb2:	bf00      	nop
 8002eb4:	20000124 	.word	0x20000124
 8002eb8:	20000120 	.word	0x20000120

08002ebc <HAL_Init>:
{
 8002ebc:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec0:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec8:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed2:	f000 f82d 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed6:	200f      	movs	r0, #15
 8002ed8:	f7ff ffce 	bl	8002e78 <HAL_InitTick>
  HAL_MspInit();
 8002edc:	f7ff ffca 	bl	8002e74 <HAL_MspInit>
}
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	bd08      	pop	{r3, pc}
 8002ee4:	40023c00 	.word	0x40023c00

08002ee8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ee8:	4a03      	ldr	r2, [pc, #12]	; (8002ef8 <HAL_IncTick+0x10>)
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_IncTick+0x14>)
 8002eec:	6811      	ldr	r1, [r2, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	440b      	add	r3, r1
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	200043a4 	.word	0x200043a4
 8002efc:	20000124 	.word	0x20000124

08002f00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f00:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <HAL_GetTick+0x8>)
 8002f02:	6818      	ldr	r0, [r3, #0]
}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	200043a4 	.word	0x200043a4

08002f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff fff6 	bl	8002f00 <HAL_GetTick>
 8002f14:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f16:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002f18:	bf1e      	ittt	ne
 8002f1a:	4b04      	ldrne	r3, [pc, #16]	; (8002f2c <HAL_Delay+0x20>)
 8002f1c:	781b      	ldrbne	r3, [r3, #0]
 8002f1e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f20:	f7ff ffee 	bl	8002f00 <HAL_GetTick>
 8002f24:	1b40      	subs	r0, r0, r5
 8002f26:	42a0      	cmp	r0, r4
 8002f28:	d3fa      	bcc.n	8002f20 <HAL_Delay+0x14>
  {
  }
}
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
 8002f2c:	20000124 	.word	0x20000124

08002f30 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f32:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f34:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002f4a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002f4c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f56:	b570      	push	{r4, r5, r6, lr}
 8002f58:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f5e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f62:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f68:	2d04      	cmp	r5, #4
 8002f6a:	bf28      	it	cs
 8002f6c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f74:	bf8c      	ite	hi
 8002f76:	3c03      	subhi	r4, #3
 8002f78:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	ea21 0303 	bic.w	r3, r1, r3
 8002f80:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f84:	fa06 f404 	lsl.w	r4, r6, r4
 8002f88:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	ea43 0304 	orr.w	r3, r3, r4
 8002f90:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f94:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002f96:	db06      	blt.n	8002fa6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002f9c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002fa0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	f000 000f 	and.w	r0, r0, #15
 8002faa:	4a02      	ldr	r2, [pc, #8]	; (8002fb4 <HAL_NVIC_SetPriority+0x60>)
 8002fac:	5413      	strb	r3, [r2, r0]
 8002fae:	e7f9      	b.n	8002fa4 <HAL_NVIC_SetPriority+0x50>
 8002fb0:	e000ed00 	.word	0xe000ed00
 8002fb4:	e000ed14 	.word	0xe000ed14

08002fb8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	db08      	blt.n	8002fce <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbc:	0942      	lsrs	r2, r0, #5
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f000 001f 	and.w	r0, r0, #31
 8002fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8002fc8:	4b01      	ldr	r3, [pc, #4]	; (8002fd0 <HAL_NVIC_EnableIRQ+0x18>)
 8002fca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100

08002fd4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd4:	3801      	subs	r0, #1
 8002fd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002fda:	d20a      	bcs.n	8002ff2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fde:	21f0      	movs	r1, #240	; 0xf0
 8002fe0:	4a06      	ldr	r2, [pc, #24]	; (8002ffc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe2:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002ff2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000e010 	.word	0xe000e010
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003000:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_MPU_Disable+0x18>)
 8003006:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800300e:	2200      	movs	r2, #0
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <HAL_MPU_Disable+0x1c>)
 8003012:	605a      	str	r2, [r3, #4]
}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000ed00 	.word	0xe000ed00
 800301c:	e000ed90 	.word	0xe000ed90

08003020 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003020:	4a06      	ldr	r2, [pc, #24]	; (800303c <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003022:	f040 0001 	orr.w	r0, r0, #1
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_MPU_Enable+0x20>)
 8003028:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800302a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003032:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003036:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00
 8003040:	e000ed90 	.word	0xe000ed90

08003044 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003044:	7843      	ldrb	r3, [r0, #1]
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <HAL_MPU_ConfigRegion+0x4c>)
{
 8003048:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800304a:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 800304c:	7801      	ldrb	r1, [r0, #0]
 800304e:	b1d9      	cbz	r1, 8003088 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003050:	6843      	ldr	r3, [r0, #4]
 8003052:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003054:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003056:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003058:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800305a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800305e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003060:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003062:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003066:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003068:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800306c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800306e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003072:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003074:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003078:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800307a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800307e:	7a01      	ldrb	r1, [r0, #8]
 8003080:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003084:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003086:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8003088:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800308a:	6111      	str	r1, [r2, #16]
}
 800308c:	e7fb      	b.n	8003086 <HAL_MPU_ConfigRegion+0x42>
 800308e:	bf00      	nop
 8003090:	e000ed90 	.word	0xe000ed90

08003094 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003094:	6803      	ldr	r3, [r0, #0]
 8003096:	2118      	movs	r1, #24
 8003098:	b2da      	uxtb	r2, r3
 800309a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800309e:	3a10      	subs	r2, #16
 80030a0:	f023 0303 	bic.w	r3, r3, #3
 80030a4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80030aa:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ac:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ae:	bf88      	it	hi
 80030b0:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030b2:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030b4:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80030b6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	08011316 	.word	0x08011316

080030c0 <HAL_DMA_Init>:
{
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff ff1c 	bl	8002f00 <HAL_GetTick>
 80030c8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80030ca:	2c00      	cmp	r4, #0
 80030cc:	d071      	beq.n	80031b2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80030ce:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80030d0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80030d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d6:	2302      	movs	r3, #2
 80030d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80030dc:	6813      	ldr	r3, [r2, #0]
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e4:	6821      	ldr	r1, [r4, #0]
 80030e6:	680b      	ldr	r3, [r1, #0]
 80030e8:	07d8      	lsls	r0, r3, #31
 80030ea:	d43c      	bmi.n	8003166 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80030ec:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030ee:	4d32      	ldr	r5, [pc, #200]	; (80031b8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	68e2      	ldr	r2, [r4, #12]
 80030fc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fe:	6922      	ldr	r2, [r4, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	6962      	ldr	r2, [r4, #20]
 8003104:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003106:	69e2      	ldr	r2, [r4, #28]
 8003108:	4303      	orrs	r3, r0
 800310a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800310c:	6a22      	ldr	r2, [r4, #32]
 800310e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003110:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003112:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003114:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003118:	bf02      	ittt	eq
 800311a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800311e:	4335      	orreq	r5, r6
 8003120:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003122:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8003124:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8003126:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003128:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800312c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003130:	d10b      	bne.n	800314a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8003132:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003134:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003136:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003138:	b13d      	cbz	r5, 800314a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800313a:	b9f8      	cbnz	r0, 800317c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800313c:	2a01      	cmp	r2, #1
 800313e:	d02d      	beq.n	800319c <HAL_DMA_Init+0xdc>
 8003140:	d301      	bcc.n	8003146 <HAL_DMA_Init+0x86>
 8003142:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003144:	d101      	bne.n	800314a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003146:	01ea      	lsls	r2, r5, #7
 8003148:	d42b      	bmi.n	80031a2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800314a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff ffa1 	bl	8003094 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003152:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003154:	233f      	movs	r3, #63	; 0x3f
 8003156:	4093      	lsls	r3, r2
 8003158:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800315c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003160:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003164:	e009      	b.n	800317a <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003166:	f7ff fecb 	bl	8002f00 <HAL_GetTick>
 800316a:	1b40      	subs	r0, r0, r5
 800316c:	2805      	cmp	r0, #5
 800316e:	d9b9      	bls.n	80030e4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003170:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003172:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003174:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003176:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800317a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800317c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003180:	d113      	bne.n	80031aa <HAL_DMA_Init+0xea>
    switch (tmp)
 8003182:	2a03      	cmp	r2, #3
 8003184:	d8e1      	bhi.n	800314a <HAL_DMA_Init+0x8a>
 8003186:	a001      	add	r0, pc, #4	; (adr r0, 800318c <HAL_DMA_Init+0xcc>)
 8003188:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800318c:	080031a3 	.word	0x080031a3
 8003190:	08003147 	.word	0x08003147
 8003194:	080031a3 	.word	0x080031a3
 8003198:	0800319d 	.word	0x0800319d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80031a0:	d1d3      	bne.n	800314a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a2:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80031a4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a6:	6563      	str	r3, [r4, #84]	; 0x54
 80031a8:	e7e5      	b.n	8003176 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80031aa:	2a02      	cmp	r2, #2
 80031ac:	d9f9      	bls.n	80031a2 <HAL_DMA_Init+0xe2>
 80031ae:	2a03      	cmp	r2, #3
 80031b0:	e7c8      	b.n	8003144 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80031b2:	2001      	movs	r0, #1
 80031b4:	e7e1      	b.n	800317a <HAL_DMA_Init+0xba>
 80031b6:	bf00      	nop
 80031b8:	f010803f 	.word	0xf010803f

080031bc <HAL_DMA_DeInit>:
{
 80031bc:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80031be:	4605      	mov	r5, r0
 80031c0:	b320      	cbz	r0, 800320c <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80031c2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80031c6:	b2e4      	uxtb	r4, r4
 80031c8:	2c02      	cmp	r4, #2
 80031ca:	d01d      	beq.n	8003208 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80031cc:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80031ce:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80031d8:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80031da:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80031dc:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80031de:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80031e0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80031e2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80031e4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e6:	f7ff ff55 	bl	8003094 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80031ec:	233f      	movs	r3, #63	; 0x3f
 80031ee:	4093      	lsls	r3, r2
 80031f0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f2:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80031f4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80031f8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80031fc:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8003200:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8003204:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
    return HAL_BUSY;
 8003208:	4620      	mov	r0, r4
 800320a:	e000      	b.n	800320e <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 800320c:	2001      	movs	r0, #1
}
 800320e:	bd38      	pop	{r3, r4, r5, pc}

08003210 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003210:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003212:	6804      	ldr	r4, [r0, #0]
 8003214:	9d04      	ldr	r5, [sp, #16]
 8003216:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003218:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800321c:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8003220:	4333      	orrs	r3, r6
 8003222:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003224:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003226:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800322c:	d130      	bne.n	8003290 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800322e:	6886      	ldr	r6, [r0, #8]
 8003230:	b11e      	cbz	r6, 800323a <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003232:	2e01      	cmp	r6, #1
 8003234:	d103      	bne.n	800323e <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003236:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800323a:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800323c:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800323e:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003240:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003244:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003248:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800324a:	d107      	bne.n	800325c <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 800324c:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 800324e:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003250:	02c9      	lsls	r1, r1, #11
 8003252:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8003256:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800325a:	e7ee      	b.n	800323a <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800325c:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800325e:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003262:	d10a      	bne.n	800327a <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8003264:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8003266:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003268:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800326a:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800326c:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003270:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8003274:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8003278:	e7df      	b.n	800323a <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 800327a:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 800327c:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800327e:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8003280:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003282:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8003286:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 800328a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800328e:	e7d4      	b.n	800323a <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003290:	60e1      	str	r1, [r4, #12]
}
 8003292:	e7d3      	b.n	800323c <DMA2D_SetConfig+0x2c>

08003294 <HAL_DMA2D_MspInit>:
}
 8003294:	4770      	bx	lr

08003296 <HAL_DMA2D_Init>:
{
 8003296:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8003298:	4604      	mov	r4, r0
 800329a:	b330      	cbz	r0, 80032ea <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800329c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80032a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032a4:	b91b      	cbnz	r3, 80032ae <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 80032a6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80032aa:	f7ff fff3 	bl	8003294 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80032ae:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032b0:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80032b2:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80032b4:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80032ba:	6813      	ldr	r3, [r2, #0]
 80032bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80032c0:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80032c2:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80032c4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80032c6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80032c8:	f023 0307 	bic.w	r3, r3, #7
 80032cc:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80032ce:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80032d0:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80032d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80032d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032dc:	430b      	orrs	r3, r1
 80032de:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032e0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80032e2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80032e8:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80032ea:	2001      	movs	r0, #1
 80032ec:	e7fc      	b.n	80032e8 <HAL_DMA2D_Init+0x52>

080032ee <HAL_DMA2D_Start>:
{
 80032ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80032f0:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
{
 80032f4:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 80032f6:	2c01      	cmp	r4, #1
 80032f8:	f04f 0402 	mov.w	r4, #2
 80032fc:	d00f      	beq.n	800331e <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032fe:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8003302:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003304:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8003306:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800330a:	9400      	str	r4, [sp, #0]
 800330c:	f7ff ff80 	bl	8003210 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8003310:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 8003312:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8003314:	6813      	ldr	r3, [r2, #0]
 8003316:	4333      	orrs	r3, r6
 8003318:	6013      	str	r3, [r2, #0]
}
 800331a:	b002      	add	sp, #8
 800331c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 800331e:	4620      	mov	r0, r4
 8003320:	e7fb      	b.n	800331a <HAL_DMA2D_Start+0x2c>

08003322 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8003322:	2300      	movs	r3, #0
{
 8003324:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8003326:	9301      	str	r3, [sp, #4]
{
 8003328:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800332a:	6803      	ldr	r3, [r0, #0]
{
 800332c:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	07db      	lsls	r3, r3, #31
 8003332:	d417      	bmi.n	8003364 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800333a:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800333c:	069e      	lsls	r6, r3, #26
 800333e:	d506      	bpl.n	800334e <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8003340:	f7ff fdde 	bl	8002f00 <HAL_GetTick>
 8003344:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	06d2      	lsls	r2, r2, #27
 800334c:	d543      	bpl.n	80033d6 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8003352:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003354:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003356:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8003358:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800335c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003360:	b002      	add	sp, #8
 8003362:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8003364:	f7ff fdcc 	bl	8002f00 <HAL_GetTick>
 8003368:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	0792      	lsls	r2, r2, #30
 8003370:	d4e0      	bmi.n	8003334 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003376:	9a01      	ldr	r2, [sp, #4]
 8003378:	f012 0f21 	tst.w	r2, #33	; 0x21
 800337c:	d017      	beq.n	80033ae <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800337e:	9a01      	ldr	r2, [sp, #4]
 8003380:	0695      	lsls	r5, r2, #26
 8003382:	d503      	bpl.n	800338c <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003384:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003386:	f042 0202 	orr.w	r2, r2, #2
 800338a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800338c:	9a01      	ldr	r2, [sp, #4]
 800338e:	07d0      	lsls	r0, r2, #31
 8003390:	d503      	bpl.n	800339a <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003392:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800339a:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800339c:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800339e:	2304      	movs	r3, #4
        return HAL_ERROR;
 80033a0:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80033a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80033a6:	2300      	movs	r3, #0
 80033a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80033ac:	e7d8      	b.n	8003360 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 80033ae:	1c69      	adds	r1, r5, #1
 80033b0:	d0dc      	beq.n	800336c <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80033b2:	f7ff fda5 	bl	8002f00 <HAL_GetTick>
 80033b6:	1b80      	subs	r0, r0, r6
 80033b8:	42a8      	cmp	r0, r5
 80033ba:	d801      	bhi.n	80033c0 <HAL_DMA2D_PollForTransfer+0x9e>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d1d4      	bne.n	800336a <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80033c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80033c2:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80033c4:	f043 0320 	orr.w	r3, r3, #32
 80033c8:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 80033ca:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80033cc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 80033d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 80033d4:	e7c4      	b.n	8003360 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80033da:	9a01      	ldr	r2, [sp, #4]
 80033dc:	f012 0f29 	tst.w	r2, #41	; 0x29
 80033e0:	d016      	beq.n	8003410 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80033e2:	9a01      	ldr	r2, [sp, #4]
 80033e4:	0716      	lsls	r6, r2, #28
 80033e6:	d503      	bpl.n	80033f0 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80033e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033ea:	f042 0204 	orr.w	r2, r2, #4
 80033ee:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80033f0:	9a01      	ldr	r2, [sp, #4]
 80033f2:	0695      	lsls	r5, r2, #26
 80033f4:	d503      	bpl.n	80033fe <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80033f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033f8:	f042 0202 	orr.w	r2, r2, #2
 80033fc:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80033fe:	9a01      	ldr	r2, [sp, #4]
 8003400:	07d0      	lsls	r0, r2, #31
 8003402:	d503      	bpl.n	800340c <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003404:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800340c:	2229      	movs	r2, #41	; 0x29
 800340e:	e7c5      	b.n	800339c <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 8003410:	1c69      	adds	r1, r5, #1
 8003412:	d099      	beq.n	8003348 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003414:	f7ff fd74 	bl	8002f00 <HAL_GetTick>
 8003418:	1b80      	subs	r0, r0, r6
 800341a:	42a8      	cmp	r0, r5
 800341c:	d8d0      	bhi.n	80033c0 <HAL_DMA2D_PollForTransfer+0x9e>
 800341e:	2d00      	cmp	r5, #0
 8003420:	d191      	bne.n	8003346 <HAL_DMA2D_PollForTransfer+0x24>
 8003422:	e7cd      	b.n	80033c0 <HAL_DMA2D_PollForTransfer+0x9e>

08003424 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8003424:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003428:	2b01      	cmp	r3, #1
 800342a:	f04f 0302 	mov.w	r3, #2
{
 800342e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8003430:	d037      	beq.n	80034a2 <HAL_DMA2D_ConfigLayer+0x7e>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003432:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 8003434:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003436:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800343a:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 800343c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8003440:	4f1c      	ldr	r7, [pc, #112]	; (80034b4 <HAL_DMA2D_ConfigLayer+0x90>)
 8003442:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003444:	e9d3 5207 	ldrd	r5, r2, [r3, #28]
 8003448:	6803      	ldr	r3, [r0, #0]
 800344a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800344e:	3d09      	subs	r5, #9
 8003450:	2d01      	cmp	r5, #1
 8003452:	d80f      	bhi.n	8003474 <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003454:	f004 4c7f 	and.w	ip, r4, #4278190080	; 0xff000000
 8003458:	ea4c 0202 	orr.w	r2, ip, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800345c:	b969      	cbnz	r1, 800347a <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800345e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003460:	4039      	ands	r1, r7
 8003462:	430a      	orrs	r2, r1
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003466:	6982      	ldr	r2, [r0, #24]
 8003468:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800346a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800346c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
 8003472:	e010      	b.n	8003496 <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003474:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003478:	b1a9      	cbz	r1, 80034a6 <HAL_DMA2D_ConfigLayer+0x82>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800347a:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800347c:	4406      	add	r6, r0
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800347e:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003480:	ea01 0107 	and.w	r1, r1, r7
 8003484:	ea42 0201 	orr.w	r2, r2, r1
 8003488:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800348a:	69b2      	ldr	r2, [r6, #24]
 800348c:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800348e:	d802      	bhi.n	8003496 <HAL_DMA2D_ConfigLayer+0x72>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003490:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8003494:	621c      	str	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003496:	2301      	movs	r3, #1
 8003498:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 800349c:	2300      	movs	r3, #0
 800349e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80034a2:	4618      	mov	r0, r3
}
 80034a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80034a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034a8:	4039      	ands	r1, r7
 80034aa:	430a      	orrs	r2, r1
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80034ae:	6982      	ldr	r2, [r0, #24]
 80034b0:	619a      	str	r2, [r3, #24]
 80034b2:	e7f0      	b.n	8003496 <HAL_DMA2D_ConfigLayer+0x72>
 80034b4:	00fcfff0 	.word	0x00fcfff0

080034b8 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 80034b8:	2300      	movs	r3, #0
{
 80034ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80034bc:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80034c0:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80034c2:	6803      	ldr	r3, [r0, #0]
{
 80034c4:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034c6:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80034c8:	591a      	ldr	r2, [r3, r4]
 80034ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034ce:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 80034d0:	591b      	ldr	r3, [r3, r4]
 80034d2:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034d4:	f7ff fd1a 	bl	8002f0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	9a01      	ldr	r2, [sp, #4]
 80034dc:	511a      	str	r2, [r3, r4]
}
 80034de:	b003      	add	sp, #12
 80034e0:	bd30      	pop	{r4, r5, pc}
	...

080034e4 <ETH_MACDMAConfig>:
{
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80034e8:	b129      	cbz	r1, 80034f6 <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 80034ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f2:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80034f6:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 80034f8:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80034fa:	2b00      	cmp	r3, #0
  tmpreg = (heth->Instance)->MACCR;
 80034fc:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80034fe:	bf0c      	ite	eq
 8003500:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8003504:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 8003506:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 800350a:	4303      	orrs	r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800350c:	482d      	ldr	r0, [pc, #180]	; (80035c4 <ETH_MACDMAConfig+0xe0>)
 800350e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003512:	4028      	ands	r0, r5
 8003514:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003516:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003518:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800351a:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800351c:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800351e:	f7ff fcf5 	bl	8002f0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003522:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003524:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003526:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8003528:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800352a:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800352c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800352e:	f7ff fced 	bl	8002f0c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003532:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003534:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8003536:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003538:	2500      	movs	r5, #0
 800353a:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800353c:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800353e:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003540:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8003544:	0412      	lsls	r2, r2, #16
 8003546:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800354c:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800354e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003550:	f7ff fcdc 	bl	8002f0c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003554:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003556:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8003558:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800355a:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800355c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800355e:	f7ff fcd5 	bl	8002f0c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003562:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003564:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8003568:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800356a:	f241 0518 	movw	r5, #4120	; 0x1018
 800356e:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003570:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003572:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8003576:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800357a:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 800357c:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800357e:	f7ff fcc5 	bl	8002f0c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003582:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003584:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003586:	4a11      	ldr	r2, [pc, #68]	; (80035cc <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->DMAOMR = tmpreg;
 8003588:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800358a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358e:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8003590:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003592:	f7ff fcbb 	bl	8002f0c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 800359c:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800359e:	69a3      	ldr	r3, [r4, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <ETH_MACDMAConfig+0xd0>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80035a4:	f241 011c 	movw	r1, #4124	; 0x101c
 80035a8:	5853      	ldr	r3, [r2, r1]
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b2:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80035b4:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80035b6:	4a06      	ldr	r2, [pc, #24]	; (80035d0 <ETH_MACDMAConfig+0xec>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80035b8:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80035ba:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80035bc:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <ETH_MACDMAConfig+0xf0>)
 80035c0:	601a      	str	r2, [r3, #0]
}
 80035c2:	bd70      	pop	{r4, r5, r6, pc}
 80035c4:	ff20810f 	.word	0xff20810f
 80035c8:	f8de3f23 	.word	0xf8de3f23
 80035cc:	02c12080 	.word	0x02c12080
 80035d0:	40028040 	.word	0x40028040
 80035d4:	40028044 	.word	0x40028044

080035d8 <HAL_ETH_DMATxDescListInit>:
{
 80035d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80035dc:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80035e0:	2c01      	cmp	r4, #1
 80035e2:	f04f 0402 	mov.w	r4, #2
 80035e6:	d031      	beq.n	800364c <HAL_ETH_DMATxDescListInit+0x74>
 80035e8:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80035ea:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80035ee:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  for(i=0; i < TxBuffCount; i++)
 80035f2:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 80035f4:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80035f8:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 80035fc:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 80035fe:	f103 3eff 	add.w	lr, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 8003602:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8003604:	429d      	cmp	r5, r3
 8003606:	d10c      	bne.n	8003622 <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003608:	6802      	ldr	r2, [r0, #0]
 800360a:	f241 0310 	movw	r3, #4112	; 0x1010
 800360e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8003610:	2301      	movs	r3, #1
 8003612:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003616:	2300      	movs	r3, #0
 8003618:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800361c:	4618      	mov	r0, r3
}
 800361e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003622:	fb0c 2605 	mla	r6, ip, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003626:	6027      	str	r7, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003628:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800362a:	69c6      	ldr	r6, [r0, #28]
 800362c:	b91e      	cbnz	r6, 8003636 <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800362e:	6826      	ldr	r6, [r4, #0]
 8003630:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8003634:	6026      	str	r6, [r4, #0]
 8003636:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800363a:	45ae      	cmp	lr, r5
 800363c:	bf94      	ite	ls
 800363e:	4688      	movls	r8, r1
 8003640:	46b0      	movhi	r8, r6
 8003642:	3501      	adds	r5, #1
 8003644:	f8c4 800c 	str.w	r8, [r4, #12]
 8003648:	4634      	mov	r4, r6
 800364a:	e7db      	b.n	8003604 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 800364c:	4620      	mov	r0, r4
 800364e:	e7e6      	b.n	800361e <HAL_ETH_DMATxDescListInit+0x46>

08003650 <HAL_ETH_DMARxDescListInit>:
{
 8003650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 8003654:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8003658:	2c01      	cmp	r4, #1
 800365a:	f04f 0402 	mov.w	r4, #2
 800365e:	d02f      	beq.n	80036c0 <HAL_ETH_DMARxDescListInit+0x70>
 8003660:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8003662:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003666:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  for(i=0; i < RxBuffCount; i++)
 800366a:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800366c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003670:	f244 5cf4 	movw	ip, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 8003674:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003676:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800367a:	f103 38ff 	add.w	r8, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 800367e:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8003680:	42ab      	cmp	r3, r5
 8003682:	d10c      	bne.n	800369e <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003684:	6802      	ldr	r2, [r0, #0]
 8003686:	f241 030c 	movw	r3, #4108	; 0x100c
 800368a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800368c:	2301      	movs	r3, #1
 800368e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003692:	2300      	movs	r3, #0
 8003694:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8003698:	4618      	mov	r0, r3
}
 800369a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800369e:	fb0e 2605 	mla	r6, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80036a2:	6027      	str	r7, [r4, #0]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80036a4:	60a6      	str	r6, [r4, #8]
 80036a6:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80036aa:	f8c4 c004 	str.w	ip, [r4, #4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80036ae:	45a8      	cmp	r8, r5
 80036b0:	bf94      	ite	ls
 80036b2:	4689      	movls	r9, r1
 80036b4:	46b1      	movhi	r9, r6
 80036b6:	3501      	adds	r5, #1
 80036b8:	f8c4 900c 	str.w	r9, [r4, #12]
 80036bc:	4634      	mov	r4, r6
 80036be:	e7df      	b.n	8003680 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 80036c0:	4620      	mov	r0, r4
 80036c2:	e7ea      	b.n	800369a <HAL_ETH_DMARxDescListInit+0x4a>

080036c4 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80036c4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	f04f 0302 	mov.w	r3, #2
{
 80036ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80036d0:	d066      	beq.n	80037a0 <HAL_ETH_TransmitFrame+0xdc>
 80036d2:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80036d4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80036d8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 80036dc:	b929      	cbnz	r1, 80036ea <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 80036de:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80036e2:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80036e6:	4610      	mov	r0, r2
}
 80036e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80036ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036ec:	681c      	ldr	r4, [r3, #0]
 80036ee:	2c00      	cmp	r4, #0
 80036f0:	da06      	bge.n	8003700 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80036f2:	2312      	movs	r3, #18
 80036f4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80036f8:	2300      	movs	r3, #0
 80036fa:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80036fe:	e7f2      	b.n	80036e6 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003700:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8003704:	42a1      	cmp	r1, r4
 8003706:	d92c      	bls.n	8003762 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003708:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800370c:	fb04 1412 	mls	r4, r4, r2, r1
 8003710:	b32c      	cbz	r4, 800375e <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8003712:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8003714:	4c23      	ldr	r4, [pc, #140]	; (80037a4 <HAL_ETH_TransmitFrame+0xe0>)
 8003716:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800371a:	f240 57f4 	movw	r7, #1524	; 0x5f4
      if (i == (bufcount-1))
 800371e:	1e56      	subs	r6, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8003720:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003724:	2400      	movs	r4, #0
 8003726:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800372a:	681d      	ldr	r5, [r3, #0]
 800372c:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8003730:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8003732:	b91c      	cbnz	r4, 800373c <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003734:	681d      	ldr	r5, [r3, #0]
 8003736:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800373a:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 800373c:	42a6      	cmp	r6, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800373e:	605f      	str	r7, [r3, #4]
      if (i == (bufcount-1))
 8003740:	d104      	bne.n	800374c <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003742:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003744:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003746:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800374a:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800374c:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 800374e:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003750:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8003754:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003756:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003758:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800375a:	d1e6      	bne.n	800372a <HAL_ETH_TransmitFrame+0x66>
 800375c:	e00d      	b.n	800377a <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 800375e:	2a01      	cmp	r2, #1
 8003760:	d1d8      	bne.n	8003714 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003762:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003764:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003768:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800376c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800376e:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003776:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800377c:	f241 0214 	movw	r2, #4116	; 0x1014
 8003780:	6803      	ldr	r3, [r0, #0]
 8003782:	5899      	ldr	r1, [r3, r2]
 8003784:	0749      	lsls	r1, r1, #29
 8003786:	d505      	bpl.n	8003794 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003788:	2104      	movs	r1, #4
 800378a:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 800378c:	f241 0204 	movw	r2, #4100	; 0x1004
 8003790:	2100      	movs	r1, #0
 8003792:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8003794:	2301      	movs	r3, #1
 8003796:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800379a:	2300      	movs	r3, #0
 800379c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80037a0:	4618      	mov	r0, r3
 80037a2:	e7a1      	b.n	80036e8 <HAL_ETH_TransmitFrame+0x24>
 80037a4:	fffffa0c 	.word	0xfffffa0c

080037a8 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 80037a8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f04f 0302 	mov.w	r3, #2
{
 80037b2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 80037b4:	d023      	beq.n	80037fe <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 80037b6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80037ba:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80037bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 80037be:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	db27      	blt.n	8003818 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80037d0:	d017      	beq.n	8003802 <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 80037d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80037d4:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 80037d6:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1)
 80037d8:	42a2      	cmp	r2, r4
      (heth->RxFrameInfos).SegCount++;
 80037da:	6382      	str	r2, [r0, #56]	; 0x38
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80037dc:	bf08      	it	eq
 80037de:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80037e6:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 80037e8:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80037ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80037ec:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80037ee:	6281      	str	r1, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80037f0:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80037f8:	2300      	movs	r3, #0
 80037fa:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80037fe:	4618      	mov	r0, r3
 8003800:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003802:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003804:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003806:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8003808:	bf55      	itete	pl
 800380a:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount = 1;
 800380c:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 800380e:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003810:	e9c0 320c 	strdmi	r3, r2, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8003814:	bf58      	it	pl
 8003816:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8003818:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800381a:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 800381c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003820:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8003824:	e7eb      	b.n	80037fe <HAL_ETH_GetReceivedFrame+0x56>

08003826 <HAL_ETH_ReadPHYRegister>:
{
 8003826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003828:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 800382c:	4605      	mov	r5, r0
 800382e:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003830:	2b82      	cmp	r3, #130	; 0x82
 8003832:	d030      	beq.n	8003896 <HAL_ETH_ReadPHYRegister+0x70>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003834:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003836:	018c      	lsls	r4, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003838:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800383c:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8003840:	6803      	ldr	r3, [r0, #0]
 8003842:	f044 0401 	orr.w	r4, r4, #1
 8003846:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003848:	f000 001c 	and.w	r0, r0, #28
 800384c:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800384e:	8a2c      	ldrh	r4, [r5, #16]
 8003850:	02e4      	lsls	r4, r4, #11
 8003852:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003854:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8003856:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8003858:	f7ff fb52 	bl	8002f00 <HAL_GetTick>
 800385c:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800385e:	f014 0001 	ands.w	r0, r4, #1
 8003862:	d107      	bne.n	8003874 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	b29b      	uxth	r3, r3
 800386a:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 800386c:	2301      	movs	r3, #1
 800386e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8003872:	e00c      	b.n	800388e <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003874:	f7ff fb44 	bl	8002f00 <HAL_GetTick>
 8003878:	1bc0      	subs	r0, r0, r7
 800387a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800387e:	d307      	bcc.n	8003890 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8003880:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8003882:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8003884:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8003888:	2300      	movs	r3, #0
 800388a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800388e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	691c      	ldr	r4, [r3, #16]
 8003894:	e7e3      	b.n	800385e <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8003896:	2002      	movs	r0, #2
 8003898:	e7f9      	b.n	800388e <HAL_ETH_ReadPHYRegister+0x68>

0800389a <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800389a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800389e:	2b42      	cmp	r3, #66	; 0x42
{
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80038a4:	d02e      	beq.n	8003904 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80038a6:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80038a8:	018c      	lsls	r4, r1, #6
 80038aa:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80038ac:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80038b0:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 80038b4:	6803      	ldr	r3, [r0, #0]
 80038b6:	f044 0403 	orr.w	r4, r4, #3
 80038ba:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80038bc:	f000 001c 	and.w	r0, r0, #28
 80038c0:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80038c2:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80038c4:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80038c6:	02e4      	lsls	r4, r4, #11
 80038c8:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80038ca:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 80038cc:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80038ce:	f7ff fb17 	bl	8002f00 <HAL_GetTick>
 80038d2:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038d4:	f014 0001 	ands.w	r0, r4, #1
 80038d8:	d103      	bne.n	80038e2 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 80038da:	2301      	movs	r3, #1
 80038dc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80038e0:	e00c      	b.n	80038fc <HAL_ETH_WritePHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80038e2:	f7ff fb0d 	bl	8002f00 <HAL_GetTick>
 80038e6:	1b80      	subs	r0, r0, r6
 80038e8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80038ec:	d307      	bcc.n	80038fe <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 80038ee:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80038f0:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80038f2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80038f6:	2300      	movs	r3, #0
 80038f8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	691c      	ldr	r4, [r3, #16]
 8003902:	e7e7      	b.n	80038d4 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8003904:	2002      	movs	r0, #2
 8003906:	e7f9      	b.n	80038fc <HAL_ETH_WritePHYRegister+0x62>

08003908 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8003908:	2300      	movs	r3, #0
{
 800390a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 800390c:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 800390e:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8003910:	2800      	cmp	r0, #0
 8003912:	f000 80dc 	beq.w	8003ace <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8003916:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800391a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800391e:	b91b      	cbnz	r3, 8003928 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8003920:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8003924:	f7fc ffce 	bl	80008c4 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003928:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_ETH_Init+0x1cc>)
 800392a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800393c:	4b66      	ldr	r3, [pc, #408]	; (8003ad8 <HAL_ETH_Init+0x1d0>)
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003944:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	6a21      	ldr	r1, [r4, #32]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800395c:	f7ff fad0 	bl	8002f00 <HAL_GetTick>
 8003960:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	07d0      	lsls	r0, r2, #31
 800396c:	d41d      	bmi.n	80039aa <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 800396e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8003970:	f001 fa8c 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003974:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_ETH_Init+0x1d4>)
 8003976:	4a5a      	ldr	r2, [pc, #360]	; (8003ae0 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003978:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800397c:	4403      	add	r3, r0
 800397e:	4293      	cmp	r3, r2
 8003980:	d822      	bhi.n	80039c8 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003982:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003986:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003988:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800398c:	2100      	movs	r1, #0
 800398e:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003990:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003992:	f7ff ff82 	bl	800389a <HAL_ETH_WritePHYRegister>
 8003996:	4605      	mov	r5, r0
 8003998:	b368      	cbz	r0, 80039f6 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 800399a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 800399c:	2101      	movs	r1, #1
 800399e:	4620      	mov	r0, r4
 80039a0:	f7ff fda0 	bl	80034e4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80039a4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80039a8:	e00b      	b.n	80039c2 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80039aa:	f7ff faa9 	bl	8002f00 <HAL_GetTick>
 80039ae:	1b40      	subs	r0, r0, r5
 80039b0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80039b4:	d9d5      	bls.n	8003962 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80039b6:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80039b8:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80039ba:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80039be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80039c2:	4628      	mov	r0, r5
 80039c4:	b003      	add	sp, #12
 80039c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80039c8:	4b46      	ldr	r3, [pc, #280]	; (8003ae4 <HAL_ETH_Init+0x1dc>)
 80039ca:	4a47      	ldr	r2, [pc, #284]	; (8003ae8 <HAL_ETH_Init+0x1e0>)
 80039cc:	4403      	add	r3, r0
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d802      	bhi.n	80039d8 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80039d2:	f045 050c 	orr.w	r5, r5, #12
 80039d6:	e7d6      	b.n	8003986 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80039d8:	4b44      	ldr	r3, [pc, #272]	; (8003aec <HAL_ETH_Init+0x1e4>)
 80039da:	4a45      	ldr	r2, [pc, #276]	; (8003af0 <HAL_ETH_Init+0x1e8>)
 80039dc:	4403      	add	r3, r0
 80039de:	4293      	cmp	r3, r2
 80039e0:	d9d1      	bls.n	8003986 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80039e2:	4b44      	ldr	r3, [pc, #272]	; (8003af4 <HAL_ETH_Init+0x1ec>)
 80039e4:	4a44      	ldr	r2, [pc, #272]	; (8003af8 <HAL_ETH_Init+0x1f0>)
 80039e6:	4403      	add	r3, r0
 80039e8:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80039ea:	bf94      	ite	ls
 80039ec:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80039f0:	f045 0510 	orrhi.w	r5, r5, #16
 80039f4:	e7c7      	b.n	8003986 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 80039f6:	20ff      	movs	r0, #255	; 0xff
 80039f8:	f7ff fa88 	bl	8002f0c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d053      	beq.n	8003aaa <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8003a02:	f7ff fa7d 	bl	8002f00 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003a06:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003a0a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003a0c:	466a      	mov	r2, sp
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7ff ff08 	bl	8003826 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003a16:	f7ff fa73 	bl	8002f00 <HAL_GetTick>
 8003a1a:	1b80      	subs	r0, r0, r6
 8003a1c:	42b8      	cmp	r0, r7
 8003a1e:	d90b      	bls.n	8003a38 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8003a20:	2101      	movs	r1, #1
 8003a22:	4620      	mov	r0, r4
 8003a24:	f7ff fd5e 	bl	80034e4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8003a28:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8003a2a:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8003a2c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8003a30:	2300      	movs	r3, #0
 8003a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8003a36:	e7c4      	b.n	80039c2 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003a38:	9b00      	ldr	r3, [sp, #0]
 8003a3a:	0759      	lsls	r1, r3, #29
 8003a3c:	d5e6      	bpl.n	8003a0c <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a42:	2100      	movs	r1, #0
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7ff ff28 	bl	800389a <HAL_ETH_WritePHYRegister>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d1a5      	bne.n	800399a <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8003a4e:	f7ff fa57 	bl	8002f00 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003a52:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003a56:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003a58:	466a      	mov	r2, sp
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f7ff fee2 	bl	8003826 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003a62:	f7ff fa4d 	bl	8002f00 <HAL_GetTick>
 8003a66:	1b80      	subs	r0, r0, r6
 8003a68:	42b8      	cmp	r0, r7
 8003a6a:	d8d9      	bhi.n	8003a20 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003a6c:	9b00      	ldr	r3, [sp, #0]
 8003a6e:	069a      	lsls	r2, r3, #26
 8003a70:	d5f2      	bpl.n	8003a58 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003a72:	466a      	mov	r2, sp
 8003a74:	2110      	movs	r1, #16
 8003a76:	4620      	mov	r0, r4
 8003a78:	f7ff fed5 	bl	8003826 <HAL_ETH_ReadPHYRegister>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d18c      	bne.n	800399a <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003a80:	9b00      	ldr	r3, [sp, #0]
 8003a82:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003a86:	bf18      	it	ne
 8003a88:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003a8c:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003a8e:	bf4c      	ite	mi
 8003a90:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8003a92:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003a96:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8003a98:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7ff fd21 	bl	80034e4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8003aa8:	e78b      	b.n	80039c2 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003aaa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003aae:	4629      	mov	r1, r5
 8003ab0:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003ab2:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003ab4:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	f7ff feee 	bl	800389a <HAL_ETH_WritePHYRegister>
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	f47f af6b 	bne.w	800399a <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8003ac4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003ac8:	f7ff fa20 	bl	8002f0c <HAL_Delay>
 8003acc:	e7e5      	b.n	8003a9a <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8003ace:	2501      	movs	r5, #1
 8003ad0:	e777      	b.n	80039c2 <HAL_ETH_Init+0xba>
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	feced300 	.word	0xfeced300
 8003ae0:	00e4e1bf 	.word	0x00e4e1bf
 8003ae4:	fde9f140 	.word	0xfde9f140
 8003ae8:	017d783f 	.word	0x017d783f
 8003aec:	fc6c7900 	.word	0xfc6c7900
 8003af0:	026259ff 	.word	0x026259ff
 8003af4:	fa0a1f00 	.word	0xfa0a1f00
 8003af8:	02faf07f 	.word	0x02faf07f

08003afc <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8003afc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003b00:	2b01      	cmp	r3, #1
{  
 8003b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b04:	4605      	mov	r5, r0
 8003b06:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8003b0a:	d033      	beq.n	8003b74 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8003b0c:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003b0e:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8003b10:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8003b14:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8003b16:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003b18:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b1a:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8003b1c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003b20:	f042 0208 	orr.w	r2, r2, #8
 8003b24:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b2a:	f7ff f9ef 	bl	8002f0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003b2e:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b30:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8003b32:	682b      	ldr	r3, [r5, #0]
 8003b34:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8003b36:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	f042 0204 	orr.w	r2, r2, #4
 8003b3e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b44:	f7ff f9e2 	bl	8002f0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003b48:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8003b4a:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8003b4c:	9a00      	ldr	r2, [sp, #0]
 8003b4e:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8003b50:	f7ff fcb2 	bl	80034b8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003b54:	682a      	ldr	r2, [r5, #0]
 8003b56:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8003b5a:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003b5c:	58d1      	ldr	r1, [r2, r3]
 8003b5e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8003b62:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003b64:	58d1      	ldr	r1, [r2, r3]
 8003b66:	f041 0102 	orr.w	r1, r1, #2
 8003b6a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8003b6c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003b70:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8003b74:	b002      	add	sp, #8
 8003b76:	bd70      	pop	{r4, r5, r6, pc}

08003b78 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8003b78:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003b7c:	2b01      	cmp	r3, #1
{  
 8003b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b80:	4605      	mov	r5, r0
 8003b82:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8003b86:	d033      	beq.n	8003bf0 <HAL_ETH_Stop+0x78>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003b88:	682b      	ldr	r3, [r5, #0]
 8003b8a:	f241 0218 	movw	r2, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 8003b8e:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8003b92:	2601      	movs	r6, #1
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003b94:	5899      	ldr	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 8003b96:	2400      	movs	r4, #0
  __HAL_LOCK(heth);
 8003b98:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b9c:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003b9e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003ba2:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003ba4:	5899      	ldr	r1, [r3, r2]
 8003ba6:	f021 0102 	bic.w	r1, r1, #2
 8003baa:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 8003bac:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	f022 0204 	bic.w	r2, r2, #4
 8003bb4:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bba:	f7ff f9a7 	bl	8002f0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003bbe:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8003bc0:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8003bc2:	9a01      	ldr	r2, [sp, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8003bc6:	f7ff fc77 	bl	80034b8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003bca:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t tmpreg = 0;
 8003bcc:	9400      	str	r4, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bce:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	f022 0208 	bic.w	r2, r2, #8
 8003bd6:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bdc:	f7ff f996 	bl	8002f0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003be0:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
 8003be2:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8003be8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003bec:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}

08003bf4 <HAL_ETH_ConfigMAC>:
{
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8003bf6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d071      	beq.n	8003ce8 <HAL_ETH_ConfigMAC+0xf4>
 8003c04:	2601      	movs	r6, #1
  heth->State= HAL_ETH_STATE_BUSY;
 8003c06:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
 8003c0a:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(heth);
 8003c0c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
 8003c10:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (macconf != NULL)
 8003c14:	2900      	cmp	r1, #0
 8003c16:	d068      	beq.n	8003cea <HAL_ETH_ConfigMAC+0xf6>
    tmpreg = (heth->Instance)->MACCR;
 8003c18:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003c1a:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8003d08 <HAL_ETH_ConfigMAC+0x114>
 8003c1e:	ea0c 0c03 	and.w	ip, ip, r3
                         macconf->BackOffLimit | 
 8003c22:	e9d1 3100 	ldrd	r3, r1, [r1]
 8003c26:	430b      	orrs	r3, r1
 8003c28:	68a1      	ldr	r1, [r4, #8]
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	68e1      	ldr	r1, [r4, #12]
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	6921      	ldr	r1, [r4, #16]
 8003c32:	430b      	orrs	r3, r1
 8003c34:	6961      	ldr	r1, [r4, #20]
 8003c36:	430b      	orrs	r3, r1
 8003c38:	69a1      	ldr	r1, [r4, #24]
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	69e1      	ldr	r1, [r4, #28]
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	6a21      	ldr	r1, [r4, #32]
 8003c42:	430b      	orrs	r3, r1
 8003c44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c46:	430b      	orrs	r3, r1
 8003c48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	433b      	orrs	r3, r7
 8003c4e:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c50:	4630      	mov	r0, r6
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003c52:	ea43 030c 	orr.w	r3, r3, ip
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003c56:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 8003c58:	6817      	ldr	r7, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c5a:	f7ff f957 	bl	8002f0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8003c5e:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c60:	4630      	mov	r0, r6
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003c62:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 8003c66:	6017      	str	r7, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003c68:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 8003c6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c6c:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 8003c6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003c70:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8003c72:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003c74:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8003c76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c78:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 8003c7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c7c:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 8003c7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c80:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003c82:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 8003c84:	6857      	ldr	r7, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c86:	f7ff f941 	bl	8002f0c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8003c8a:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003c8c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACFFR = tmpreg;
 8003c8e:	6057      	str	r7, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003c90:	6093      	str	r3, [r2, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003c92:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003c94:	60d3      	str	r3, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 8003c96:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8003c98:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003c9c:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
                          macconf->ReceiveFlowControl |
 8003ca0:	4303      	orrs	r3, r0
 8003ca2:	6e20      	ldr	r0, [r4, #96]	; 0x60
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003ca4:	0409      	lsls	r1, r1, #16
                          macconf->ReceiveFlowControl |
 8003ca6:	4303      	orrs	r3, r0
 8003ca8:	6e60      	ldr	r0, [r4, #100]	; 0x64
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003caa:	0c09      	lsrs	r1, r1, #16
                          macconf->ReceiveFlowControl |
 8003cac:	4303      	orrs	r3, r0
 8003cae:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003cb0:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 8003cb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cb8:	4630      	mov	r0, r6
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003cba:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003cbc:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 8003cbe:	6997      	ldr	r7, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cc0:	f7ff f924 	bl	8002f0c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8003cc4:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cc6:	4630      	mov	r0, r6
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003cc8:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 8003ccc:	619f      	str	r7, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 8003cd2:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cd4:	f7ff f91a 	bl	8002f0c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 8003cdc:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8003cde:	2000      	movs	r0, #0
  heth->State= HAL_ETH_STATE_READY;
 8003ce0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003ce4:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 8003ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = (heth->Instance)->MACCR;
 8003cea:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003cec:	ea47 0300 	orr.w	r3, r7, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cf0:	4630      	mov	r0, r6
    tmpreg &= ~((uint32_t)0x00004800);
 8003cf2:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003cf6:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003cf8:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 8003cfa:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cfc:	f7ff f906 	bl	8002f0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	601c      	str	r4, [r3, #0]
 8003d04:	e7ea      	b.n	8003cdc <HAL_ETH_ConfigMAC+0xe8>
 8003d06:	bf00      	nop
 8003d08:	ff20810f 	.word	0xff20810f

08003d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d10:	680b      	ldr	r3, [r1, #0]
{
 8003d12:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d14:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003ed4 <HAL_GPIO_Init+0x1c8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d18:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d1a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d1c:	4a6b      	ldr	r2, [pc, #428]	; (8003ecc <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d1e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003ed8 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8003d22:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d24:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8003d26:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d28:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8003d2a:	42ac      	cmp	r4, r5
 8003d2c:	f040 80b4 	bne.w	8003e98 <HAL_GPIO_Init+0x18c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d30:	684c      	ldr	r4, [r1, #4]
 8003d32:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003d36:	2603      	movs	r6, #3
 8003d38:	f024 0c10 	bic.w	ip, r4, #16
 8003d3c:	fa06 f60e 	lsl.w	r6, r6, lr
 8003d40:	f10c 37ff 	add.w	r7, ip, #4294967295
 8003d44:	43f6      	mvns	r6, r6
 8003d46:	2f01      	cmp	r7, #1
 8003d48:	d811      	bhi.n	8003d6e <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8003d4a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d4c:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d50:	68cf      	ldr	r7, [r1, #12]
 8003d52:	fa07 f70e 	lsl.w	r7, r7, lr
 8003d56:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003d5a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003d5c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d5e:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d62:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8003d66:	409f      	lsls	r7, r3
 8003d68:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8003d6c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003d6e:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d70:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d74:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d78:	688f      	ldr	r7, [r1, #8]
 8003d7a:	fa07 f70e 	lsl.w	r7, r7, lr
 8003d7e:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8003d82:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d84:	d116      	bne.n	8003db4 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8003d86:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d8a:	f003 0b07 	and.w	fp, r3, #7
 8003d8e:	f04f 0c0f 	mov.w	ip, #15
 8003d92:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8003d96:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8003d9a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d9e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8003da2:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003da6:	690f      	ldr	r7, [r1, #16]
 8003da8:	fa07 f70b 	lsl.w	r7, r7, fp
 8003dac:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8003db0:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8003db4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003db6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003db8:	f004 0703 	and.w	r7, r4, #3
 8003dbc:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003dc0:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8003dc4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dc6:	00e6      	lsls	r6, r4, #3
 8003dc8:	d566      	bpl.n	8003e98 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dca:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8003dce:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003dd2:	f003 0c03 	and.w	ip, r3, #3
 8003dd6:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dda:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8003dde:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003de2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de6:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8003dea:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8003dee:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8003df2:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8003df6:	9603      	str	r6, [sp, #12]
 8003df8:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003dfa:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8003dfe:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e02:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e06:	4e32      	ldr	r6, [pc, #200]	; (8003ed0 <HAL_GPIO_Init+0x1c4>)
 8003e08:	42b0      	cmp	r0, r6
 8003e0a:	d04c      	beq.n	8003ea6 <HAL_GPIO_Init+0x19a>
 8003e0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e10:	42b0      	cmp	r0, r6
 8003e12:	d04a      	beq.n	8003eaa <HAL_GPIO_Init+0x19e>
 8003e14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e18:	42b0      	cmp	r0, r6
 8003e1a:	d048      	beq.n	8003eae <HAL_GPIO_Init+0x1a2>
 8003e1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e20:	42b0      	cmp	r0, r6
 8003e22:	d046      	beq.n	8003eb2 <HAL_GPIO_Init+0x1a6>
 8003e24:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e28:	42b0      	cmp	r0, r6
 8003e2a:	d044      	beq.n	8003eb6 <HAL_GPIO_Init+0x1aa>
 8003e2c:	4548      	cmp	r0, r9
 8003e2e:	d044      	beq.n	8003eba <HAL_GPIO_Init+0x1ae>
 8003e30:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003e34:	42b0      	cmp	r0, r6
 8003e36:	d042      	beq.n	8003ebe <HAL_GPIO_Init+0x1b2>
 8003e38:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e3c:	42b0      	cmp	r0, r6
 8003e3e:	d040      	beq.n	8003ec2 <HAL_GPIO_Init+0x1b6>
 8003e40:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e44:	42b0      	cmp	r0, r6
 8003e46:	d03e      	beq.n	8003ec6 <HAL_GPIO_Init+0x1ba>
 8003e48:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e4c:	42b0      	cmp	r0, r6
 8003e4e:	bf14      	ite	ne
 8003e50:	260a      	movne	r6, #10
 8003e52:	2609      	moveq	r6, #9
 8003e54:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e5c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e60:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8003e62:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8003e66:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003e68:	bf0c      	ite	eq
 8003e6a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8003e6c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e6e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8003e72:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8003e74:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003e76:	bf0c      	ite	eq
 8003e78:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8003e7a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e7c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8003e80:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8003e82:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003e84:	bf0c      	ite	eq
 8003e86:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8003e88:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e8a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8003e8c:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8003e8e:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8003e90:	bf54      	ite	pl
 8003e92:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8003e94:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8003e96:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e98:	3301      	adds	r3, #1
 8003e9a:	2b10      	cmp	r3, #16
 8003e9c:	f47f af41 	bne.w	8003d22 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8003ea0:	b005      	add	sp, #20
 8003ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	e7d4      	b.n	8003e54 <HAL_GPIO_Init+0x148>
 8003eaa:	2601      	movs	r6, #1
 8003eac:	e7d2      	b.n	8003e54 <HAL_GPIO_Init+0x148>
 8003eae:	2602      	movs	r6, #2
 8003eb0:	e7d0      	b.n	8003e54 <HAL_GPIO_Init+0x148>
 8003eb2:	2603      	movs	r6, #3
 8003eb4:	e7ce      	b.n	8003e54 <HAL_GPIO_Init+0x148>
 8003eb6:	2604      	movs	r6, #4
 8003eb8:	e7cc      	b.n	8003e54 <HAL_GPIO_Init+0x148>
 8003eba:	2605      	movs	r6, #5
 8003ebc:	e7ca      	b.n	8003e54 <HAL_GPIO_Init+0x148>
 8003ebe:	2606      	movs	r6, #6
 8003ec0:	e7c8      	b.n	8003e54 <HAL_GPIO_Init+0x148>
 8003ec2:	2607      	movs	r6, #7
 8003ec4:	e7c6      	b.n	8003e54 <HAL_GPIO_Init+0x148>
 8003ec6:	2608      	movs	r6, #8
 8003ec8:	e7c4      	b.n	8003e54 <HAL_GPIO_Init+0x148>
 8003eca:	bf00      	nop
 8003ecc:	40013c00 	.word	0x40013c00
 8003ed0:	40020000 	.word	0x40020000
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40021400 	.word	0x40021400

08003edc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003edc:	b10a      	cbz	r2, 8003ee2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ede:	6181      	str	r1, [r0, #24]
  }
}
 8003ee0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ee2:	0409      	lsls	r1, r1, #16
 8003ee4:	e7fb      	b.n	8003ede <HAL_GPIO_WritePin+0x2>
	...

08003ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ee8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003eec:	6959      	ldr	r1, [r3, #20]
 8003eee:	4201      	tst	r1, r0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ef2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ef4:	f7fd f80e 	bl	8000f14 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ef8:	bd08      	pop	{r3, pc}
 8003efa:	bf00      	nop
 8003efc:	40013c00 	.word	0x40013c00

08003f00 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f00:	6803      	ldr	r3, [r0, #0]
 8003f02:	699a      	ldr	r2, [r3, #24]
 8003f04:	0791      	lsls	r1, r2, #30
 8003f06:	d501      	bpl.n	8003f0c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f08:	2200      	movs	r2, #0
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	07d2      	lsls	r2, r2, #31
 8003f10:	d403      	bmi.n	8003f1a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	619a      	str	r2, [r3, #24]
  }
}
 8003f1a:	4770      	bx	lr

08003f1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003f1c:	b530      	push	{r4, r5, lr}
 8003f1e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003f20:	6804      	ldr	r4, [r0, #0]
 8003f22:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8003f26:	6860      	ldr	r0, [r4, #4]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <I2C_TransferConfig+0x24>)
 8003f32:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8003f36:	ea20 0003 	bic.w	r0, r0, r3
 8003f3a:	4302      	orrs	r2, r0
 8003f3c:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003f3e:	bd30      	pop	{r4, r5, pc}
 8003f40:	03ff63ff 	.word	0x03ff63ff

08003f44 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f44:	6803      	ldr	r3, [r0, #0]
{
 8003f46:	b570      	push	{r4, r5, r6, lr}
 8003f48:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f4a:	6998      	ldr	r0, [r3, #24]
{
 8003f4c:	460d      	mov	r5, r1
 8003f4e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f50:	f010 0010 	ands.w	r0, r0, #16
 8003f54:	d116      	bne.n	8003f84 <I2C_IsAcknowledgeFailed+0x40>
}
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8003f58:	1c69      	adds	r1, r5, #1
 8003f5a:	d014      	beq.n	8003f86 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5c:	f7fe ffd0 	bl	8002f00 <HAL_GetTick>
 8003f60:	1b80      	subs	r0, r0, r6
 8003f62:	42a8      	cmp	r0, r5
 8003f64:	d800      	bhi.n	8003f68 <I2C_IsAcknowledgeFailed+0x24>
 8003f66:	b96d      	cbnz	r5, 8003f84 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f6a:	f043 0320 	orr.w	r3, r3, #32
 8003f6e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	2320      	movs	r3, #32
 8003f72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f76:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003f78:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003f7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8003f82:	e7e8      	b.n	8003f56 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	6999      	ldr	r1, [r3, #24]
 8003f88:	068a      	lsls	r2, r1, #26
 8003f8a:	d5e5      	bpl.n	8003f58 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f8e:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8003f90:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f92:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f94:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003f96:	f7ff ffb3 	bl	8003f00 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	6853      	ldr	r3, [r2, #4]
 8003f9e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003fa2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003fa6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fb2:	f043 0304 	orr.w	r3, r3, #4
 8003fb6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8003fbc:	e7db      	b.n	8003f76 <I2C_IsAcknowledgeFailed+0x32>

08003fbe <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003fbe:	b570      	push	{r4, r5, r6, lr}
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	075b      	lsls	r3, r3, #29
 8003fcc:	d40e      	bmi.n	8003fec <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fce:	4632      	mov	r2, r6
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f7ff ffb6 	bl	8003f44 <I2C_IsAcknowledgeFailed>
 8003fd8:	b9f0      	cbnz	r0, 8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	0691      	lsls	r1, r2, #26
 8003fe0:	d51c      	bpl.n	800401c <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	0752      	lsls	r2, r2, #29
 8003fe6:	d503      	bpl.n	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8003fe8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003fea:	b10a      	cbz	r2, 8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8003fec:	2000      	movs	r0, #0
}
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003ffa:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003ffe:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004008:	2300      	movs	r3, #0
 800400a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800400c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004014:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004018:	2001      	movs	r0, #1
 800401a:	e7e8      	b.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401c:	f7fe ff70 	bl	8002f00 <HAL_GetTick>
 8004020:	1b80      	subs	r0, r0, r6
 8004022:	42a8      	cmp	r0, r5
 8004024:	d801      	bhi.n	800402a <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8004026:	2d00      	cmp	r5, #0
 8004028:	d1cd      	bne.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800402a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800402c:	f043 0320 	orr.w	r3, r3, #32
 8004030:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004032:	2320      	movs	r3, #32
 8004034:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8004038:	2300      	movs	r3, #0
 800403a:	e7eb      	b.n	8004014 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

0800403c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	4604      	mov	r4, r0
 8004040:	460d      	mov	r5, r1
 8004042:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	069b      	lsls	r3, r3, #26
 800404a:	d501      	bpl.n	8004050 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800404c:	2000      	movs	r0, #0
}
 800404e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004050:	4632      	mov	r2, r6
 8004052:	4629      	mov	r1, r5
 8004054:	4620      	mov	r0, r4
 8004056:	f7ff ff75 	bl	8003f44 <I2C_IsAcknowledgeFailed>
 800405a:	b990      	cbnz	r0, 8004082 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405c:	f7fe ff50 	bl	8002f00 <HAL_GetTick>
 8004060:	1b80      	subs	r0, r0, r6
 8004062:	42a8      	cmp	r0, r5
 8004064:	d801      	bhi.n	800406a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004066:	2d00      	cmp	r5, #0
 8004068:	d1ec      	bne.n	8004044 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800406c:	f043 0320 	orr.w	r3, r3, #32
 8004070:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004072:	2320      	movs	r3, #32
 8004074:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004078:	2300      	movs	r3, #0
 800407a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800407e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004082:	2001      	movs	r0, #1
 8004084:	e7e3      	b.n	800404e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08004086 <I2C_WaitOnFlagUntilTimeout>:
{
 8004086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800408a:	9f06      	ldr	r7, [sp, #24]
 800408c:	4604      	mov	r4, r0
 800408e:	4688      	mov	r8, r1
 8004090:	4616      	mov	r6, r2
 8004092:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004094:	6822      	ldr	r2, [r4, #0]
 8004096:	6993      	ldr	r3, [r2, #24]
 8004098:	ea38 0303 	bics.w	r3, r8, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	42b3      	cmp	r3, r6
 80040a4:	d001      	beq.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80040a6:	2000      	movs	r0, #0
 80040a8:	e015      	b.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	1c6b      	adds	r3, r5, #1
 80040ac:	d0f3      	beq.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7fe ff27 	bl	8002f00 <HAL_GetTick>
 80040b2:	1bc0      	subs	r0, r0, r7
 80040b4:	42a8      	cmp	r0, r5
 80040b6:	d801      	bhi.n	80040bc <I2C_WaitOnFlagUntilTimeout+0x36>
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	d1eb      	bne.n	8004094 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80040be:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c0:	f043 0320 	orr.w	r3, r3, #32
 80040c4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	2320      	movs	r3, #32
 80040c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80040d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80040d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040da <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	4604      	mov	r4, r0
 80040de:	460d      	mov	r5, r1
 80040e0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	079b      	lsls	r3, r3, #30
 80040e8:	d501      	bpl.n	80040ee <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80040ea:	2000      	movs	r0, #0
}
 80040ec:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ee:	4632      	mov	r2, r6
 80040f0:	4629      	mov	r1, r5
 80040f2:	4620      	mov	r0, r4
 80040f4:	f7ff ff26 	bl	8003f44 <I2C_IsAcknowledgeFailed>
 80040f8:	b9a0      	cbnz	r0, 8004124 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	1c6a      	adds	r2, r5, #1
 80040fc:	d0f1      	beq.n	80040e2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fe feff 	bl	8002f00 <HAL_GetTick>
 8004102:	1b80      	subs	r0, r0, r6
 8004104:	42a8      	cmp	r0, r5
 8004106:	d801      	bhi.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004108:	2d00      	cmp	r5, #0
 800410a:	d1ea      	bne.n	80040e2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800410c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800410e:	f043 0320 	orr.w	r3, r3, #32
 8004112:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004114:	2320      	movs	r3, #32
 8004116:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800411a:	2300      	movs	r3, #0
 800411c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8004120:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004124:	2001      	movs	r0, #1
 8004126:	e7e1      	b.n	80040ec <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08004128 <I2C_RequestMemoryWrite>:
{
 8004128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800412a:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800412c:	4b16      	ldr	r3, [pc, #88]	; (8004188 <I2C_RequestMemoryWrite+0x60>)
{
 800412e:	4605      	mov	r5, r0
 8004130:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004132:	9300      	str	r3, [sp, #0]
{
 8004134:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800413a:	b2fa      	uxtb	r2, r7
 800413c:	f7ff feee 	bl	8003f1c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004140:	4632      	mov	r2, r6
 8004142:	9908      	ldr	r1, [sp, #32]
 8004144:	4628      	mov	r0, r5
 8004146:	f7ff ffc8 	bl	80040da <I2C_WaitOnTXISFlagUntilTimeout>
 800414a:	b110      	cbz	r0, 8004152 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 800414c:	2001      	movs	r0, #1
}
 800414e:	b003      	add	sp, #12
 8004150:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004152:	2f01      	cmp	r7, #1
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	d10c      	bne.n	8004172 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004158:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800415a:	2200      	movs	r2, #0
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004160:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004162:	9b08      	ldr	r3, [sp, #32]
 8004164:	9600      	str	r6, [sp, #0]
 8004166:	f7ff ff8e 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800416a:	3000      	adds	r0, #0
 800416c:	bf18      	it	ne
 800416e:	2001      	movne	r0, #1
 8004170:	e7ed      	b.n	800414e <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004172:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004174:	9908      	ldr	r1, [sp, #32]
 8004176:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004178:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	4632      	mov	r2, r6
 800417c:	f7ff ffad 	bl	80040da <I2C_WaitOnTXISFlagUntilTimeout>
 8004180:	2800      	cmp	r0, #0
 8004182:	d1e3      	bne.n	800414c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	e7e7      	b.n	8004158 <I2C_RequestMemoryWrite+0x30>
 8004188:	80002000 	.word	0x80002000

0800418c <I2C_RequestMemoryRead>:
{
 800418c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800418e:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004190:	4b16      	ldr	r3, [pc, #88]	; (80041ec <I2C_RequestMemoryRead+0x60>)
{
 8004192:	4605      	mov	r5, r0
 8004194:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004196:	9300      	str	r3, [sp, #0]
{
 8004198:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800419a:	2300      	movs	r3, #0
 800419c:	b2fa      	uxtb	r2, r7
 800419e:	f7ff febd 	bl	8003f1c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a2:	4632      	mov	r2, r6
 80041a4:	9908      	ldr	r1, [sp, #32]
 80041a6:	4628      	mov	r0, r5
 80041a8:	f7ff ff97 	bl	80040da <I2C_WaitOnTXISFlagUntilTimeout>
 80041ac:	b110      	cbz	r0, 80041b4 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80041ae:	2001      	movs	r0, #1
}
 80041b0:	b003      	add	sp, #12
 80041b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b4:	2f01      	cmp	r7, #1
 80041b6:	682b      	ldr	r3, [r5, #0]
 80041b8:	d10c      	bne.n	80041d4 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ba:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041bc:	2200      	movs	r2, #0
 80041be:	2140      	movs	r1, #64	; 0x40
 80041c0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c2:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	9b08      	ldr	r3, [sp, #32]
 80041c6:	9600      	str	r6, [sp, #0]
 80041c8:	f7ff ff5d 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80041cc:	3000      	adds	r0, #0
 80041ce:	bf18      	it	ne
 80041d0:	2001      	movne	r0, #1
 80041d2:	e7ed      	b.n	80041b0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041d4:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	9908      	ldr	r1, [sp, #32]
 80041d8:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041dc:	4632      	mov	r2, r6
 80041de:	f7ff ff7c 	bl	80040da <I2C_WaitOnTXISFlagUntilTimeout>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d1e3      	bne.n	80041ae <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041e6:	682b      	ldr	r3, [r5, #0]
 80041e8:	e7e7      	b.n	80041ba <I2C_RequestMemoryRead+0x2e>
 80041ea:	bf00      	nop
 80041ec:	80002000 	.word	0x80002000

080041f0 <HAL_I2C_MspInit>:
}
 80041f0:	4770      	bx	lr

080041f2 <HAL_I2C_Init>:
{
 80041f2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80041f4:	4604      	mov	r4, r0
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d04a      	beq.n	8004290 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80041fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004202:	b91b      	cbnz	r3, 800420c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004204:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004208:	f7ff fff2 	bl	80041f0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800420c:	2324      	movs	r3, #36	; 0x24
 800420e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800421c:	6862      	ldr	r2, [r4, #4]
 800421e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004222:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004230:	2901      	cmp	r1, #1
 8004232:	d124      	bne.n	800427e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004234:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004238:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800423a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800423c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800423e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004246:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800424e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004250:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004254:	430a      	orrs	r2, r1
 8004256:	69a1      	ldr	r1, [r4, #24]
 8004258:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800425c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800425e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004262:	430a      	orrs	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800426e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004272:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004276:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800427c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800427e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004282:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004284:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004286:	d1d8      	bne.n	800423a <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	e7d4      	b.n	800423a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004290:	2001      	movs	r0, #1
 8004292:	e7f3      	b.n	800427c <HAL_I2C_Init+0x8a>

08004294 <HAL_I2C_MspDeInit>:
 8004294:	4770      	bx	lr

08004296 <HAL_I2C_DeInit>:
{
 8004296:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004298:	4604      	mov	r4, r0
 800429a:	b198      	cbz	r0, 80042c4 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800429c:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800429e:	2324      	movs	r3, #36	; 0x24
 80042a0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80042a4:	6813      	ldr	r3, [r2, #0]
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80042ac:	f7ff fff2 	bl	8004294 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b0:	2000      	movs	r0, #0
 80042b2:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80042b4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80042b8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80042c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80042c4:	2001      	movs	r0, #1
 80042c6:	e7fc      	b.n	80042c2 <HAL_I2C_DeInit+0x2c>

080042c8 <HAL_I2C_Master_Receive>:
{
 80042c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042cc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80042d2:	4604      	mov	r4, r0
 80042d4:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d6:	2b20      	cmp	r3, #32
{
 80042d8:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042da:	f040 8083 	bne.w	80043e4 <HAL_I2C_Master_Receive+0x11c>
    __HAL_LOCK(hi2c);
 80042de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d07e      	beq.n	80043e4 <HAL_I2C_Master_Receive+0x11c>
 80042e6:	2701      	movs	r7, #1
 80042e8:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80042ec:	f7fe fe08 	bl	8002f00 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042f0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80042f2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042f4:	9000      	str	r0, [sp, #0]
 80042f6:	463a      	mov	r2, r7
 80042f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7ff fec2 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 8004302:	b118      	cbz	r0, 800430c <HAL_I2C_Master_Receive+0x44>
      return HAL_ERROR;
 8004304:	2001      	movs	r0, #1
}
 8004306:	b003      	add	sp, #12
 8004308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800430c:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800430e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8004312:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004314:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004318:	2310      	movs	r3, #16
 800431a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8004320:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004324:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004326:	2bff      	cmp	r3, #255	; 0xff
 8004328:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <HAL_I2C_Master_Receive+0x120>)
 800432a:	d926      	bls.n	800437a <HAL_I2C_Master_Receive+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800432c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800432e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004330:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004336:	4631      	mov	r1, r6
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff fdef 	bl	8003f1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800433e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004340:	462a      	mov	r2, r5
 8004342:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004344:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8004346:	b29b      	uxth	r3, r3
 8004348:	b9fb      	cbnz	r3, 800438a <HAL_I2C_Master_Receive+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434a:	f7ff fe77 	bl	800403c <I2C_WaitOnSTOPFlagUntilTimeout>
 800434e:	2800      	cmp	r0, #0
 8004350:	d1d8      	bne.n	8004304 <HAL_I2C_Master_Receive+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	2120      	movs	r1, #32
 8004356:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800435e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004362:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800436c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004370:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004374:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004378:	e7c5      	b.n	8004306 <HAL_I2C_Master_Receive+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 800437a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800437c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800437e:	b292      	uxth	r2, r2
 8004380:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	e7d5      	b.n	8004336 <HAL_I2C_Master_Receive+0x6e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438a:	f7ff fe18 	bl	8003fbe <I2C_WaitOnRXNEFlagUntilTimeout>
 800438e:	2800      	cmp	r0, #0
 8004390:	d1b8      	bne.n	8004304 <HAL_I2C_Master_Receive+0x3c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004398:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800439a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800439c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800439e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80043a0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80043a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80043a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80043a6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80043a8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80043aa:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0c2      	beq.n	800433e <HAL_I2C_Master_Receive+0x76>
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	d1c0      	bne.n	800433e <HAL_I2C_Master_Receive+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043bc:	9500      	str	r5, [sp, #0]
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff fe5f 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d19b      	bne.n	8004304 <HAL_I2C_Master_Receive+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043ce:	2bff      	cmp	r3, #255	; 0xff
 80043d0:	d903      	bls.n	80043da <HAL_I2C_Master_Receive+0x112>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043d2:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043d4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043d6:	8522      	strh	r2, [r4, #40]	; 0x28
 80043d8:	e7ab      	b.n	8004332 <HAL_I2C_Master_Receive+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 80043da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043dc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80043de:	b292      	uxth	r2, r2
 80043e0:	8522      	strh	r2, [r4, #40]	; 0x28
 80043e2:	e7ce      	b.n	8004382 <HAL_I2C_Master_Receive+0xba>
    return HAL_BUSY;
 80043e4:	2002      	movs	r0, #2
 80043e6:	e78e      	b.n	8004306 <HAL_I2C_Master_Receive+0x3e>
 80043e8:	80002400 	.word	0x80002400

080043ec <HAL_I2C_Mem_Write>:
{
 80043ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80043f6:	b085      	sub	sp, #20
 80043f8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fa:	2b20      	cmp	r3, #32
{
 80043fc:	460f      	mov	r7, r1
 80043fe:	9203      	str	r2, [sp, #12]
 8004400:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8004404:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004408:	f040 80a2 	bne.w	8004550 <HAL_I2C_Mem_Write+0x164>
    if ((pData == NULL) || (Size == 0U))
 800440c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800440e:	b113      	cbz	r3, 8004416 <HAL_I2C_Mem_Write+0x2a>
 8004410:	f1ba 0f00 	cmp.w	sl, #0
 8004414:	d106      	bne.n	8004424 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800441a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800441c:	2001      	movs	r0, #1
}
 800441e:	b005      	add	sp, #20
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004424:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004428:	2b01      	cmp	r3, #1
 800442a:	f000 8091 	beq.w	8004550 <HAL_I2C_Mem_Write+0x164>
 800442e:	2501      	movs	r5, #1
 8004430:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004434:	f7fe fd64 	bl	8002f00 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004438:	2319      	movs	r3, #25
 800443a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800443c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800443e:	462a      	mov	r2, r5
 8004440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004444:	4620      	mov	r0, r4
 8004446:	f7ff fe1e 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 800444a:	4681      	mov	r9, r0
 800444c:	2800      	cmp	r0, #0
 800444e:	d1e5      	bne.n	800441c <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004450:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8004452:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004454:	9a03      	ldr	r2, [sp, #12]
 8004456:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004458:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800445c:	2340      	movs	r3, #64	; 0x40
 800445e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004464:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004466:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004468:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800446a:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 800446c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004470:	e9cd 8600 	strd	r8, r6, [sp]
 8004474:	f7ff fe58 	bl	8004128 <I2C_RequestMemoryWrite>
 8004478:	b110      	cbz	r0, 8004480 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800447a:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800447e:	e7cd      	b.n	800441c <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004480:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004482:	2bff      	cmp	r3, #255	; 0xff
 8004484:	d954      	bls.n	8004530 <HAL_I2C_Mem_Write+0x144>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004486:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800448c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800448e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004490:	4639      	mov	r1, r7
 8004492:	4620      	mov	r0, r4
 8004494:	f7ff fd42 	bl	8003f1c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004498:	4632      	mov	r2, r6
 800449a:	4641      	mov	r1, r8
 800449c:	4620      	mov	r0, r4
 800449e:	f7ff fe1c 	bl	80040da <I2C_WaitOnTXISFlagUntilTimeout>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d1ba      	bne.n	800441c <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a8:	6822      	ldr	r2, [r4, #0]
 80044aa:	f813 1b01 	ldrb.w	r1, [r3], #1
 80044ae:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80044b0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80044b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80044b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80044b6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80044b8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80044ba:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80044bc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80044be:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80044c2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	b1a3      	cbz	r3, 80044f2 <HAL_I2C_Mem_Write+0x106>
 80044c8:	b99a      	cbnz	r2, 80044f2 <HAL_I2C_Mem_Write+0x106>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044ca:	9600      	str	r6, [sp, #0]
 80044cc:	4643      	mov	r3, r8
 80044ce:	2180      	movs	r1, #128	; 0x80
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7ff fdd8 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d1a0      	bne.n	800441c <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044dc:	2bff      	cmp	r3, #255	; 0xff
 80044de:	d92f      	bls.n	8004540 <HAL_I2C_Mem_Write+0x154>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044e0:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044e6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044ea:	4639      	mov	r1, r7
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7ff fd15 	bl	8003f1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80044f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1ce      	bne.n	8004498 <HAL_I2C_Mem_Write+0xac>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fa:	4632      	mov	r2, r6
 80044fc:	4641      	mov	r1, r8
 80044fe:	4620      	mov	r0, r4
 8004500:	f7ff fd9c 	bl	800403c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004504:	2800      	cmp	r0, #0
 8004506:	d189      	bne.n	800441c <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	2120      	movs	r1, #32
 800450c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004514:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004518:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004522:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004526:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800452a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800452e:	e776      	b.n	800441e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8004530:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004536:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004538:	b292      	uxth	r2, r2
 800453a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	e7a7      	b.n	8004490 <HAL_I2C_Mem_Write+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 8004540:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004546:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004548:	b292      	uxth	r2, r2
 800454a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	e7cc      	b.n	80044ea <HAL_I2C_Mem_Write+0xfe>
    return HAL_BUSY;
 8004550:	2002      	movs	r0, #2
 8004552:	e764      	b.n	800441e <HAL_I2C_Mem_Write+0x32>

08004554 <HAL_I2C_Mem_Read>:
{
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800455a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800455e:	b085      	sub	sp, #20
 8004560:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004562:	2b20      	cmp	r3, #32
{
 8004564:	460f      	mov	r7, r1
 8004566:	9203      	str	r2, [sp, #12]
 8004568:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 800456c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004570:	f040 80a6 	bne.w	80046c0 <HAL_I2C_Mem_Read+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8004574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004576:	b113      	cbz	r3, 800457e <HAL_I2C_Mem_Read+0x2a>
 8004578:	f1ba 0f00 	cmp.w	sl, #0
 800457c:	d106      	bne.n	800458c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800457e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004582:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004584:	2001      	movs	r0, #1
}
 8004586:	b005      	add	sp, #20
 8004588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800458c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004590:	2b01      	cmp	r3, #1
 8004592:	f000 8095 	beq.w	80046c0 <HAL_I2C_Mem_Read+0x16c>
 8004596:	2501      	movs	r5, #1
 8004598:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800459c:	f7fe fcb0 	bl	8002f00 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045a0:	2319      	movs	r3, #25
 80045a2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80045a4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045a6:	462a      	mov	r2, r5
 80045a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045ac:	4620      	mov	r0, r4
 80045ae:	f7ff fd6a 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4681      	mov	r9, r0
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d1e5      	bne.n	8004584 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045b8:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80045ba:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045bc:	9a03      	ldr	r2, [sp, #12]
 80045be:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045c4:	2340      	movs	r3, #64	; 0x40
 80045c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80045ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045cc:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045ce:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80045d0:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045d2:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 80045d4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045d8:	e9cd 8600 	strd	r8, r6, [sp]
 80045dc:	f7ff fdd6 	bl	800418c <I2C_RequestMemoryRead>
 80045e0:	b110      	cbz	r0, 80045e8 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 80045e2:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80045e6:	e7cd      	b.n	8004584 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045ea:	2bff      	cmp	r3, #255	; 0xff
 80045ec:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <HAL_I2C_Mem_Read+0x170>)
 80045ee:	d957      	bls.n	80046a0 <HAL_I2C_Mem_Read+0x14c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045f0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80045fa:	4639      	mov	r1, r7
 80045fc:	4620      	mov	r0, r4
 80045fe:	f7ff fc8d 	bl	8003f1c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004602:	9600      	str	r6, [sp, #0]
 8004604:	4643      	mov	r3, r8
 8004606:	2200      	movs	r2, #0
 8004608:	2104      	movs	r1, #4
 800460a:	4620      	mov	r0, r4
 800460c:	f7ff fd3b 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 8004610:	2800      	cmp	r0, #0
 8004612:	d1b7      	bne.n	8004584 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800461a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800461c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800461e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004620:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004622:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004624:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004626:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004628:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800462a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800462c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800462e:	b29b      	uxth	r3, r3
 8004630:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004632:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	b1a3      	cbz	r3, 8004662 <HAL_I2C_Mem_Read+0x10e>
 8004638:	b99a      	cbnz	r2, 8004662 <HAL_I2C_Mem_Read+0x10e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800463a:	9600      	str	r6, [sp, #0]
 800463c:	4643      	mov	r3, r8
 800463e:	2180      	movs	r1, #128	; 0x80
 8004640:	4620      	mov	r0, r4
 8004642:	f7ff fd20 	bl	8004086 <I2C_WaitOnFlagUntilTimeout>
 8004646:	2800      	cmp	r0, #0
 8004648:	d19c      	bne.n	8004584 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800464a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800464c:	2bff      	cmp	r3, #255	; 0xff
 800464e:	d92f      	bls.n	80046b0 <HAL_I2C_Mem_Read+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004650:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004652:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004656:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004658:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800465a:	4639      	mov	r1, r7
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff fc5d 	bl	8003f1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8004662:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1cb      	bne.n	8004602 <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466a:	4632      	mov	r2, r6
 800466c:	4641      	mov	r1, r8
 800466e:	4620      	mov	r0, r4
 8004670:	f7ff fce4 	bl	800403c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004674:	2800      	cmp	r0, #0
 8004676:	d185      	bne.n	8004584 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	2120      	movs	r1, #32
 800467c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004684:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004688:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004696:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800469a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800469e:	e772      	b.n	8004586 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80046a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80046a8:	b292      	uxth	r2, r2
 80046aa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	e7a4      	b.n	80045fa <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80046b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046b6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80046b8:	b292      	uxth	r2, r2
 80046ba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	e7cc      	b.n	800465a <HAL_I2C_Mem_Read+0x106>
    return HAL_BUSY;
 80046c0:	2002      	movs	r0, #2
 80046c2:	e760      	b.n	8004586 <HAL_I2C_Mem_Read+0x32>
 80046c4:	80002400 	.word	0x80002400

080046c8 <HAL_I2C_GetState>:
  return hi2c->State;
 80046c8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80046cc:	4770      	bx	lr

080046ce <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046ce:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046d0:	f8d1 c000 	ldr.w	ip, [r1]
{
 80046d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046d8:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046da:	6804      	ldr	r4, [r0, #0]
 80046dc:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046de:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046e2:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046e4:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80046e6:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80046ea:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046ee:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046f0:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046f4:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046f8:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046fa:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046fc:	68e0      	ldr	r0, [r4, #12]
 80046fe:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8004702:	4430      	add	r0, r6
 8004704:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004708:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800470a:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800470c:	68e0      	ldr	r0, [r4, #12]
 800470e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004712:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004714:	6898      	ldr	r0, [r3, #8]
 8004716:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800471a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800471c:	6888      	ldr	r0, [r1, #8]
 800471e:	68e6      	ldr	r6, [r4, #12]
 8004720:	3001      	adds	r0, #1
 8004722:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004726:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004728:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800472a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800472e:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004730:	6918      	ldr	r0, [r3, #16]
 8004732:	f020 0007 	bic.w	r0, r0, #7
 8004736:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004738:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800473a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800473c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004740:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004744:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004748:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800474c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004750:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004754:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8004758:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800475a:	6958      	ldr	r0, [r3, #20]
 800475c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004760:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004762:	6948      	ldr	r0, [r1, #20]
 8004764:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004766:	69d8      	ldr	r0, [r3, #28]
 8004768:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800476c:	f020 0007 	bic.w	r0, r0, #7
 8004770:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004772:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8004776:	4305      	orrs	r5, r0
 8004778:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800477a:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800477c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800477e:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004782:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004784:	b31e      	cbz	r6, 80047ce <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004786:	2e01      	cmp	r6, #1
 8004788:	d023      	beq.n	80047d2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800478a:	1eb0      	subs	r0, r6, #2
 800478c:	2802      	cmp	r0, #2
 800478e:	d922      	bls.n	80047d6 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004790:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8004792:	bf0c      	ite	eq
 8004794:	2002      	moveq	r0, #2
 8004796:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004798:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800479a:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800479e:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80047a2:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80047a4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80047a6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80047a8:	4345      	muls	r5, r0
 80047aa:	4378      	muls	r0, r7
 80047ac:	3003      	adds	r0, #3
 80047ae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80047b2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80047b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80047b6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80047ba:	f020 0007 	bic.w	r0, r0, #7
 80047be:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80047c0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80047c2:	58a3      	ldr	r3, [r4, r2]
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	50a3      	str	r3, [r4, r2]
}
 80047ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80047ce:	2004      	movs	r0, #4
 80047d0:	e7e2      	b.n	8004798 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80047d2:	2003      	movs	r0, #3
 80047d4:	e7e0      	b.n	8004798 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80047d6:	2002      	movs	r0, #2
 80047d8:	e7de      	b.n	8004798 <LTDC_SetConfig+0xca>

080047da <HAL_LTDC_MspInit>:
}
 80047da:	4770      	bx	lr

080047dc <HAL_LTDC_Init>:
{
 80047dc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80047de:	4604      	mov	r4, r0
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d063      	beq.n	80048ac <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80047e4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80047e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047ec:	b91b      	cbnz	r3, 80047f6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80047ee:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80047f2:	f7ff fff2 	bl	80047da <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004804:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004806:	6999      	ldr	r1, [r3, #24]
 8004808:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800480c:	4302      	orrs	r2, r0
 800480e:	68e0      	ldr	r0, [r4, #12]
 8004810:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004812:	6920      	ldr	r0, [r4, #16]
 8004814:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004816:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004818:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800481a:	4925      	ldr	r1, [pc, #148]	; (80048b0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800481c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	400a      	ands	r2, r1
 8004822:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800482a:	69a0      	ldr	r0, [r4, #24]
 800482c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800482e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004830:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	400a      	ands	r2, r1
 8004836:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800483e:	6a20      	ldr	r0, [r4, #32]
 8004840:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004842:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004844:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	400a      	ands	r2, r1
 800484a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004852:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004854:	4302      	orrs	r2, r0
 8004856:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	4011      	ands	r1, r2
 800485c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800485e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004866:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004868:	430a      	orrs	r2, r1
 800486a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800486c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800486e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004872:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004876:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800487a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800487c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800487e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004882:	430a      	orrs	r2, r1
 8004884:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004888:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800488c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004892:	f042 0206 	orr.w	r2, r2, #6
 8004896:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80048a0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80048a2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80048a6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80048ac:	2001      	movs	r0, #1
 80048ae:	e7fc      	b.n	80048aa <HAL_LTDC_Init+0xce>
 80048b0:	f000f800 	.word	0xf000f800

080048b4 <HAL_LTDC_ConfigLayer>:
{
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80048b6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80048ba:	4606      	mov	r6, r0
 80048bc:	468c      	mov	ip, r1
 80048be:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f04f 0002 	mov.w	r0, #2
 80048c6:	d01d      	beq.n	8004904 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80048c8:	2434      	movs	r4, #52	; 0x34
 80048ca:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048cc:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 80048d0:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80048d2:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80048d6:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80048da:	3438      	adds	r4, #56	; 0x38
 80048dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e8:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048ea:	4630      	mov	r0, r6
 80048ec:	4672      	mov	r2, lr
 80048ee:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80048f0:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048f2:	f7ff feec 	bl	80046ce <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048f6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80048f8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048fa:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048fc:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004900:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004906 <HAL_LTDC_GetState>:
  return hltdc->State;
 8004906:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 800490a:	4770      	bx	lr

0800490c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800490e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004912:	4c19      	ldr	r4, [pc, #100]	; (8004978 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004914:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800492c:	f7fe fae8 	bl	8002f00 <HAL_GetTick>
 8004930:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	03da      	lsls	r2, r3, #15
 8004936:	d50c      	bpl.n	8004952 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004940:	f7fe fade 	bl	8002f00 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004944:	4c0c      	ldr	r4, [pc, #48]	; (8004978 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8004946:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	039b      	lsls	r3, r3, #14
 800494c:	d50a      	bpl.n	8004964 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800494e:	2000      	movs	r0, #0
 8004950:	e006      	b.n	8004960 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004952:	f7fe fad5 	bl	8002f00 <HAL_GetTick>
 8004956:	1b40      	subs	r0, r0, r5
 8004958:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800495c:	d9e9      	bls.n	8004932 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800495e:	2003      	movs	r0, #3
}
 8004960:	b003      	add	sp, #12
 8004962:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004964:	f7fe facc 	bl	8002f00 <HAL_GetTick>
 8004968:	1b40      	subs	r0, r0, r5
 800496a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800496e:	d9eb      	bls.n	8004948 <HAL_PWREx_EnableOverDrive+0x3c>
 8004970:	e7f5      	b.n	800495e <HAL_PWREx_EnableOverDrive+0x52>
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	40007000 	.word	0x40007000

0800497c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800497c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004980:	4604      	mov	r4, r0
 8004982:	b908      	cbnz	r0, 8004988 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004984:	2001      	movs	r0, #1
 8004986:	e03f      	b.n	8004a08 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004988:	6803      	ldr	r3, [r0, #0]
 800498a:	07d8      	lsls	r0, r3, #31
 800498c:	d410      	bmi.n	80049b0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	0799      	lsls	r1, r3, #30
 8004992:	d460      	bmi.n	8004a56 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	0719      	lsls	r1, r3, #28
 8004998:	f100 80a5 	bmi.w	8004ae6 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	075a      	lsls	r2, r3, #29
 80049a0:	f100 80c6 	bmi.w	8004b30 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a4:	69a0      	ldr	r0, [r4, #24]
 80049a6:	2800      	cmp	r0, #0
 80049a8:	f040 8130 	bne.w	8004c0c <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 80049ac:	2000      	movs	r0, #0
 80049ae:	e02b      	b.n	8004a08 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049b0:	4b94      	ldr	r3, [pc, #592]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	f002 020c 	and.w	r2, r2, #12
 80049b8:	2a04      	cmp	r2, #4
 80049ba:	d007      	beq.n	80049cc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	f002 020c 	and.w	r2, r2, #12
 80049c2:	2a08      	cmp	r2, #8
 80049c4:	d10a      	bne.n	80049dc <HAL_RCC_OscConfig+0x60>
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	025a      	lsls	r2, r3, #9
 80049ca:	d507      	bpl.n	80049dc <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049cc:	4b8d      	ldr	r3, [pc, #564]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	039b      	lsls	r3, r3, #14
 80049d2:	d5dc      	bpl.n	800498e <HAL_RCC_OscConfig+0x12>
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1d9      	bne.n	800498e <HAL_RCC_OscConfig+0x12>
 80049da:	e7d3      	b.n	8004984 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049dc:	6863      	ldr	r3, [r4, #4]
 80049de:	4d89      	ldr	r5, [pc, #548]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d113      	bne.n	8004a0e <HAL_RCC_OscConfig+0x92>
 80049e6:	682b      	ldr	r3, [r5, #0]
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80049ee:	f7fe fa87 	bl	8002f00 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4d84      	ldr	r5, [pc, #528]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80049f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	682b      	ldr	r3, [r5, #0]
 80049f8:	039f      	lsls	r7, r3, #14
 80049fa:	d4c8      	bmi.n	800498e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fe fa80 	bl	8002f00 <HAL_GetTick>
 8004a00:	1b80      	subs	r0, r0, r6
 8004a02:	2864      	cmp	r0, #100	; 0x64
 8004a04:	d9f7      	bls.n	80049f6 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8004a06:	2003      	movs	r0, #3
}
 8004a08:	b002      	add	sp, #8
 8004a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a0e:	b99b      	cbnz	r3, 8004a38 <HAL_RCC_OscConfig+0xbc>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a20:	f7fe fa6e 	bl	8002f00 <HAL_GetTick>
 8004a24:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	682b      	ldr	r3, [r5, #0]
 8004a28:	0398      	lsls	r0, r3, #14
 8004a2a:	d5b0      	bpl.n	800498e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fe fa68 	bl	8002f00 <HAL_GetTick>
 8004a30:	1b80      	subs	r0, r0, r6
 8004a32:	2864      	cmp	r0, #100	; 0x64
 8004a34:	d9f7      	bls.n	8004a26 <HAL_RCC_OscConfig+0xaa>
 8004a36:	e7e6      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	d103      	bne.n	8004a48 <HAL_RCC_OscConfig+0xcc>
 8004a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a44:	602b      	str	r3, [r5, #0]
 8004a46:	e7ce      	b.n	80049e6 <HAL_RCC_OscConfig+0x6a>
 8004a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4c:	602b      	str	r3, [r5, #0]
 8004a4e:	682b      	ldr	r3, [r5, #0]
 8004a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a54:	e7ca      	b.n	80049ec <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a56:	4b6b      	ldr	r3, [pc, #428]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	f012 0f0c 	tst.w	r2, #12
 8004a5e:	d007      	beq.n	8004a70 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	f002 020c 	and.w	r2, r2, #12
 8004a66:	2a08      	cmp	r2, #8
 8004a68:	d111      	bne.n	8004a8e <HAL_RCC_OscConfig+0x112>
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	0259      	lsls	r1, r3, #9
 8004a6e:	d40e      	bmi.n	8004a8e <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a70:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	0792      	lsls	r2, r2, #30
 8004a76:	d502      	bpl.n	8004a7e <HAL_RCC_OscConfig+0x102>
 8004a78:	68e2      	ldr	r2, [r4, #12]
 8004a7a:	2a01      	cmp	r2, #1
 8004a7c:	d182      	bne.n	8004984 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	6921      	ldr	r1, [r4, #16]
 8004a82:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004a86:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004a8a:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8c:	e782      	b.n	8004994 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	4d5c      	ldr	r5, [pc, #368]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 8004a92:	b1bb      	cbz	r3, 8004ac4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a9c:	f7fe fa30 	bl	8002f00 <HAL_GetTick>
 8004aa0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa2:	682b      	ldr	r3, [r5, #0]
 8004aa4:	079f      	lsls	r7, r3, #30
 8004aa6:	d507      	bpl.n	8004ab8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	6922      	ldr	r2, [r4, #16]
 8004aac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ab0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	e76d      	b.n	8004994 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab8:	f7fe fa22 	bl	8002f00 <HAL_GetTick>
 8004abc:	1b80      	subs	r0, r0, r6
 8004abe:	2802      	cmp	r0, #2
 8004ac0:	d9ef      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x126>
 8004ac2:	e7a0      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004acc:	f7fe fa18 	bl	8002f00 <HAL_GetTick>
 8004ad0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad2:	682b      	ldr	r3, [r5, #0]
 8004ad4:	0798      	lsls	r0, r3, #30
 8004ad6:	f57f af5d 	bpl.w	8004994 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ada:	f7fe fa11 	bl	8002f00 <HAL_GetTick>
 8004ade:	1b80      	subs	r0, r0, r6
 8004ae0:	2802      	cmp	r0, #2
 8004ae2:	d9f6      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x156>
 8004ae4:	e78f      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ae6:	6963      	ldr	r3, [r4, #20]
 8004ae8:	4d46      	ldr	r5, [pc, #280]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 8004aea:	b183      	cbz	r3, 8004b0e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8004aec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004af4:	f7fe fa04 	bl	8002f00 <HAL_GetTick>
 8004af8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004afc:	079b      	lsls	r3, r3, #30
 8004afe:	f53f af4d 	bmi.w	800499c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fe f9fd 	bl	8002f00 <HAL_GetTick>
 8004b06:	1b80      	subs	r0, r0, r6
 8004b08:	2802      	cmp	r0, #2
 8004b0a:	d9f6      	bls.n	8004afa <HAL_RCC_OscConfig+0x17e>
 8004b0c:	e77b      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8004b0e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004b16:	f7fe f9f3 	bl	8002f00 <HAL_GetTick>
 8004b1a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004b1e:	079f      	lsls	r7, r3, #30
 8004b20:	f57f af3c 	bpl.w	800499c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b24:	f7fe f9ec 	bl	8002f00 <HAL_GetTick>
 8004b28:	1b80      	subs	r0, r0, r6
 8004b2a:	2802      	cmp	r0, #2
 8004b2c:	d9f6      	bls.n	8004b1c <HAL_RCC_OscConfig+0x1a0>
 8004b2e:	e76a      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b30:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 8004b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b34:	00d0      	lsls	r0, r2, #3
 8004b36:	d427      	bmi.n	8004b88 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8004b3a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b4c:	4d2e      	ldr	r5, [pc, #184]	; (8004c08 <HAL_RCC_OscConfig+0x28c>)
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	05d9      	lsls	r1, r3, #23
 8004b52:	d51b      	bpl.n	8004b8c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b54:	68a3      	ldr	r3, [r4, #8]
 8004b56:	4d2b      	ldr	r5, [pc, #172]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d127      	bne.n	8004bac <HAL_RCC_OscConfig+0x230>
 8004b5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004b68:	f7fe f9ca 	bl	8002f00 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6c:	4f25      	ldr	r7, [pc, #148]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8004b6e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b72:	079b      	lsls	r3, r3, #30
 8004b74:	d53f      	bpl.n	8004bf6 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	f43f af14 	beq.w	80049a4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <HAL_RCC_OscConfig+0x288>)
 8004b7e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
 8004b86:	e70d      	b.n	80049a4 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8004b88:	2600      	movs	r6, #0
 8004b8a:	e7df      	b.n	8004b4c <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b92:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004b94:	f7fe f9b4 	bl	8002f00 <HAL_GetTick>
 8004b98:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b9a:	682b      	ldr	r3, [r5, #0]
 8004b9c:	05da      	lsls	r2, r3, #23
 8004b9e:	d4d9      	bmi.n	8004b54 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba0:	f7fe f9ae 	bl	8002f00 <HAL_GetTick>
 8004ba4:	1bc0      	subs	r0, r0, r7
 8004ba6:	2864      	cmp	r0, #100	; 0x64
 8004ba8:	d9f7      	bls.n	8004b9a <HAL_RCC_OscConfig+0x21e>
 8004baa:	e72c      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bac:	b9ab      	cbnz	r3, 8004bda <HAL_RCC_OscConfig+0x25e>
 8004bae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	672b      	str	r3, [r5, #112]	; 0x70
 8004bba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004bc2:	f7fe f99d 	bl	8002f00 <HAL_GetTick>
 8004bc6:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004bca:	0798      	lsls	r0, r3, #30
 8004bcc:	d5d3      	bpl.n	8004b76 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fe f997 	bl	8002f00 <HAL_GetTick>
 8004bd2:	1bc0      	subs	r0, r0, r7
 8004bd4:	4540      	cmp	r0, r8
 8004bd6:	d9f7      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x24c>
 8004bd8:	e715      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004bde:	d103      	bne.n	8004be8 <HAL_RCC_OscConfig+0x26c>
 8004be0:	f043 0304 	orr.w	r3, r3, #4
 8004be4:	672b      	str	r3, [r5, #112]	; 0x70
 8004be6:	e7b9      	b.n	8004b5c <HAL_RCC_OscConfig+0x1e0>
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	672b      	str	r3, [r5, #112]	; 0x70
 8004bee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004bf0:	f023 0304 	bic.w	r3, r3, #4
 8004bf4:	e7b5      	b.n	8004b62 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fe f983 	bl	8002f00 <HAL_GetTick>
 8004bfa:	eba0 0008 	sub.w	r0, r0, r8
 8004bfe:	42a8      	cmp	r0, r5
 8004c00:	d9b6      	bls.n	8004b70 <HAL_RCC_OscConfig+0x1f4>
 8004c02:	e700      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c0c:	4d38      	ldr	r5, [pc, #224]	; (8004cf0 <HAL_RCC_OscConfig+0x374>)
 8004c0e:	68ab      	ldr	r3, [r5, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d041      	beq.n	8004c9c <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8004c18:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c1a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c20:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c22:	d12e      	bne.n	8004c82 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8004c24:	f7fe f96c 	bl	8002f00 <HAL_GetTick>
 8004c28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2a:	682b      	ldr	r3, [r5, #0]
 8004c2c:	0199      	lsls	r1, r3, #6
 8004c2e:	d422      	bmi.n	8004c76 <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c30:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c3c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004c40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c48:	4c29      	ldr	r4, [pc, #164]	; (8004cf0 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c52:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004c5c:	f7fe f950 	bl	8002f00 <HAL_GetTick>
 8004c60:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	019a      	lsls	r2, r3, #6
 8004c66:	f53f aea1 	bmi.w	80049ac <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6a:	f7fe f949 	bl	8002f00 <HAL_GetTick>
 8004c6e:	1b40      	subs	r0, r0, r5
 8004c70:	2802      	cmp	r0, #2
 8004c72:	d9f6      	bls.n	8004c62 <HAL_RCC_OscConfig+0x2e6>
 8004c74:	e6c7      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c76:	f7fe f943 	bl	8002f00 <HAL_GetTick>
 8004c7a:	1b80      	subs	r0, r0, r6
 8004c7c:	2802      	cmp	r0, #2
 8004c7e:	d9d4      	bls.n	8004c2a <HAL_RCC_OscConfig+0x2ae>
 8004c80:	e6c1      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8004c82:	f7fe f93d 	bl	8002f00 <HAL_GetTick>
 8004c86:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	019b      	lsls	r3, r3, #6
 8004c8c:	f57f ae8e 	bpl.w	80049ac <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fe f936 	bl	8002f00 <HAL_GetTick>
 8004c94:	1b00      	subs	r0, r0, r4
 8004c96:	2802      	cmp	r0, #2
 8004c98:	d9f6      	bls.n	8004c88 <HAL_RCC_OscConfig+0x30c>
 8004c9a:	e6b4      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8004c9e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca0:	f43f aeb2 	beq.w	8004a08 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca8:	69e1      	ldr	r1, [r4, #28]
 8004caa:	428a      	cmp	r2, r1
 8004cac:	f47f ae6a 	bne.w	8004984 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb4:	6a21      	ldr	r1, [r4, #32]
 8004cb6:	428a      	cmp	r2, r1
 8004cb8:	f47f ae64 	bne.w	8004984 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cbc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004cc8:	f47f ae5c 	bne.w	8004984 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ccc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004cce:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004cd2:	0852      	lsrs	r2, r2, #1
 8004cd4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cd6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004cda:	f47f ae53 	bne.w	8004984 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ce0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ce4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8004ce8:	bf14      	ite	ne
 8004cea:	2001      	movne	r0, #1
 8004cec:	2000      	moveq	r0, #0
 8004cee:	e68b      	b.n	8004a08 <HAL_RCC_OscConfig+0x8c>
 8004cf0:	40023800 	.word	0x40023800

08004cf4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf4:	4913      	ldr	r1, [pc, #76]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004cf6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf8:	688b      	ldr	r3, [r1, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d003      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x16>
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d06:	4810      	ldr	r0, [pc, #64]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8004d08:	e000      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8004d0a:	4810      	ldr	r0, [pc, #64]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x58>)
}
 8004d0c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d0e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d10:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d12:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d18:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004d20:	bf1a      	itte	ne
 8004d22:	480a      	ldrne	r0, [pc, #40]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x58>)
 8004d24:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d26:	4808      	ldreq	r0, [pc, #32]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x54>)
 8004d28:	fba1 0100 	umull	r0, r1, r1, r0
 8004d2c:	f7fb fac0 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x50>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004d38:	3301      	adds	r3, #1
 8004d3a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8004d3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d40:	e7e4      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x18>
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	017d7840 	.word	0x017d7840

08004d50 <HAL_RCC_ClockConfig>:
{
 8004d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d54:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004d56:	4604      	mov	r4, r0
 8004d58:	b910      	cbnz	r0, 8004d60 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004d5a:	2001      	movs	r0, #1
}
 8004d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d60:	4a45      	ldr	r2, [pc, #276]	; (8004e78 <HAL_RCC_ClockConfig+0x128>)
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	428b      	cmp	r3, r1
 8004d6a:	d328      	bcc.n	8004dbe <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d6c:	6821      	ldr	r1, [r4, #0]
 8004d6e:	078f      	lsls	r7, r1, #30
 8004d70:	d430      	bmi.n	8004dd4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d72:	07c8      	lsls	r0, r1, #31
 8004d74:	d443      	bmi.n	8004dfe <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d76:	4a40      	ldr	r2, [pc, #256]	; (8004e78 <HAL_RCC_ClockConfig+0x128>)
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	42ab      	cmp	r3, r5
 8004d80:	d866      	bhi.n	8004e50 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d82:	6822      	ldr	r2, [r4, #0]
 8004d84:	0751      	lsls	r1, r2, #29
 8004d86:	d46f      	bmi.n	8004e68 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d88:	0713      	lsls	r3, r2, #28
 8004d8a:	d507      	bpl.n	8004d9c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d8c:	4a3b      	ldr	r2, [pc, #236]	; (8004e7c <HAL_RCC_ClockConfig+0x12c>)
 8004d8e:	6921      	ldr	r1, [r4, #16]
 8004d90:	6893      	ldr	r3, [r2, #8]
 8004d92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004d96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d9a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d9c:	f7ff ffaa 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004da0:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <HAL_RCC_ClockConfig+0x12c>)
 8004da2:	4a37      	ldr	r2, [pc, #220]	; (8004e80 <HAL_RCC_ClockConfig+0x130>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004daa:	5cd3      	ldrb	r3, [r2, r3]
 8004dac:	40d8      	lsrs	r0, r3
 8004dae:	4b35      	ldr	r3, [pc, #212]	; (8004e84 <HAL_RCC_ClockConfig+0x134>)
 8004db0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004db2:	4b35      	ldr	r3, [pc, #212]	; (8004e88 <HAL_RCC_ClockConfig+0x138>)
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	f7fe f85f 	bl	8002e78 <HAL_InitTick>
  return HAL_OK;
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e7ce      	b.n	8004d5c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	f023 030f 	bic.w	r3, r3, #15
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc8:	6813      	ldr	r3, [r2, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	428b      	cmp	r3, r1
 8004dd0:	d1c3      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xa>
 8004dd2:	e7cb      	b.n	8004d6c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	f011 0f04 	tst.w	r1, #4
 8004dd8:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <HAL_RCC_ClockConfig+0x12c>)
 8004dda:	d003      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004de2:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de4:	070e      	lsls	r6, r1, #28
 8004de6:	d503      	bpl.n	8004df0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004dee:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	68a0      	ldr	r0, [r4, #8]
 8004df4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004df8:	4302      	orrs	r2, r0
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	e7b9      	b.n	8004d72 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dfe:	6861      	ldr	r1, [r4, #4]
 8004e00:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_RCC_ClockConfig+0x12c>)
 8004e02:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e04:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e06:	d11b      	bne.n	8004e40 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e08:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0c:	d0a5      	beq.n	8004d5a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e10:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e14:	4e19      	ldr	r6, [pc, #100]	; (8004e7c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e16:	f022 0203 	bic.w	r2, r2, #3
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004e1e:	f7fe f86f 	bl	8002f00 <HAL_GetTick>
 8004e22:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e24:	68b3      	ldr	r3, [r6, #8]
 8004e26:	6862      	ldr	r2, [r4, #4]
 8004e28:	f003 030c 	and.w	r3, r3, #12
 8004e2c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e30:	d0a1      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e32:	f7fe f865 	bl	8002f00 <HAL_GetTick>
 8004e36:	1bc0      	subs	r0, r0, r7
 8004e38:	4540      	cmp	r0, r8
 8004e3a:	d9f3      	bls.n	8004e24 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004e3c:	2003      	movs	r0, #3
 8004e3e:	e78d      	b.n	8004d5c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e40:	2902      	cmp	r1, #2
 8004e42:	d102      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e44:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004e48:	e7e0      	b.n	8004e0c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	f012 0f02 	tst.w	r2, #2
 8004e4e:	e7dd      	b.n	8004e0c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	f023 030f 	bic.w	r3, r3, #15
 8004e56:	432b      	orrs	r3, r5
 8004e58:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	42ab      	cmp	r3, r5
 8004e62:	f47f af7a 	bne.w	8004d5a <HAL_RCC_ClockConfig+0xa>
 8004e66:	e78c      	b.n	8004d82 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e68:	4904      	ldr	r1, [pc, #16]	; (8004e7c <HAL_RCC_ClockConfig+0x12c>)
 8004e6a:	68e0      	ldr	r0, [r4, #12]
 8004e6c:	688b      	ldr	r3, [r1, #8]
 8004e6e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004e72:	4303      	orrs	r3, r0
 8004e74:	608b      	str	r3, [r1, #8]
 8004e76:	e787      	b.n	8004d88 <HAL_RCC_ClockConfig+0x38>
 8004e78:	40023c00 	.word	0x40023c00
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	080112fe 	.word	0x080112fe
 8004e84:	20000120 	.word	0x20000120
 8004e88:	20000128 	.word	0x20000128

08004e8c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004e8c:	4b01      	ldr	r3, [pc, #4]	; (8004e94 <HAL_RCC_GetHCLKFreq+0x8>)
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000120 	.word	0x20000120

08004e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e9c:	6802      	ldr	r2, [r0, #0]
{
 8004e9e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ea0:	f012 0601 	ands.w	r6, r2, #1
 8004ea4:	d00b      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ea6:	4bb8      	ldr	r3, [pc, #736]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ea8:	6899      	ldr	r1, [r3, #8]
 8004eaa:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8004eae:	6099      	str	r1, [r3, #8]
 8004eb0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8004eb2:	6899      	ldr	r1, [r3, #8]
 8004eb4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004eb6:	fab6 f686 	clz	r6, r6
 8004eba:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ebc:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ebe:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8004ec2:	d012      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ec4:	49b0      	ldr	r1, [pc, #704]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ec6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004ec8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ecc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8004ed4:	bf08      	it	eq
 8004ed6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed8:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004edc:	bf16      	itet	ne
 8004ede:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8004ee2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ee4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ee6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004eea:	02d1      	lsls	r1, r2, #11
 8004eec:	d510      	bpl.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004eee:	48a6      	ldr	r0, [pc, #664]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ef0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004ef2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ef6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004efa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004efe:	ea43 0301 	orr.w	r3, r3, r1
 8004f02:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f06:	f000 8185 	beq.w	8005214 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	bf08      	it	eq
 8004f0e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004f10:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8004f14:	bf18      	it	ne
 8004f16:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f18:	0692      	lsls	r2, r2, #26
 8004f1a:	d531      	bpl.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f1c:	4b9a      	ldr	r3, [pc, #616]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f1e:	4f9b      	ldr	r7, [pc, #620]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f38:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fd ffe1 	bl	8002f00 <HAL_GetTick>
 8004f3e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	05db      	lsls	r3, r3, #23
 8004f44:	f140 8168 	bpl.w	8005218 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f48:	4f8f      	ldr	r7, [pc, #572]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f4c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004f50:	f040 816d 	bne.w	800522e <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f56:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004f5a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004f5e:	4a8a      	ldr	r2, [pc, #552]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f60:	f040 818b 	bne.w	800527a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004f64:	6891      	ldr	r1, [r2, #8]
 8004f66:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004f6a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004f6e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004f72:	4301      	orrs	r1, r0
 8004f74:	6091      	str	r1, [r2, #8]
 8004f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	06da      	lsls	r2, r3, #27
 8004f84:	d50c      	bpl.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f86:	4a80      	ldr	r2, [pc, #512]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f88:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004f8c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004f90:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8004f94:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004f98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f9a:	4301      	orrs	r1, r0
 8004f9c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fa0:	045f      	lsls	r7, r3, #17
 8004fa2:	d508      	bpl.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fa4:	4978      	ldr	r1, [pc, #480]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fa6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004fa8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004fac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004fb0:	4302      	orrs	r2, r0
 8004fb2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fb6:	0418      	lsls	r0, r3, #16
 8004fb8:	d508      	bpl.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fba:	4973      	ldr	r1, [pc, #460]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fbc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004fbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004fc2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004fc6:	4302      	orrs	r2, r0
 8004fc8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fcc:	03d9      	lsls	r1, r3, #15
 8004fce:	d508      	bpl.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fd0:	496d      	ldr	r1, [pc, #436]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fd2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004fd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004fd8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004fdc:	4302      	orrs	r2, r0
 8004fde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fe2:	039a      	lsls	r2, r3, #14
 8004fe4:	d508      	bpl.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fe6:	4968      	ldr	r1, [pc, #416]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fe8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004fea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004fee:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004ff2:	4302      	orrs	r2, r0
 8004ff4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ff8:	065f      	lsls	r7, r3, #25
 8004ffa:	d508      	bpl.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ffc:	4962      	ldr	r1, [pc, #392]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ffe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005000:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005004:	f022 0203 	bic.w	r2, r2, #3
 8005008:	4302      	orrs	r2, r0
 800500a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800500e:	0618      	lsls	r0, r3, #24
 8005010:	d508      	bpl.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005012:	495d      	ldr	r1, [pc, #372]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005014:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005016:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800501a:	f022 020c 	bic.w	r2, r2, #12
 800501e:	4302      	orrs	r2, r0
 8005020:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005024:	05d9      	lsls	r1, r3, #23
 8005026:	d508      	bpl.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005028:	4957      	ldr	r1, [pc, #348]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800502a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800502c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005030:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005034:	4302      	orrs	r2, r0
 8005036:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800503a:	059a      	lsls	r2, r3, #22
 800503c:	d508      	bpl.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800503e:	4952      	ldr	r1, [pc, #328]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005040:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005042:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005046:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800504a:	4302      	orrs	r2, r0
 800504c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005050:	055f      	lsls	r7, r3, #21
 8005052:	d508      	bpl.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005054:	494c      	ldr	r1, [pc, #304]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005058:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800505c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005060:	4302      	orrs	r2, r0
 8005062:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005066:	0518      	lsls	r0, r3, #20
 8005068:	d508      	bpl.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800506a:	4947      	ldr	r1, [pc, #284]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800506c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005072:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005076:	4302      	orrs	r2, r0
 8005078:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800507c:	04d9      	lsls	r1, r3, #19
 800507e:	d508      	bpl.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005080:	4941      	ldr	r1, [pc, #260]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005082:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005084:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005088:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800508c:	4302      	orrs	r2, r0
 800508e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005092:	049a      	lsls	r2, r3, #18
 8005094:	d508      	bpl.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005096:	493c      	ldr	r1, [pc, #240]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005098:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800509a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800509e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80050a2:	4302      	orrs	r2, r0
 80050a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050a8:	025f      	lsls	r7, r3, #9
 80050aa:	d508      	bpl.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050ac:	4936      	ldr	r1, [pc, #216]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ae:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80050b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80050b4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80050b8:	4302      	orrs	r2, r0
 80050ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050be:	0298      	lsls	r0, r3, #10
 80050c0:	d50c      	bpl.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050c2:	4831      	ldr	r0, [pc, #196]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050c4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80050c6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80050ca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050ce:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80050d2:	bf08      	it	eq
 80050d4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050d6:	430a      	orrs	r2, r1
 80050d8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80050dc:	f013 0f08 	tst.w	r3, #8
 80050e0:	bf18      	it	ne
 80050e2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050e4:	0359      	lsls	r1, r3, #13
 80050e6:	d508      	bpl.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050e8:	4927      	ldr	r1, [pc, #156]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ea:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80050ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80050f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80050f4:	4302      	orrs	r2, r0
 80050f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050fa:	021a      	lsls	r2, r3, #8
 80050fc:	d509      	bpl.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050fe:	4922      	ldr	r1, [pc, #136]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005100:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005104:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005108:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800510c:	4302      	orrs	r2, r0
 800510e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005112:	2e01      	cmp	r6, #1
 8005114:	f000 80b5 	beq.w	8005282 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800511c:	f000 80b1 	beq.w	8005282 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005120:	2d01      	cmp	r5, #1
 8005122:	d175      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005124:	4d18      	ldr	r5, [pc, #96]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005126:	682b      	ldr	r3, [r5, #0]
 8005128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512e:	f7fd fee7 	bl	8002f00 <HAL_GetTick>
 8005132:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	009f      	lsls	r7, r3, #2
 8005138:	f100 8127 	bmi.w	800538a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800513c:	6821      	ldr	r1, [r4, #0]
 800513e:	030e      	lsls	r6, r1, #12
 8005140:	d501      	bpl.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8005142:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005144:	b11b      	cbz	r3, 800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005146:	02cd      	lsls	r5, r1, #11
 8005148:	d522      	bpl.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800514a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800514c:	bb03      	cbnz	r3, 8005190 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800514e:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005150:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005154:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800515c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005160:	4303      	orrs	r3, r0
 8005162:	6960      	ldr	r0, [r4, #20]
 8005164:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005168:	69a0      	ldr	r0, [r4, #24]
 800516a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800516e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005172:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005176:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005178:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800517c:	3801      	subs	r0, #1
 800517e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005182:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005186:	e003      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8005188:	40023800 	.word	0x40023800
 800518c:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005190:	0288      	lsls	r0, r1, #10
 8005192:	d515      	bpl.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005194:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800519a:	d111      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800519c:	4a82      	ldr	r2, [pc, #520]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800519e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051a2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80051aa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80051ae:	4303      	orrs	r3, r0
 80051b0:	6960      	ldr	r0, [r4, #20]
 80051b2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80051b6:	6a20      	ldr	r0, [r4, #32]
 80051b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80051bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051c0:	070a      	lsls	r2, r1, #28
 80051c2:	d519      	bpl.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051c4:	4978      	ldr	r1, [pc, #480]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80051c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051ce:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80051d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051d6:	4313      	orrs	r3, r2
 80051d8:	6962      	ldr	r2, [r4, #20]
 80051da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80051de:	69e2      	ldr	r2, [r4, #28]
 80051e0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051e8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80051ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051f8:	4c6b      	ldr	r4, [pc, #428]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005200:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005202:	f7fd fe7d 	bl	8002f00 <HAL_GetTick>
 8005206:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	f140 80c4 	bpl.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005210:	2000      	movs	r0, #0
 8005212:	e009      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8005214:	2601      	movs	r6, #1
 8005216:	e67b      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005218:	f7fd fe72 	bl	8002f00 <HAL_GetTick>
 800521c:	eba0 0008 	sub.w	r0, r0, r8
 8005220:	2864      	cmp	r0, #100	; 0x64
 8005222:	f67f ae8d 	bls.w	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8005226:	2003      	movs	r0, #3
}
 8005228:	b003      	add	sp, #12
 800522a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800522e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005230:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005234:	429a      	cmp	r2, r3
 8005236:	f43f ae8d 	beq.w	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800523a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800523c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800523e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005242:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005246:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005248:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800524a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800524e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005250:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005254:	07d8      	lsls	r0, r3, #31
 8005256:	f57f ae7d 	bpl.w	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800525a:	f7fd fe51 	bl	8002f00 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800525e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005262:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005266:	0799      	lsls	r1, r3, #30
 8005268:	f53f ae74 	bmi.w	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7fd fe48 	bl	8002f00 <HAL_GetTick>
 8005270:	eba0 0008 	sub.w	r0, r0, r8
 8005274:	4548      	cmp	r0, r9
 8005276:	d9f5      	bls.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005278:	e7d5      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800527a:	6891      	ldr	r1, [r2, #8]
 800527c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005280:	e678      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8005282:	4e49      	ldr	r6, [pc, #292]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005284:	6833      	ldr	r3, [r6, #0]
 8005286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800528a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800528c:	f7fd fe38 	bl	8002f00 <HAL_GetTick>
 8005290:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005292:	6833      	ldr	r3, [r6, #0]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	d472      	bmi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005298:	6822      	ldr	r2, [r4, #0]
 800529a:	07d7      	lsls	r7, r2, #31
 800529c:	d512      	bpl.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800529e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052a0:	b983      	cbnz	r3, 80052c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052a2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052a6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052ae:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80052b2:	430b      	orrs	r3, r1
 80052b4:	6861      	ldr	r1, [r4, #4]
 80052b6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80052ba:	68a1      	ldr	r1, [r4, #8]
 80052bc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80052c0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052c4:	0316      	lsls	r6, r2, #12
 80052c6:	d503      	bpl.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 80052c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ce:	d005      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x444>
 80052d0:	02d0      	lsls	r0, r2, #11
 80052d2:	d51e      	bpl.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052da:	d11a      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052dc:	4932      	ldr	r1, [pc, #200]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80052de:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052e2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052ea:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80052ee:	4303      	orrs	r3, r0
 80052f0:	6860      	ldr	r0, [r4, #4]
 80052f2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80052f6:	68e0      	ldr	r0, [r4, #12]
 80052f8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80052fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005300:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005306:	f020 001f 	bic.w	r0, r0, #31
 800530a:	3b01      	subs	r3, #1
 800530c:	4303      	orrs	r3, r0
 800530e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005312:	01d1      	lsls	r1, r2, #7
 8005314:	d511      	bpl.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005316:	4924      	ldr	r1, [pc, #144]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005318:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800531c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005320:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005324:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005328:	4303      	orrs	r3, r0
 800532a:	6860      	ldr	r0, [r4, #4]
 800532c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005330:	6920      	ldr	r0, [r4, #16]
 8005332:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005336:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800533a:	0192      	lsls	r2, r2, #6
 800533c:	d50d      	bpl.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	6862      	ldr	r2, [r4, #4]
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005348:	68e2      	ldr	r2, [r4, #12]
 800534a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800534e:	68a2      	ldr	r2, [r4, #8]
 8005350:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005354:	4a14      	ldr	r2, [pc, #80]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005356:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800535a:	4e13      	ldr	r6, [pc, #76]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800535c:	6833      	ldr	r3, [r6, #0]
 800535e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005362:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005364:	f7fd fdcc 	bl	8002f00 <HAL_GetTick>
 8005368:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800536a:	6833      	ldr	r3, [r6, #0]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	f53f aed7 	bmi.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005372:	f7fd fdc5 	bl	8002f00 <HAL_GetTick>
 8005376:	1bc0      	subs	r0, r0, r7
 8005378:	2864      	cmp	r0, #100	; 0x64
 800537a:	d9f6      	bls.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800537c:	e753      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800537e:	f7fd fdbf 	bl	8002f00 <HAL_GetTick>
 8005382:	1bc0      	subs	r0, r0, r7
 8005384:	2864      	cmp	r0, #100	; 0x64
 8005386:	d984      	bls.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005388:	e74d      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800538a:	f7fd fdb9 	bl	8002f00 <HAL_GetTick>
 800538e:	1b80      	subs	r0, r0, r6
 8005390:	2864      	cmp	r0, #100	; 0x64
 8005392:	f67f aecf 	bls.w	8005134 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8005396:	e746      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005398:	f7fd fdb2 	bl	8002f00 <HAL_GetTick>
 800539c:	1b40      	subs	r0, r0, r5
 800539e:	2864      	cmp	r0, #100	; 0x64
 80053a0:	f67f af32 	bls.w	8005208 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80053a4:	e73f      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80053a6:	bf00      	nop
 80053a8:	40023800 	.word	0x40023800

080053ac <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80053ac:	4770      	bx	lr

080053ae <HAL_SDRAM_Init>:
{   
 80053ae:	b538      	push	{r3, r4, r5, lr}
 80053b0:	460d      	mov	r5, r1
  if(hsdram == NULL)
 80053b2:	4604      	mov	r4, r0
 80053b4:	b1c8      	cbz	r0, 80053ea <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80053b6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80053ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053be:	b91b      	cbnz	r3, 80053c8 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 80053c0:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80053c4:	f7ff fff2 	bl	80053ac <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053c8:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80053ca:	1d21      	adds	r1, r4, #4
 80053cc:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053ce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80053d2:	f000 f835 	bl	8005440 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	4629      	mov	r1, r5
 80053da:	6820      	ldr	r0, [r4, #0]
 80053dc:	f000 f866 	bl	80054ac <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 80053e0:	2301      	movs	r3, #1
  return HAL_OK;
 80053e2:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80053e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80053ea:	2001      	movs	r0, #1
 80053ec:	e7fc      	b.n	80053e8 <HAL_SDRAM_Init+0x3a>

080053ee <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80053ee:	b538      	push	{r3, r4, r5, lr}
 80053f0:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80053f2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 80053f6:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80053f8:	b2c0      	uxtb	r0, r0
 80053fa:	2802      	cmp	r0, #2
 80053fc:	d00d      	beq.n	800541a <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053fe:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005400:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005402:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005406:	f000 f895 	bl	8005534 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800540a:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800540c:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800540e:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005410:	bf0c      	ite	eq
 8005412:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005414:	2301      	movne	r3, #1
 8005416:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800541a:	bd38      	pop	{r3, r4, r5, pc}

0800541c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800541c:	b510      	push	{r4, lr}
 800541e:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005420:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8005424:	b2c0      	uxtb	r0, r0
 8005426:	2802      	cmp	r0, #2
 8005428:	d009      	beq.n	800543e <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800542a:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800542c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800542e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005432:	f000 f892 	bl	800555a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005436:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8005438:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800543a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800543e:	bd10      	pop	{r4, pc}

08005440 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005446:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800544a:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800544e:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8005452:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005456:	6809      	ldr	r1, [r1, #0]
 8005458:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800545a:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800545c:	2901      	cmp	r1, #1
 800545e:	4912      	ldr	r1, [pc, #72]	; (80054a8 <FMC_SDRAM_Init+0x68>)
 8005460:	d00f      	beq.n	8005482 <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005462:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005464:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005466:	432a      	orrs	r2, r5
 8005468:	ea42 0308 	orr.w	r3, r2, r8
 800546c:	ea43 030e 	orr.w	r3, r3, lr
 8005470:	ea43 030c 	orr.w	r3, r3, ip
 8005474:	433b      	orrs	r3, r7
 8005476:	4333      	orrs	r3, r6
 8005478:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800547a:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800547c:	2000      	movs	r0, #0
 800547e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005482:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005484:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005486:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800548a:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800548c:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005490:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005492:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005496:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005498:	ea42 020c 	orr.w	r2, r2, ip
 800549c:	433a      	orrs	r2, r7
 800549e:	4332      	orrs	r2, r6
 80054a0:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80054a2:	6042      	str	r2, [r0, #4]
 80054a4:	e7ea      	b.n	800547c <FMC_SDRAM_Init+0x3c>
 80054a6:	bf00      	nop
 80054a8:	ffff8000 	.word	0xffff8000

080054ac <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80054ac:	68cb      	ldr	r3, [r1, #12]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80054ae:	2a01      	cmp	r2, #1
{
 80054b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b2:	680c      	ldr	r4, [r1, #0]
 80054b4:	f103 37ff 	add.w	r7, r3, #4294967295
 80054b8:	694b      	ldr	r3, [r1, #20]
 80054ba:	688e      	ldr	r6, [r1, #8]
 80054bc:	f104 3cff 	add.w	ip, r4, #4294967295
 80054c0:	690d      	ldr	r5, [r1, #16]
 80054c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80054c6:	684c      	ldr	r4, [r1, #4]
 80054c8:	f106 36ff 	add.w	r6, r6, #4294967295
 80054cc:	6989      	ldr	r1, [r1, #24]
 80054ce:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80054d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80054d6:	f105 35ff 	add.w	r5, r5, #4294967295
 80054da:	f101 31ff 	add.w	r1, r1, #4294967295
 80054de:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80054e2:	ea4f 1404 	mov.w	r4, r4, lsl #4
 80054e6:	ea4f 4505 	mov.w	r5, r5, lsl #16
 80054ea:	ea4f 6101 	mov.w	r1, r1, lsl #24
 80054ee:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 80054f2:	d00c      	beq.n	800550e <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80054f4:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80054f8:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80054fa:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80054fc:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005500:	4333      	orrs	r3, r6
 8005502:	432b      	orrs	r3, r5
 8005504:	430b      	orrs	r3, r1
 8005506:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005508:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800550a:	2000      	movs	r0, #0
 800550c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800550e:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005510:	ea44 0206 	orr.w	r2, r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005514:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005518:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800551c:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005520:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005522:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005524:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005526:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005528:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800552c:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800552e:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005530:	60c2      	str	r2, [r0, #12]
 8005532:	e7ea      	b.n	800550a <FMC_SDRAM_Timing_Init+0x5e>

08005534 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005534:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 8005538:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800553a:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 800553c:	68ca      	ldr	r2, [r1, #12]
{
 800553e:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8005540:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005542:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005546:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 8005548:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800554a:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800554c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005550:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8005552:	9b01      	ldr	r3, [sp, #4]
 8005554:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8005556:	b002      	add	sp, #8
 8005558:	bd10      	pop	{r4, pc}

0800555a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800555a:	6943      	ldr	r3, [r0, #20]
 800555c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8005560:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8005562:	2000      	movs	r0, #0
 8005564:	4770      	bx	lr

08005566 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8005566:	7943      	ldrb	r3, [r0, #5]
 8005568:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 800556a:	bf1f      	itttt	ne
 800556c:	2300      	movne	r3, #0
    dhcp->state = new_state;
 800556e:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8005570:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8005572:	8103      	strhne	r3, [r0, #8]
  }
}
 8005574:	4770      	bx	lr
	...

08005578 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800557a:	1c85      	adds	r5, r0, #2
{
 800557c:	4604      	mov	r4, r0
 800557e:	460e      	mov	r6, r1
 8005580:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8005582:	2d44      	cmp	r5, #68	; 0x44
 8005584:	d906      	bls.n	8005594 <dhcp_option_short+0x1c>
 8005586:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <dhcp_option_short+0x2c>)
 8005588:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800558c:	4906      	ldr	r1, [pc, #24]	; (80055a8 <dhcp_option_short+0x30>)
 800558e:	4807      	ldr	r0, [pc, #28]	; (80055ac <dhcp_option_short+0x34>)
 8005590:	f007 f89c 	bl	800c6cc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8005594:	0a3b      	lsrs	r3, r7, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 8005596:	b2a8      	uxth	r0, r5
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8005598:	5533      	strb	r3, [r6, r4]
 800559a:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800559c:	b2a4      	uxth	r4, r4
 800559e:	5537      	strb	r7, [r6, r4]
}
 80055a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a2:	bf00      	nop
 80055a4:	080115fb 	.word	0x080115fb
 80055a8:	08011653 	.word	0x08011653
 80055ac:	0801153a 	.word	0x0801153a

080055b0 <dhcp_option>:
{
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80055b4:	3302      	adds	r3, #2
{
 80055b6:	4604      	mov	r4, r0
 80055b8:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80055ba:	4403      	add	r3, r0
{
 80055bc:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80055be:	2b44      	cmp	r3, #68	; 0x44
 80055c0:	d906      	bls.n	80055d0 <dhcp_option+0x20>
 80055c2:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <dhcp_option+0x30>)
 80055c4:	f240 529a 	movw	r2, #1434	; 0x59a
 80055c8:	4906      	ldr	r1, [pc, #24]	; (80055e4 <dhcp_option+0x34>)
 80055ca:	4807      	ldr	r0, [pc, #28]	; (80055e8 <dhcp_option+0x38>)
 80055cc:	f007 f87e 	bl	800c6cc <iprintf>
  options[options_out_len++] = option_type;
 80055d0:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 80055d2:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 80055d4:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 80055d6:	b29b      	uxth	r3, r3
}
 80055d8:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 80055da:	54ee      	strb	r6, [r5, r3]
}
 80055dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055de:	bf00      	nop
 80055e0:	080115fb 	.word	0x080115fb
 80055e4:	0801168e 	.word	0x0801168e
 80055e8:	0801153a 	.word	0x0801153a

080055ec <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80055ec:	2843      	cmp	r0, #67	; 0x43
{
 80055ee:	b570      	push	{r4, r5, r6, lr}
 80055f0:	4604      	mov	r4, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80055f6:	d906      	bls.n	8005606 <dhcp_option_byte+0x1a>
 80055f8:	4b05      	ldr	r3, [pc, #20]	; (8005610 <dhcp_option_byte+0x24>)
 80055fa:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80055fe:	4905      	ldr	r1, [pc, #20]	; (8005614 <dhcp_option_byte+0x28>)
 8005600:	4805      	ldr	r0, [pc, #20]	; (8005618 <dhcp_option_byte+0x2c>)
 8005602:	f007 f863 	bl	800c6cc <iprintf>
  options[options_out_len++] = value;
 8005606:	1c60      	adds	r0, r4, #1
 8005608:	552e      	strb	r6, [r5, r4]
}
 800560a:	b280      	uxth	r0, r0
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	bf00      	nop
 8005610:	080115fb 	.word	0x080115fb
 8005614:	080116d0 	.word	0x080116d0
 8005618:	0801153a 	.word	0x0801153a

0800561c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800561e:	1d07      	adds	r7, r0, #4
{
 8005620:	4604      	mov	r4, r0
 8005622:	460d      	mov	r5, r1
 8005624:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8005626:	2f44      	cmp	r7, #68	; 0x44
 8005628:	d906      	bls.n	8005638 <dhcp_option_long+0x1c>
 800562a:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <dhcp_option_long+0x3c>)
 800562c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8005630:	490a      	ldr	r1, [pc, #40]	; (800565c <dhcp_option_long+0x40>)
 8005632:	480b      	ldr	r0, [pc, #44]	; (8005660 <dhcp_option_long+0x44>)
 8005634:	f007 f84a 	bl	800c6cc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8005638:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800563a:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800563c:	552b      	strb	r3, [r5, r4]
 800563e:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 8005640:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8005642:	b29b      	uxth	r3, r3
 8005644:	54ea      	strb	r2, [r5, r3]
 8005646:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005648:	3403      	adds	r4, #3
 800564a:	0a32      	lsrs	r2, r6, #8
 800564c:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800564e:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005650:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8005652:	552e      	strb	r6, [r5, r4]
}
 8005654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005656:	bf00      	nop
 8005658:	080115fb 	.word	0x080115fb
 800565c:	08011705 	.word	0x08011705
 8005660:	0801153a 	.word	0x0801153a

08005664 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8005664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005668:	460e      	mov	r6, r1
 800566a:	4690      	mov	r8, r2
 800566c:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800566e:	4605      	mov	r5, r0
 8005670:	b950      	cbnz	r0, 8005688 <dhcp_create_msg+0x24>
 8005672:	462f      	mov	r7, r5
 8005674:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <dhcp_create_msg+0x10c>)
 8005676:	f240 7269 	movw	r2, #1897	; 0x769
 800567a:	493e      	ldr	r1, [pc, #248]	; (8005774 <dhcp_create_msg+0x110>)
 800567c:	483e      	ldr	r0, [pc, #248]	; (8005778 <dhcp_create_msg+0x114>)
 800567e:	f007 f825 	bl	800c6cc <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 8005682:	4638      	mov	r0, r7
 8005684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8005688:	b941      	cbnz	r1, 800569c <dhcp_create_msg+0x38>
 800568a:	4b39      	ldr	r3, [pc, #228]	; (8005770 <dhcp_create_msg+0x10c>)
 800568c:	f240 726a 	movw	r2, #1898	; 0x76a
 8005690:	493a      	ldr	r1, [pc, #232]	; (800577c <dhcp_create_msg+0x118>)
 8005692:	4637      	mov	r7, r6
 8005694:	4838      	ldr	r0, [pc, #224]	; (8005778 <dhcp_create_msg+0x114>)
 8005696:	f007 f819 	bl	800c6cc <iprintf>
 800569a:	e7f2      	b.n	8005682 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800569c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80056a0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80056a4:	2036      	movs	r0, #54	; 0x36
 80056a6:	f002 fff5 	bl	8008694 <pbuf_alloc>
  if (p_out == NULL) {
 80056aa:	4607      	mov	r7, r0
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d0e8      	beq.n	8005682 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80056b0:	8943      	ldrh	r3, [r0, #10]
 80056b2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80056b6:	d206      	bcs.n	80056c6 <dhcp_create_msg+0x62>
 80056b8:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <dhcp_create_msg+0x10c>)
 80056ba:	f240 7272 	movw	r2, #1906	; 0x772
 80056be:	4930      	ldr	r1, [pc, #192]	; (8005780 <dhcp_create_msg+0x11c>)
 80056c0:	482d      	ldr	r0, [pc, #180]	; (8005778 <dhcp_create_msg+0x114>)
 80056c2:	f007 f803 	bl	800c6cc <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80056c6:	f1b8 0f03 	cmp.w	r8, #3
 80056ca:	d102      	bne.n	80056d2 <dhcp_create_msg+0x6e>
 80056cc:	7973      	ldrb	r3, [r6, #5]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d107      	bne.n	80056e2 <dhcp_create_msg+0x7e>
    if (dhcp->tries == 0) {
 80056d2:	79b3      	ldrb	r3, [r6, #6]
 80056d4:	4c2b      	ldr	r4, [pc, #172]	; (8005784 <dhcp_create_msg+0x120>)
 80056d6:	b913      	cbnz	r3, 80056de <dhcp_create_msg+0x7a>
      xid = LWIP_RAND();
 80056d8:	f007 f874 	bl	800c7c4 <rand>
 80056dc:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 80056e2:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80056e4:	f44f 729a 	mov.w	r2, #308	; 0x134
 80056e8:	2100      	movs	r1, #0
 80056ea:	4620      	mov	r0, r4
 80056ec:	f006 ffe6 	bl	800c6bc <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 80056f0:	2301      	movs	r3, #1
 80056f2:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80056f4:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 80056f6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80056fa:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80056fc:	6830      	ldr	r0, [r6, #0]
 80056fe:	f002 fa2c 	bl	8007b5a <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005702:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8005706:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005708:	d00a      	beq.n	8005720 <dhcp_create_msg+0xbc>
 800570a:	f1a8 0307 	sub.w	r3, r8, #7
 800570e:	2b01      	cmp	r3, #1
 8005710:	d906      	bls.n	8005720 <dhcp_create_msg+0xbc>
 8005712:	f1b8 0f03 	cmp.w	r8, #3
 8005716:	d105      	bne.n	8005724 <dhcp_create_msg+0xc0>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8005718:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800571a:	3b04      	subs	r3, #4
 800571c:	2b01      	cmp	r3, #1
 800571e:	d801      	bhi.n	8005724 <dhcp_create_msg+0xc0>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8005720:	686b      	ldr	r3, [r5, #4]
 8005722:	60e3      	str	r3, [r4, #12]
 8005724:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 8005728:	f104 021c 	add.w	r2, r4, #28
 800572c:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 800572e:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005732:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 8005734:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005738:	d1f9      	bne.n	800572e <dhcp_create_msg+0xca>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800573a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800573e:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005740:	34f0      	adds	r4, #240	; 0xf0
 8005742:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005744:	f804 2c03 	strb.w	r2, [r4, #-3]
 8005748:	2253      	movs	r2, #83	; 0x53
 800574a:	f804 3c04 	strb.w	r3, [r4, #-4]
 800574e:	f804 2c02 	strb.w	r2, [r4, #-2]
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005752:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005754:	f804 3c01 	strb.w	r3, [r4, #-1]
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005758:	2301      	movs	r3, #1
 800575a:	4621      	mov	r1, r4
 800575c:	f7ff ff28 	bl	80055b0 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8005760:	4642      	mov	r2, r8
 8005762:	4621      	mov	r1, r4
 8005764:	f7ff ff42 	bl	80055ec <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 8005768:	f8a9 0000 	strh.w	r0, [r9]
 800576c:	e789      	b.n	8005682 <dhcp_create_msg+0x1e>
 800576e:	bf00      	nop
 8005770:	080115fb 	.word	0x080115fb
 8005774:	0801173f 	.word	0x0801173f
 8005778:	0801153a 	.word	0x0801153a
 800577c:	0801175e 	.word	0x0801175e
 8005780:	0801177c 	.word	0x0801177c
 8005784:	20000440 	.word	0x20000440

08005788 <dhcp_option_trailer>:
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8005788:	1c43      	adds	r3, r0, #1
{
 800578a:	b410      	push	{r4}
  options[options_out_len++] = DHCP_OPTION_END;
 800578c:	b29b      	uxth	r3, r3
 800578e:	24ff      	movs	r4, #255	; 0xff
 8005790:	540c      	strb	r4, [r1, r0]
 8005792:	1e58      	subs	r0, r3, #1
 8005794:	4401      	add	r1, r0
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8005796:	2000      	movs	r0, #0
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8005798:	2b43      	cmp	r3, #67	; 0x43
 800579a:	d907      	bls.n	80057ac <dhcp_option_trailer+0x24>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800579c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80057a0:	4610      	mov	r0, r2
}
 80057a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80057a6:	b289      	uxth	r1, r1
 80057a8:	f002 bff0 	b.w	800878c <pbuf_realloc>
    options[options_out_len++] = 0;
 80057ac:	3301      	adds	r3, #1
 80057ae:	f801 0f01 	strb.w	r0, [r1, #1]!
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	e7f0      	b.n	8005798 <dhcp_option_trailer+0x10>
	...

080057b8 <dhcp_reboot>:
{
 80057b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80057bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 80057be:	b085      	sub	sp, #20
 80057c0:	4680      	mov	r8, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80057c2:	2103      	movs	r1, #3
 80057c4:	4628      	mov	r0, r5
 80057c6:	f7ff fece 	bl	8005566 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80057ca:	f10d 030e 	add.w	r3, sp, #14
 80057ce:	2203      	movs	r2, #3
 80057d0:	4629      	mov	r1, r5
 80057d2:	4640      	mov	r0, r8
 80057d4:	f7ff ff46 	bl	8005664 <dhcp_create_msg>
  if (p_out != NULL) {
 80057d8:	4606      	mov	r6, r0
 80057da:	2800      	cmp	r0, #0
 80057dc:	d066      	beq.n	80058ac <dhcp_reboot+0xf4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80057de:	6844      	ldr	r4, [r0, #4]
 80057e0:	2302      	movs	r3, #2
 80057e2:	2239      	movs	r2, #57	; 0x39
 80057e4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80057e8:	34f0      	adds	r4, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80057ea:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80058bc <dhcp_reboot+0x104>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80057ee:	4621      	mov	r1, r4
 80057f0:	f7ff fede 	bl	80055b0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80057f4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80057f8:	4621      	mov	r1, r4
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80057fa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80057fe:	f7ff febb 	bl	8005578 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005802:	2304      	movs	r3, #4
 8005804:	2232      	movs	r2, #50	; 0x32
 8005806:	4621      	mov	r1, r4
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8005808:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800580c:	f7ff fed0 	bl	80055b0 <dhcp_option>
 8005810:	4607      	mov	r7, r0
 8005812:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005816:	69e8      	ldr	r0, [r5, #28]
 8005818:	f002 f99f 	bl	8007b5a <lwip_htonl>
 800581c:	4621      	mov	r1, r4
 800581e:	4602      	mov	r2, r0
 8005820:	4638      	mov	r0, r7
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005822:	2700      	movs	r7, #0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005824:	f7ff fefa 	bl	800561c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005828:	2303      	movs	r3, #3
 800582a:	2237      	movs	r2, #55	; 0x37
 800582c:	4621      	mov	r1, r4
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800582e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005832:	f7ff febd 	bl	80055b0 <dhcp_option>
 8005836:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800583a:	f819 2007 	ldrb.w	r2, [r9, r7]
 800583e:	3701      	adds	r7, #1
 8005840:	4621      	mov	r1, r4
 8005842:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005846:	f7ff fed1 	bl	80055ec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800584a:	2f03      	cmp	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800584c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005850:	d1f3      	bne.n	800583a <dhcp_reboot+0x82>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8005852:	4621      	mov	r1, r4
 8005854:	4632      	mov	r2, r6
 8005856:	f7ff ff97 	bl	8005788 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800585a:	4816      	ldr	r0, [pc, #88]	; (80058b4 <dhcp_reboot+0xfc>)
 800585c:	f8cd 8000 	str.w	r8, [sp]
 8005860:	2343      	movs	r3, #67	; 0x43
 8005862:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <dhcp_reboot+0x100>)
 8005864:	4631      	mov	r1, r6
 8005866:	6840      	ldr	r0, [r0, #4]
 8005868:	f006 fd84 	bl	800c374 <udp_sendto_if>
 800586c:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800586e:	4630      	mov	r0, r6
 8005870:	f002 feae 	bl	80085d0 <pbuf_free>
  if (dhcp->tries < 255) {
 8005874:	79ab      	ldrb	r3, [r5, #6]
}
 8005876:	4620      	mov	r0, r4
  if (dhcp->tries < 255) {
 8005878:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800587a:	bf1c      	itt	ne
 800587c:	3301      	addne	r3, #1
 800587e:	71ab      	strbne	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8005880:	79ab      	ldrb	r3, [r5, #6]
 8005882:	2b09      	cmp	r3, #9
 8005884:	bf96      	itet	ls
 8005886:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800588a:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800588e:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005892:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8005896:	bf9c      	itt	ls
 8005898:	00db      	lslls	r3, r3, #3
 800589a:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800589c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80058a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80058a4:	812b      	strh	r3, [r5, #8]
}
 80058a6:	b005      	add	sp, #20
 80058a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 80058ac:	f04f 34ff 	mov.w	r4, #4294967295
 80058b0:	e7e0      	b.n	8005874 <dhcp_reboot+0xbc>
 80058b2:	bf00      	nop
 80058b4:	20000440 	.word	0x20000440
 80058b8:	08011324 	.word	0x08011324
 80058bc:	0801131e 	.word	0x0801131e

080058c0 <dhcp_select>:
{
 80058c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80058c4:	4607      	mov	r7, r0
{
 80058c6:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80058c8:	b960      	cbnz	r0, 80058e4 <dhcp_select+0x24>
 80058ca:	f06f 050f 	mvn.w	r5, #15
 80058ce:	4b52      	ldr	r3, [pc, #328]	; (8005a18 <dhcp_select+0x158>)
 80058d0:	f240 1277 	movw	r2, #375	; 0x177
 80058d4:	4951      	ldr	r1, [pc, #324]	; (8005a1c <dhcp_select+0x15c>)
 80058d6:	4852      	ldr	r0, [pc, #328]	; (8005a20 <dhcp_select+0x160>)
 80058d8:	f006 fef8 	bl	800c6cc <iprintf>
}
 80058dc:	4628      	mov	r0, r5
 80058de:	b005      	add	sp, #20
 80058e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 80058e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80058e6:	b94c      	cbnz	r4, 80058fc <dhcp_select+0x3c>
 80058e8:	4b4b      	ldr	r3, [pc, #300]	; (8005a18 <dhcp_select+0x158>)
 80058ea:	f240 1279 	movw	r2, #377	; 0x179
 80058ee:	494d      	ldr	r1, [pc, #308]	; (8005a24 <dhcp_select+0x164>)
 80058f0:	f06f 0505 	mvn.w	r5, #5
 80058f4:	484a      	ldr	r0, [pc, #296]	; (8005a20 <dhcp_select+0x160>)
 80058f6:	f006 fee9 	bl	800c6cc <iprintf>
 80058fa:	e7ef      	b.n	80058dc <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80058fc:	2101      	movs	r1, #1
 80058fe:	4620      	mov	r0, r4
 8005900:	f7ff fe31 	bl	8005566 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8005904:	f10d 030e 	add.w	r3, sp, #14
 8005908:	2203      	movs	r2, #3
 800590a:	4621      	mov	r1, r4
 800590c:	4638      	mov	r0, r7
 800590e:	f7ff fea9 	bl	8005664 <dhcp_create_msg>
  if (p_out != NULL) {
 8005912:	4606      	mov	r6, r0
 8005914:	2800      	cmp	r0, #0
 8005916:	d07b      	beq.n	8005a10 <dhcp_select+0x150>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005918:	6845      	ldr	r5, [r0, #4]
 800591a:	2302      	movs	r3, #2
 800591c:	2239      	movs	r2, #57	; 0x39
 800591e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005922:	35f0      	adds	r5, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005924:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8005a34 <dhcp_select+0x174>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005928:	4629      	mov	r1, r5
 800592a:	f7ff fe41 	bl	80055b0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800592e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005930:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005932:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005936:	f7ff fe1f 	bl	8005578 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800593a:	2304      	movs	r3, #4
 800593c:	2232      	movs	r2, #50	; 0x32
 800593e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005940:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005944:	f7ff fe34 	bl	80055b0 <dhcp_option>
 8005948:	4680      	mov	r8, r0
 800594a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800594e:	69e0      	ldr	r0, [r4, #28]
 8005950:	f002 f903 	bl	8007b5a <lwip_htonl>
 8005954:	4629      	mov	r1, r5
 8005956:	4602      	mov	r2, r0
 8005958:	4640      	mov	r0, r8
 800595a:	f7ff fe5f 	bl	800561c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800595e:	2304      	movs	r3, #4
 8005960:	2236      	movs	r2, #54	; 0x36
 8005962:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005964:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8005968:	f7ff fe22 	bl	80055b0 <dhcp_option>
 800596c:	4680      	mov	r8, r0
 800596e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8005972:	69a0      	ldr	r0, [r4, #24]
 8005974:	f002 f8f1 	bl	8007b5a <lwip_htonl>
 8005978:	4629      	mov	r1, r5
 800597a:	4602      	mov	r2, r0
 800597c:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800597e:	f04f 0800 	mov.w	r8, #0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8005982:	f7ff fe4b 	bl	800561c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005986:	2303      	movs	r3, #3
 8005988:	2237      	movs	r2, #55	; 0x37
 800598a:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800598c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005990:	f7ff fe0e 	bl	80055b0 <dhcp_option>
 8005994:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005998:	f819 2008 	ldrb.w	r2, [r9, r8]
 800599c:	f108 0801 	add.w	r8, r8, #1
 80059a0:	4629      	mov	r1, r5
 80059a2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80059a6:	f7ff fe21 	bl	80055ec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80059aa:	f1b8 0f03 	cmp.w	r8, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80059ae:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80059b2:	d1f1      	bne.n	8005998 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80059b4:	4629      	mov	r1, r5
 80059b6:	4632      	mov	r2, r6
 80059b8:	f7ff fee6 	bl	8005788 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80059bc:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <dhcp_select+0x168>)
 80059be:	481b      	ldr	r0, [pc, #108]	; (8005a2c <dhcp_select+0x16c>)
 80059c0:	4631      	mov	r1, r6
 80059c2:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <dhcp_select+0x170>)
 80059c4:	e9cd 7300 	strd	r7, r3, [sp]
 80059c8:	2343      	movs	r3, #67	; 0x43
 80059ca:	6840      	ldr	r0, [r0, #4]
 80059cc:	f006 fc3a 	bl	800c244 <udp_sendto_if_src>
 80059d0:	4605      	mov	r5, r0
    pbuf_free(p_out);
 80059d2:	4630      	mov	r0, r6
 80059d4:	f002 fdfc 	bl	80085d0 <pbuf_free>
  if (dhcp->tries < 255) {
 80059d8:	79a3      	ldrb	r3, [r4, #6]
 80059da:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80059dc:	bf1c      	itt	ne
 80059de:	3301      	addne	r3, #1
 80059e0:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80059e2:	79a2      	ldrb	r2, [r4, #6]
 80059e4:	2a05      	cmp	r2, #5
 80059e6:	bf97      	itett	ls
 80059e8:	2301      	movls	r3, #1
 80059ea:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80059ee:	4093      	lslls	r3, r2
 80059f0:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80059f4:	bf98      	it	ls
 80059f6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80059fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80059fe:	bf9c      	itt	ls
 8005a00:	00db      	lslls	r3, r3, #3
 8005a02:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005a04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005a08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a0c:	8123      	strh	r3, [r4, #8]
  return result;
 8005a0e:	e765      	b.n	80058dc <dhcp_select+0x1c>
    result = ERR_MEM;
 8005a10:	f04f 35ff 	mov.w	r5, #4294967295
 8005a14:	e7e0      	b.n	80059d8 <dhcp_select+0x118>
 8005a16:	bf00      	nop
 8005a18:	080115fb 	.word	0x080115fb
 8005a1c:	080117bc 	.word	0x080117bc
 8005a20:	0801153a 	.word	0x0801153a
 8005a24:	080117d7 	.word	0x080117d7
 8005a28:	08011328 	.word	0x08011328
 8005a2c:	20000440 	.word	0x20000440
 8005a30:	08011324 	.word	0x08011324
 8005a34:	0801131e 	.word	0x0801131e

08005a38 <dhcp_discover>:
{
 8005a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005a3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8005a3e:	2600      	movs	r6, #0
{
 8005a40:	b085      	sub	sp, #20
 8005a42:	4680      	mov	r8, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8005a44:	2106      	movs	r1, #6
 8005a46:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8005a48:	61e6      	str	r6, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8005a4a:	f7ff fd8c 	bl	8005566 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8005a4e:	f10d 030e 	add.w	r3, sp, #14
 8005a52:	2201      	movs	r2, #1
 8005a54:	4621      	mov	r1, r4
 8005a56:	4640      	mov	r0, r8
 8005a58:	f7ff fe04 	bl	8005664 <dhcp_create_msg>
  if (p_out != NULL) {
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	b3b8      	cbz	r0, 8005ad0 <dhcp_discover+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005a60:	6845      	ldr	r5, [r0, #4]
 8005a62:	2302      	movs	r3, #2
 8005a64:	2239      	movs	r2, #57	; 0x39
 8005a66:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005a6a:	35f0      	adds	r5, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005a6c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005b1c <dhcp_discover+0xe4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005a70:	4629      	mov	r1, r5
 8005a72:	f7ff fd9d 	bl	80055b0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005a76:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 8005a7a:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005a7c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005a80:	f7ff fd7a 	bl	8005578 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005a84:	2303      	movs	r3, #3
 8005a86:	2237      	movs	r2, #55	; 0x37
 8005a88:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005a8a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005a8e:	f7ff fd8f 	bl	80055b0 <dhcp_option>
 8005a92:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005a96:	f819 2006 	ldrb.w	r2, [r9, r6]
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005aa2:	f7ff fda3 	bl	80055ec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005aa6:	2e03      	cmp	r6, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005aa8:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005aac:	d1f3      	bne.n	8005a96 <dhcp_discover+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8005aae:	463a      	mov	r2, r7
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f7ff fe69 	bl	8005788 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8005ab6:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <dhcp_discover+0xd8>)
 8005ab8:	4816      	ldr	r0, [pc, #88]	; (8005b14 <dhcp_discover+0xdc>)
 8005aba:	4639      	mov	r1, r7
 8005abc:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <dhcp_discover+0xe0>)
 8005abe:	e9cd 8300 	strd	r8, r3, [sp]
 8005ac2:	2343      	movs	r3, #67	; 0x43
 8005ac4:	6840      	ldr	r0, [r0, #4]
 8005ac6:	f006 fbbd 	bl	800c244 <udp_sendto_if_src>
    pbuf_free(p_out);
 8005aca:	4638      	mov	r0, r7
 8005acc:	f002 fd80 	bl	80085d0 <pbuf_free>
  if (dhcp->tries < 255) {
 8005ad0:	79a3      	ldrb	r3, [r4, #6]
}
 8005ad2:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 8005ad4:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005ad6:	bf1c      	itt	ne
 8005ad8:	3301      	addne	r3, #1
 8005ada:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005adc:	79a2      	ldrb	r2, [r4, #6]
 8005ade:	2a05      	cmp	r2, #5
 8005ae0:	bf97      	itett	ls
 8005ae2:	2301      	movls	r3, #1
 8005ae4:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8005ae8:	4093      	lslls	r3, r2
 8005aea:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8005aee:	bf98      	it	ls
 8005af0:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005af4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005af8:	bf9c      	itt	ls
 8005afa:	00db      	lslls	r3, r3, #3
 8005afc:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005afe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005b02:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b06:	8123      	strh	r3, [r4, #8]
}
 8005b08:	b005      	add	sp, #20
 8005b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b0e:	bf00      	nop
 8005b10:	08011328 	.word	0x08011328
 8005b14:	20000440 	.word	0x20000440
 8005b18:	08011324 	.word	0x08011324
 8005b1c:	0801131e 	.word	0x0801131e

08005b20 <dhcp_check>:
{
 8005b20:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005b22:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8005b24:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8005b26:	2108      	movs	r1, #8
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f7ff fd1c 	bl	8005566 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f104 011c 	add.w	r1, r4, #28
 8005b34:	4628      	mov	r0, r5
 8005b36:	f001 f817 	bl	8006b68 <etharp_query>
  if (dhcp->tries < 255) {
 8005b3a:	79a3      	ldrb	r3, [r4, #6]
 8005b3c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005b3e:	bf1c      	itt	ne
 8005b40:	3301      	addne	r3, #1
 8005b42:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005b44:	2301      	movs	r3, #1
 8005b46:	8123      	strh	r3, [r4, #8]
}
 8005b48:	bd38      	pop	{r3, r4, r5, pc}
	...

08005b4c <dhcp_bind>:
{
 8005b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8005b4e:	4605      	mov	r5, r0
 8005b50:	b940      	cbnz	r0, 8005b64 <dhcp_bind+0x18>
 8005b52:	4b3a      	ldr	r3, [pc, #232]	; (8005c3c <dhcp_bind+0xf0>)
 8005b54:	f240 4215 	movw	r2, #1045	; 0x415
 8005b58:	4939      	ldr	r1, [pc, #228]	; (8005c40 <dhcp_bind+0xf4>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8005b5a:	483a      	ldr	r0, [pc, #232]	; (8005c44 <dhcp_bind+0xf8>)
 8005b5c:	f006 fdb6 	bl	800c6cc <iprintf>
}
 8005b60:	b003      	add	sp, #12
 8005b62:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 8005b64:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8005b66:	b924      	cbnz	r4, 8005b72 <dhcp_bind+0x26>
 8005b68:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <dhcp_bind+0xf0>)
 8005b6a:	f240 4217 	movw	r2, #1047	; 0x417
 8005b6e:	4936      	ldr	r1, [pc, #216]	; (8005c48 <dhcp_bind+0xfc>)
 8005b70:	e7f3      	b.n	8005b5a <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8005b76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	d00b      	beq.n	8005b94 <dhcp_bind+0x48>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005b7c:	331e      	adds	r3, #30
 8005b7e:	223c      	movs	r2, #60	; 0x3c
 8005b80:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t0_timeout == 0) {
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d046      	beq.n	8005c16 <dhcp_bind+0xca>
    dhcp->t0_timeout = (u16_t)timeout;
 8005b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bf28      	it	cs
 8005b90:	4613      	movcs	r3, r2
      dhcp->t0_timeout = 1;
 8005b92:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8005b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b96:	1c58      	adds	r0, r3, #1
 8005b98:	d00d      	beq.n	8005bb6 <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005b9a:	331e      	adds	r3, #30
 8005b9c:	223c      	movs	r2, #60	; 0x3c
 8005b9e:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t1_timeout == 0) {
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d039      	beq.n	8005c1a <dhcp_bind+0xce>
    dhcp->t1_timeout = (u16_t)timeout;
 8005ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005baa:	4293      	cmp	r3, r2
 8005bac:	bf28      	it	cs
 8005bae:	4613      	movcs	r3, r2
      dhcp->t1_timeout = 1;
 8005bb0:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8005bb2:	8963      	ldrh	r3, [r4, #10]
 8005bb4:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8005bb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005bb8:	1c59      	adds	r1, r3, #1
 8005bba:	d00c      	beq.n	8005bd6 <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005bbc:	331e      	adds	r3, #30
 8005bbe:	223c      	movs	r2, #60	; 0x3c
 8005bc0:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t2_timeout == 0) {
 8005bc4:	b35b      	cbz	r3, 8005c1e <dhcp_bind+0xd2>
    dhcp->t2_timeout = (u16_t)timeout;
 8005bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	bf28      	it	cs
 8005bce:	4613      	movcs	r3, r2
      dhcp->t2_timeout = 1;
 8005bd0:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	8962      	ldrh	r2, [r4, #10]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <dhcp_bind+0x98>
 8005bde:	b10b      	cbz	r3, 8005be4 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 8005be4:	79e3      	ldrb	r3, [r4, #7]
 8005be6:	b1e3      	cbz	r3, 8005c22 <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8005be8:	6a23      	ldr	r3, [r4, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8005bea:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8005bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bee:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8005bf0:	b92b      	cbnz	r3, 8005bfe <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8005bf2:	69e3      	ldr	r3, [r4, #28]
 8005bf4:	9a00      	ldr	r2, [sp, #0]
 8005bf6:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8005bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bfc:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8005bfe:	4620      	mov	r0, r4
 8005c00:	210a      	movs	r1, #10
 8005c02:	f7ff fcb0 	bl	8005566 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8005c06:	ab01      	add	r3, sp, #4
 8005c08:	466a      	mov	r2, sp
 8005c0a:	f104 011c 	add.w	r1, r4, #28
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f002 fae0 	bl	80081d4 <netif_set_addr>
 8005c14:	e7a4      	b.n	8005b60 <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e7bb      	b.n	8005b92 <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e7c8      	b.n	8005bb0 <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7d6      	b.n	8005bd0 <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8005c22:	7f23      	ldrb	r3, [r4, #28]
    if (first_octet <= 127) {
 8005c24:	061a      	lsls	r2, r3, #24
 8005c26:	d401      	bmi.n	8005c2c <dhcp_bind+0xe0>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8005c28:	23ff      	movs	r3, #255	; 0xff
 8005c2a:	e7de      	b.n	8005bea <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 8005c2c:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8005c2e:	bf8c      	ite	hi
 8005c30:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8005c34:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8005c38:	e7d7      	b.n	8005bea <dhcp_bind+0x9e>
 8005c3a:	bf00      	nop
 8005c3c:	080115fb 	.word	0x080115fb
 8005c40:	080117f1 	.word	0x080117f1
 8005c44:	0801153a 	.word	0x0801153a
 8005c48:	0801180a 	.word	0x0801180a

08005c4c <dhcp_inc_pcb_refcount>:
{
 8005c4c:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 8005c4e:	4c14      	ldr	r4, [pc, #80]	; (8005ca0 <dhcp_inc_pcb_refcount+0x54>)
 8005c50:	7a23      	ldrb	r3, [r4, #8]
 8005c52:	b9eb      	cbnz	r3, 8005c90 <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	b12b      	cbz	r3, 8005c64 <dhcp_inc_pcb_refcount+0x18>
 8005c58:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <dhcp_inc_pcb_refcount+0x58>)
 8005c5a:	22e5      	movs	r2, #229	; 0xe5
 8005c5c:	4912      	ldr	r1, [pc, #72]	; (8005ca8 <dhcp_inc_pcb_refcount+0x5c>)
 8005c5e:	4813      	ldr	r0, [pc, #76]	; (8005cac <dhcp_inc_pcb_refcount+0x60>)
 8005c60:	f006 fd34 	bl	800c6cc <iprintf>
    dhcp_pcb = udp_new();
 8005c64:	f006 fc3a 	bl	800c4dc <udp_new>
 8005c68:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 8005c6a:	b1b0      	cbz	r0, 8005c9a <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8005c6c:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8005c6e:	4910      	ldr	r1, [pc, #64]	; (8005cb0 <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8005c70:	f042 0220 	orr.w	r2, r2, #32
 8005c74:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8005c76:	2244      	movs	r2, #68	; 0x44
 8005c78:	f006 fa7c 	bl	800c174 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8005c7c:	2243      	movs	r2, #67	; 0x43
 8005c7e:	490c      	ldr	r1, [pc, #48]	; (8005cb0 <dhcp_inc_pcb_refcount+0x64>)
 8005c80:	6860      	ldr	r0, [r4, #4]
 8005c82:	f006 fbb7 	bl	800c3f4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8005c86:	2200      	movs	r2, #0
 8005c88:	490a      	ldr	r1, [pc, #40]	; (8005cb4 <dhcp_inc_pcb_refcount+0x68>)
 8005c8a:	6860      	ldr	r0, [r4, #4]
 8005c8c:	f006 fbee 	bl	800c46c <udp_recv>
  dhcp_pcb_refcount++;
 8005c90:	7a23      	ldrb	r3, [r4, #8]
  return ERR_OK;
 8005c92:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8005c94:	3301      	adds	r3, #1
 8005c96:	7223      	strb	r3, [r4, #8]
}
 8005c98:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	e7fb      	b.n	8005c98 <dhcp_inc_pcb_refcount+0x4c>
 8005ca0:	20000440 	.word	0x20000440
 8005ca4:	080115fb 	.word	0x080115fb
 8005ca8:	08011822 	.word	0x08011822
 8005cac:	0801153a 	.word	0x0801153a
 8005cb0:	08011328 	.word	0x08011328
 8005cb4:	08005d59 	.word	0x08005d59

08005cb8 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8005cb8:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8005cba:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8005cbc:	4d16      	ldr	r5, [pc, #88]	; (8005d18 <dhcp_handle_ack.isra.0+0x60>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8005cbe:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8005cc0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8005cc4:	78eb      	ldrb	r3, [r5, #3]
 8005cc6:	b113      	cbz	r3, 8005cce <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8005cc8:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <dhcp_handle_ack.isra.0+0x64>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8005cce:	792b      	ldrb	r3, [r5, #4]
 8005cd0:	b1d3      	cbz	r3, 8005d08 <dhcp_handle_ack.isra.0+0x50>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <dhcp_handle_ack.isra.0+0x64>)
 8005cd4:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8005cd6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8005cd8:	796b      	ldrb	r3, [r5, #5]
 8005cda:	b1c3      	cbz	r3, 8005d0e <dhcp_handle_ack.isra.0+0x56>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <dhcp_handle_ack.isra.0+0x64>)
 8005cde:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8005ce0:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8005ce2:	690b      	ldr	r3, [r1, #16]
 8005ce4:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8005ce6:	79ab      	ldrb	r3, [r5, #6]
 8005ce8:	b12b      	cbz	r3, 8005cf6 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8005cea:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <dhcp_handle_ack.isra.0+0x64>)
 8005cec:	6998      	ldr	r0, [r3, #24]
 8005cee:	f001 ff34 	bl	8007b5a <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8005cf2:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8005cf4:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 8005cf6:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8005cf8:	79eb      	ldrb	r3, [r5, #7]
 8005cfa:	b123      	cbz	r3, 8005d06 <dhcp_handle_ack.isra.0+0x4e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8005cfc:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <dhcp_handle_ack.isra.0+0x64>)
 8005cfe:	69d8      	ldr	r0, [r3, #28]
 8005d00:	f001 ff2b 	bl	8007b5a <lwip_htonl>
 8005d04:	6260      	str	r0, [r4, #36]	; 0x24
}
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8005d08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	e7e3      	b.n	8005cd6 <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8005d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005d14:	08db      	lsrs	r3, r3, #3
 8005d16:	e7e3      	b.n	8005ce0 <dhcp_handle_ack.isra.0+0x28>
 8005d18:	200043a8 	.word	0x200043a8
 8005d1c:	200043b0 	.word	0x200043b0

08005d20 <dhcp_dec_pcb_refcount>:
{
 8005d20:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8005d22:	4c09      	ldr	r4, [pc, #36]	; (8005d48 <dhcp_dec_pcb_refcount+0x28>)
 8005d24:	7a23      	ldrb	r3, [r4, #8]
 8005d26:	b92b      	cbnz	r3, 8005d34 <dhcp_dec_pcb_refcount+0x14>
 8005d28:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <dhcp_dec_pcb_refcount+0x2c>)
 8005d2a:	22ff      	movs	r2, #255	; 0xff
 8005d2c:	4908      	ldr	r1, [pc, #32]	; (8005d50 <dhcp_dec_pcb_refcount+0x30>)
 8005d2e:	4809      	ldr	r0, [pc, #36]	; (8005d54 <dhcp_dec_pcb_refcount+0x34>)
 8005d30:	f006 fccc 	bl	800c6cc <iprintf>
  dhcp_pcb_refcount--;
 8005d34:	7a25      	ldrb	r5, [r4, #8]
 8005d36:	3d01      	subs	r5, #1
 8005d38:	b2ed      	uxtb	r5, r5
 8005d3a:	7225      	strb	r5, [r4, #8]
  if (dhcp_pcb_refcount == 0) {
 8005d3c:	b91d      	cbnz	r5, 8005d46 <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 8005d3e:	6860      	ldr	r0, [r4, #4]
 8005d40:	f006 fba6 	bl	800c490 <udp_remove>
    dhcp_pcb = NULL;
 8005d44:	6065      	str	r5, [r4, #4]
}
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	20000440 	.word	0x20000440
 8005d4c:	080115fb 	.word	0x080115fb
 8005d50:	08011847 	.word	0x08011847
 8005d54:	0801153a 	.word	0x0801153a

08005d58 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8005d58:	4ba8      	ldr	r3, [pc, #672]	; (8005ffc <dhcp_recv+0x2a4>)
{
 8005d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8005d5e:	685d      	ldr	r5, [r3, #4]
{
 8005d60:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005d62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
{
 8005d64:	9201      	str	r2, [sp, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005d66:	9302      	str	r3, [sp, #8]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d037      	beq.n	8005ddc <dhcp_recv+0x84>
 8005d6c:	791b      	ldrb	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d034      	beq.n	8005ddc <dhcp_recv+0x84>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8005d72:	8953      	ldrh	r3, [r2, #10]
 8005d74:	2b2b      	cmp	r3, #43	; 0x2b
 8005d76:	d931      	bls.n	8005ddc <dhcp_recv+0x84>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8005d78:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8005d7a:	7813      	ldrb	r3, [r2, #0]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d12d      	bne.n	8005ddc <dhcp_recv+0x84>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005d80:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 8005d84:	2300      	movs	r3, #0
 8005d86:	b2d8      	uxtb	r0, r3
 8005d88:	4281      	cmp	r1, r0
 8005d8a:	d901      	bls.n	8005d90 <dhcp_recv+0x38>
 8005d8c:	2b06      	cmp	r3, #6
 8005d8e:	d11d      	bne.n	8005dcc <dhcp_recv+0x74>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8005d90:	6850      	ldr	r0, [r2, #4]
 8005d92:	f001 fee2 	bl	8007b5a <lwip_htonl>
 8005d96:	9b02      	ldr	r3, [sp, #8]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4298      	cmp	r0, r3
 8005d9c:	d11e      	bne.n	8005ddc <dhcp_recv+0x84>
  dhcp_clear_all_options(dhcp);
 8005d9e:	4b98      	ldr	r3, [pc, #608]	; (8006000 <dhcp_recv+0x2a8>)
 8005da0:	2200      	movs	r2, #0
  if (p->len < DHCP_SNAME_OFS) {
 8005da2:	9901      	ldr	r1, [sp, #4]
  dhcp_clear_all_options(dhcp);
 8005da4:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 8005da6:	8949      	ldrh	r1, [r1, #10]
  dhcp_clear_all_options(dhcp);
 8005da8:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8005daa:	292b      	cmp	r1, #43	; 0x2b
 8005dac:	d916      	bls.n	8005ddc <dhcp_recv+0x84>
  options_idx_max = p->tot_len;
 8005dae:	9901      	ldr	r1, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 8005db0:	f04f 09f0 	mov.w	r9, #240	; 0xf0
  int parse_sname_as_options = 0;
 8005db4:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 8005db6:	f8b1 a008 	ldrh.w	sl, [r1, #8]
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8005dba:	9303      	str	r3, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 8005dbc:	9e01      	ldr	r6, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8005dbe:	8973      	ldrh	r3, [r6, #10]
 8005dc0:	454b      	cmp	r3, r9
 8005dc2:	d911      	bls.n	8005de8 <dhcp_recv+0x90>
  options = (u8_t *)q->payload;
 8005dc4:	6873      	ldr	r3, [r6, #4]
 8005dc6:	464c      	mov	r4, r9
 8005dc8:	9305      	str	r3, [sp, #20]
 8005dca:	e0ed      	b.n	8005fa8 <dhcp_recv+0x250>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8005dcc:	18e8      	adds	r0, r5, r3
 8005dce:	3301      	adds	r3, #1
 8005dd0:	18d4      	adds	r4, r2, r3
 8005dd2:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8005dd6:	7ee4      	ldrb	r4, [r4, #27]
 8005dd8:	4284      	cmp	r4, r0
 8005dda:	d0d4      	beq.n	8005d86 <dhcp_recv+0x2e>
  pbuf_free(p);
 8005ddc:	9801      	ldr	r0, [sp, #4]
 8005dde:	f002 fbf7 	bl	80085d0 <pbuf_free>
}
 8005de2:	b009      	add	sp, #36	; 0x24
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx = (u16_t)(options_idx - q->len);
 8005de8:	eba9 0903 	sub.w	r9, r9, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8005dec:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8005df0:	6836      	ldr	r6, [r6, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8005df2:	fa1f f989 	uxth.w	r9, r9
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8005df6:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8005dfa:	2e00      	cmp	r6, #0
 8005dfc:	d1df      	bne.n	8005dbe <dhcp_recv+0x66>
 8005dfe:	e7ed      	b.n	8005ddc <dhcp_recv+0x84>
    u16_t val_offset = (u16_t)(offset + 2);
 8005e00:	f104 0b02 	add.w	fp, r4, #2
 8005e04:	fa1f fb8b 	uxth.w	fp, fp
    if (val_offset < offset) {
 8005e08:	45a3      	cmp	fp, r4
 8005e0a:	d3e7      	bcc.n	8005ddc <dhcp_recv+0x84>
    if ((offset + 1) < q->len) {
 8005e0c:	1c61      	adds	r1, r4, #1
 8005e0e:	8973      	ldrh	r3, [r6, #10]
 8005e10:	4299      	cmp	r1, r3
 8005e12:	da45      	bge.n	8005ea0 <dhcp_recv+0x148>
      len = options[offset + 1];
 8005e14:	9b05      	ldr	r3, [sp, #20]
 8005e16:	4423      	add	r3, r4
 8005e18:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8005e1a:	2a34      	cmp	r2, #52	; 0x34
 8005e1c:	d06b      	beq.n	8005ef6 <dhcp_recv+0x19e>
 8005e1e:	d846      	bhi.n	8005eae <dhcp_recv+0x156>
 8005e20:	2a01      	cmp	r2, #1
 8005e22:	d051      	beq.n	8005ec8 <dhcp_recv+0x170>
 8005e24:	f0c0 8088 	bcc.w	8005f38 <dhcp_recv+0x1e0>
 8005e28:	2a03      	cmp	r2, #3
 8005e2a:	d054      	beq.n	8005ed6 <dhcp_recv+0x17e>
 8005e2c:	2a33      	cmp	r2, #51	; 0x33
 8005e2e:	d05c      	beq.n	8005eea <dhcp_recv+0x192>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8005e30:	f04f 37ff 	mov.w	r7, #4294967295
 8005e34:	f04f 0800 	mov.w	r8, #0
      if (offset + len + 2 > 0xFFFF) {
 8005e38:	441c      	add	r4, r3
 8005e3a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8005e3e:	4294      	cmp	r4, r2
 8005e40:	dccc      	bgt.n	8005ddc <dhcp_recv+0x84>
      offset = (u16_t)(offset + len + 2);
 8005e42:	eb0b 0403 	add.w	r4, fp, r3
 8005e46:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8005e48:	f1b8 0f00 	cmp.w	r8, #0
 8005e4c:	d075      	beq.n	8005f3a <dhcp_recv+0x1e2>
        u32_t value = 0;
 8005e4e:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8005e50:	2f07      	cmp	r7, #7
        u32_t value = 0;
 8005e52:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8005e54:	d906      	bls.n	8005e64 <dhcp_recv+0x10c>
 8005e56:	4b6b      	ldr	r3, [pc, #428]	; (8006004 <dhcp_recv+0x2ac>)
 8005e58:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8005e5c:	496a      	ldr	r1, [pc, #424]	; (8006008 <dhcp_recv+0x2b0>)
 8005e5e:	486b      	ldr	r0, [pc, #428]	; (800600c <dhcp_recv+0x2b4>)
 8005e60:	f006 fc34 	bl	800c6cc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8005e64:	9b03      	ldr	r3, [sp, #12]
 8005e66:	5ddb      	ldrb	r3, [r3, r7]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d166      	bne.n	8005f3a <dhcp_recv+0x1e2>
          copy_len = LWIP_MIN(decode_len, 4);
 8005e6c:	fa1f f288 	uxth.w	r2, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8005e70:	465b      	mov	r3, fp
 8005e72:	a907      	add	r1, sp, #28
 8005e74:	4630      	mov	r0, r6
 8005e76:	4693      	mov	fp, r2
 8005e78:	f002 fdc2 	bl	8008a00 <pbuf_copy_partial>
 8005e7c:	4583      	cmp	fp, r0
 8005e7e:	d1ad      	bne.n	8005ddc <dhcp_recv+0x84>
          } else if (decode_len == 4) {
 8005e80:	f1b8 0f04 	cmp.w	r8, #4
 8005e84:	f040 8082 	bne.w	8005f8c <dhcp_recv+0x234>
            value = lwip_ntohl(value);
 8005e88:	9807      	ldr	r0, [sp, #28]
 8005e8a:	f001 fe66 	bl	8007b5a <lwip_htonl>
 8005e8e:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8005e90:	2301      	movs	r3, #1
 8005e92:	9a03      	ldr	r2, [sp, #12]
 8005e94:	55d3      	strb	r3, [r2, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8005e96:	9b07      	ldr	r3, [sp, #28]
 8005e98:	4a5d      	ldr	r2, [pc, #372]	; (8006010 <dhcp_recv+0x2b8>)
 8005e9a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8005e9e:	e04c      	b.n	8005f3a <dhcp_recv+0x1e2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8005ea0:	6833      	ldr	r3, [r6, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8119 	beq.w	80060da <dhcp_recv+0x382>
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	e7b5      	b.n	8005e1a <dhcp_recv+0xc2>
    switch (op) {
 8005eae:	2a36      	cmp	r2, #54	; 0x36
 8005eb0:	d036      	beq.n	8005f20 <dhcp_recv+0x1c8>
 8005eb2:	d32f      	bcc.n	8005f14 <dhcp_recv+0x1bc>
 8005eb4:	2a3a      	cmp	r2, #58	; 0x3a
 8005eb6:	d039      	beq.n	8005f2c <dhcp_recv+0x1d4>
 8005eb8:	2a3b      	cmp	r2, #59	; 0x3b
 8005eba:	d1b9      	bne.n	8005e30 <dhcp_recv+0xd8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d062      	beq.n	8005f86 <dhcp_recv+0x22e>
 8005ec0:	4b50      	ldr	r3, [pc, #320]	; (8006004 <dhcp_recv+0x2ac>)
 8005ec2:	f240 6261 	movw	r2, #1633	; 0x661
 8005ec6:	e004      	b.n	8005ed2 <dhcp_recv+0x17a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d049      	beq.n	8005f60 <dhcp_recv+0x208>
 8005ecc:	4b4d      	ldr	r3, [pc, #308]	; (8006004 <dhcp_recv+0x2ac>)
 8005ece:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005ed2:	4950      	ldr	r1, [pc, #320]	; (8006014 <dhcp_recv+0x2bc>)
 8005ed4:	e005      	b.n	8005ee2 <dhcp_recv+0x18a>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d845      	bhi.n	8005f66 <dhcp_recv+0x20e>
 8005eda:	4b4a      	ldr	r3, [pc, #296]	; (8006004 <dhcp_recv+0x2ac>)
 8005edc:	f240 6233 	movw	r2, #1587	; 0x633
 8005ee0:	494d      	ldr	r1, [pc, #308]	; (8006018 <dhcp_recv+0x2c0>)
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8005ee2:	484a      	ldr	r0, [pc, #296]	; (800600c <dhcp_recv+0x2b4>)
 8005ee4:	f006 fbf2 	bl	800c6cc <iprintf>
 8005ee8:	e778      	b.n	8005ddc <dhcp_recv+0x84>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d03f      	beq.n	8005f6e <dhcp_recv+0x216>
 8005eee:	4b45      	ldr	r3, [pc, #276]	; (8006004 <dhcp_recv+0x2ac>)
 8005ef0:	f240 6241 	movw	r2, #1601	; 0x641
 8005ef4:	e7ed      	b.n	8005ed2 <dhcp_recv+0x17a>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d004      	beq.n	8005f04 <dhcp_recv+0x1ac>
 8005efa:	4b42      	ldr	r3, [pc, #264]	; (8006004 <dhcp_recv+0x2ac>)
 8005efc:	f240 624f 	movw	r2, #1615	; 0x64f
 8005f00:	4946      	ldr	r1, [pc, #280]	; (800601c <dhcp_recv+0x2c4>)
 8005f02:	e7ee      	b.n	8005ee2 <dhcp_recv+0x18a>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8005f04:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 8005f08:	d034      	beq.n	8005f74 <dhcp_recv+0x21c>
 8005f0a:	4b3e      	ldr	r3, [pc, #248]	; (8006004 <dhcp_recv+0x2ac>)
 8005f0c:	f240 6251 	movw	r2, #1617	; 0x651
 8005f10:	4943      	ldr	r1, [pc, #268]	; (8006020 <dhcp_recv+0x2c8>)
 8005f12:	e7e6      	b.n	8005ee2 <dhcp_recv+0x18a>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d033      	beq.n	8005f80 <dhcp_recv+0x228>
 8005f18:	4b3a      	ldr	r3, [pc, #232]	; (8006004 <dhcp_recv+0x2ac>)
 8005f1a:	f240 6255 	movw	r2, #1621	; 0x655
 8005f1e:	e7ef      	b.n	8005f00 <dhcp_recv+0x1a8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d02a      	beq.n	8005f7a <dhcp_recv+0x222>
 8005f24:	4b37      	ldr	r3, [pc, #220]	; (8006004 <dhcp_recv+0x2ac>)
 8005f26:	f240 6259 	movw	r2, #1625	; 0x659
 8005f2a:	e7d2      	b.n	8005ed2 <dhcp_recv+0x17a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d027      	beq.n	8005f80 <dhcp_recv+0x228>
 8005f30:	4b34      	ldr	r3, [pc, #208]	; (8006004 <dhcp_recv+0x2ac>)
 8005f32:	f240 625d 	movw	r2, #1629	; 0x65d
 8005f36:	e7cc      	b.n	8005ed2 <dhcp_recv+0x17a>
      offset++;
 8005f38:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 8005f3a:	8973      	ldrh	r3, [r6, #10]
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	d833      	bhi.n	8005fa8 <dhcp_recv+0x250>
      offset = (u16_t)(offset - q->len);
 8005f40:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8005f42:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 8005f46:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8005f48:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8005f4c:	4554      	cmp	r4, sl
 8005f4e:	f4bf af45 	bcs.w	8005ddc <dhcp_recv+0x84>
        q = q->next;
 8005f52:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8005f54:	bb36      	cbnz	r6, 8005fa4 <dhcp_recv+0x24c>
 8005f56:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <dhcp_recv+0x2ac>)
 8005f58:	f240 629d 	movw	r2, #1693	; 0x69d
 8005f5c:	4931      	ldr	r1, [pc, #196]	; (8006024 <dhcp_recv+0x2cc>)
 8005f5e:	e7c0      	b.n	8005ee2 <dhcp_recv+0x18a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005f60:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8005f62:	2706      	movs	r7, #6
 8005f64:	e768      	b.n	8005e38 <dhcp_recv+0xe0>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8005f66:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 8005f68:	f04f 0804 	mov.w	r8, #4
 8005f6c:	e764      	b.n	8005e38 <dhcp_recv+0xe0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005f6e:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8005f70:	2703      	movs	r7, #3
 8005f72:	e761      	b.n	8005e38 <dhcp_recv+0xe0>
    decode_len = len;
 8005f74:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8005f76:	2700      	movs	r7, #0
 8005f78:	e75e      	b.n	8005e38 <dhcp_recv+0xe0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005f7a:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8005f7c:	2702      	movs	r7, #2
 8005f7e:	e75b      	b.n	8005e38 <dhcp_recv+0xe0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005f80:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8005f82:	461f      	mov	r7, r3
 8005f84:	e758      	b.n	8005e38 <dhcp_recv+0xe0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005f86:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8005f88:	2705      	movs	r7, #5
 8005f8a:	e755      	b.n	8005e38 <dhcp_recv+0xe0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8005f8c:	f1b8 0f01 	cmp.w	r8, #1
 8005f90:	d004      	beq.n	8005f9c <dhcp_recv+0x244>
 8005f92:	4b1c      	ldr	r3, [pc, #112]	; (8006004 <dhcp_recv+0x2ac>)
 8005f94:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8005f98:	4923      	ldr	r1, [pc, #140]	; (8006028 <dhcp_recv+0x2d0>)
 8005f9a:	e7a2      	b.n	8005ee2 <dhcp_recv+0x18a>
            value = ((u8_t *)&value)[0];
 8005f9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8005fa0:	9307      	str	r3, [sp, #28]
 8005fa2:	e775      	b.n	8005e90 <dhcp_recv+0x138>
        options = (u8_t *)q->payload;
 8005fa4:	6873      	ldr	r3, [r6, #4]
 8005fa6:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8005fa8:	4554      	cmp	r4, sl
 8005faa:	d204      	bcs.n	8005fb6 <dhcp_recv+0x25e>
 8005fac:	9b05      	ldr	r3, [sp, #20]
 8005fae:	5d1a      	ldrb	r2, [r3, r4]
 8005fb0:	2aff      	cmp	r2, #255	; 0xff
 8005fb2:	f47f af25 	bne.w	8005e00 <dhcp_recv+0xa8>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8005fb6:	9b03      	ldr	r3, [sp, #12]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d136      	bne.n	800602c <dhcp_recv+0x2d4>
  } else if (parse_sname_as_options) {
 8005fbe:	9b04      	ldr	r3, [sp, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d13c      	bne.n	800603e <dhcp_recv+0x2e6>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f43f af07 	beq.w	8005ddc <dhcp_recv+0x84>
  msg_in = (struct dhcp_msg *)p->payload;
 8005fce:	9b01      	ldr	r3, [sp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <dhcp_recv+0x2b8>)
  msg_in = (struct dhcp_msg *)p->payload;
 8005fd2:	685e      	ldr	r6, [r3, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8005fd4:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8005fd6:	2b05      	cmp	r3, #5
 8005fd8:	d14d      	bne.n	8006076 <dhcp_recv+0x31e>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8005fda:	9b02      	ldr	r3, [sp, #8]
 8005fdc:	795b      	ldrb	r3, [r3, #5]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d13d      	bne.n	800605e <dhcp_recv+0x306>
      dhcp_handle_ack(netif, msg_in);
 8005fe2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	f7ff fe67 	bl	8005cb8 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8005fea:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        dhcp_check(netif);
 8005fee:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8005ff0:	071b      	lsls	r3, r3, #28
 8005ff2:	d53d      	bpl.n	8006070 <dhcp_recv+0x318>
        dhcp_check(netif);
 8005ff4:	f7ff fd94 	bl	8005b20 <dhcp_check>
 8005ff8:	e6f0      	b.n	8005ddc <dhcp_recv+0x84>
 8005ffa:	bf00      	nop
 8005ffc:	200043d0 	.word	0x200043d0
 8006000:	200043a8 	.word	0x200043a8
 8006004:	080115fb 	.word	0x080115fb
 8006008:	080118a6 	.word	0x080118a6
 800600c:	0801153a 	.word	0x0801153a
 8006010:	200043b0 	.word	0x200043b0
 8006014:	0801186b 	.word	0x0801186b
 8006018:	08011874 	.word	0x08011874
 800601c:	08011886 	.word	0x08011886
 8006020:	0801188f 	.word	0x0801188f
 8006024:	080118ca 	.word	0x080118ca
 8006028:	080118b7 	.word	0x080118b7
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800602c:	4b39      	ldr	r3, [pc, #228]	; (8006114 <dhcp_recv+0x3bc>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800602e:	2200      	movs	r2, #0
 8006030:	9903      	ldr	r1, [sp, #12]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8006032:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8006034:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8006036:	2b01      	cmp	r3, #1
 8006038:	d00c      	beq.n	8006054 <dhcp_recv+0x2fc>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800603a:	2b02      	cmp	r3, #2
 800603c:	d106      	bne.n	800604c <dhcp_recv+0x2f4>
    parse_sname_as_options = 0;
 800603e:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8006040:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8006044:	f04f 092c 	mov.w	r9, #44	; 0x2c
    parse_sname_as_options = 0;
 8006048:	9304      	str	r3, [sp, #16]
 800604a:	e6b7      	b.n	8005dbc <dhcp_recv+0x64>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800604c:	2b03      	cmp	r3, #3
 800604e:	d1b6      	bne.n	8005fbe <dhcp_recv+0x266>
      parse_sname_as_options = 1;
 8006050:	2301      	movs	r3, #1
 8006052:	9304      	str	r3, [sp, #16]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8006054:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8006058:	f04f 096c 	mov.w	r9, #108	; 0x6c
 800605c:	e6ae      	b.n	8005dbc <dhcp_recv+0x64>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800605e:	3b03      	subs	r3, #3
 8006060:	2b02      	cmp	r3, #2
 8006062:	f63f aebb 	bhi.w	8005ddc <dhcp_recv+0x84>
      dhcp_handle_ack(netif, msg_in);
 8006066:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006068:	4631      	mov	r1, r6
 800606a:	f7ff fe25 	bl	8005cb8 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 800606e:	4628      	mov	r0, r5
 8006070:	f7ff fd6c 	bl	8005b4c <dhcp_bind>
 8006074:	e6b2      	b.n	8005ddc <dhcp_recv+0x84>
  else if ((msg_type == DHCP_NAK) &&
 8006076:	2b06      	cmp	r3, #6
 8006078:	d115      	bne.n	80060a6 <dhcp_recv+0x34e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800607a:	9b02      	ldr	r3, [sp, #8]
 800607c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800607e:	1eda      	subs	r2, r3, #3
 8006080:	2a02      	cmp	r2, #2
 8006082:	d902      	bls.n	800608a <dhcp_recv+0x332>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8006084:	2b01      	cmp	r3, #1
 8006086:	f47f aea9 	bne.w	8005ddc <dhcp_recv+0x84>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800608a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800608c:	210c      	movs	r1, #12
 800608e:	f7ff fa6a 	bl	8005566 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <dhcp_recv+0x3c0>)
 8006094:	4628      	mov	r0, r5
 8006096:	461a      	mov	r2, r3
 8006098:	4619      	mov	r1, r3
 800609a:	f002 f89b 	bl	80081d4 <netif_set_addr>
  dhcp_discover(netif);
 800609e:	4628      	mov	r0, r5
 80060a0:	f7ff fcca 	bl	8005a38 <dhcp_discover>
 80060a4:	e69a      	b.n	8005ddc <dhcp_recv+0x84>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	f47f ae98 	bne.w	8005ddc <dhcp_recv+0x84>
 80060ac:	9b02      	ldr	r3, [sp, #8]
 80060ae:	795b      	ldrb	r3, [r3, #5]
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	f47f ae93 	bne.w	8005ddc <dhcp_recv+0x84>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80060b6:	9b03      	ldr	r3, [sp, #12]
 80060b8:	789b      	ldrb	r3, [r3, #2]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f43f ae8e 	beq.w	8005ddc <dhcp_recv+0x84>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80060c0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 80060c2:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80060c4:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 80060c6:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80060c8:	f001 fd47 	bl	8007b5a <lwip_htonl>
 80060cc:	61a0      	str	r0, [r4, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80060ce:	6933      	ldr	r3, [r6, #16]
    dhcp_select(netif);
 80060d0:	4628      	mov	r0, r5
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80060d2:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 80060d4:	f7ff fbf4 	bl	80058c0 <dhcp_select>
 80060d8:	e680      	b.n	8005ddc <dhcp_recv+0x84>
    switch (op) {
 80060da:	2a34      	cmp	r2, #52	; 0x34
 80060dc:	f43f af0d 	beq.w	8005efa <dhcp_recv+0x1a2>
 80060e0:	d80c      	bhi.n	80060fc <dhcp_recv+0x3a4>
 80060e2:	2a01      	cmp	r2, #1
 80060e4:	f43f aef2 	beq.w	8005ecc <dhcp_recv+0x174>
 80060e8:	f4ff af26 	bcc.w	8005f38 <dhcp_recv+0x1e0>
 80060ec:	2a03      	cmp	r2, #3
 80060ee:	f43f aef4 	beq.w	8005eda <dhcp_recv+0x182>
 80060f2:	2a33      	cmp	r2, #51	; 0x33
 80060f4:	f43f aefb 	beq.w	8005eee <dhcp_recv+0x196>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80060f8:	2300      	movs	r3, #0
 80060fa:	e699      	b.n	8005e30 <dhcp_recv+0xd8>
    switch (op) {
 80060fc:	2a36      	cmp	r2, #54	; 0x36
 80060fe:	f43f af11 	beq.w	8005f24 <dhcp_recv+0x1cc>
 8006102:	f4ff af09 	bcc.w	8005f18 <dhcp_recv+0x1c0>
 8006106:	2a3a      	cmp	r2, #58	; 0x3a
 8006108:	f43f af12 	beq.w	8005f30 <dhcp_recv+0x1d8>
 800610c:	2a3b      	cmp	r2, #59	; 0x3b
 800610e:	f43f aed7 	beq.w	8005ec0 <dhcp_recv+0x168>
 8006112:	e7f1      	b.n	80060f8 <dhcp_recv+0x3a0>
 8006114:	200043b0 	.word	0x200043b0
 8006118:	08011328 	.word	0x08011328

0800611c <dhcp_network_changed>:
{
 800611c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800611e:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006120:	4605      	mov	r5, r0
  if (!dhcp) {
 8006122:	b304      	cbz	r4, 8006166 <dhcp_network_changed+0x4a>
  switch (dhcp->state) {
 8006124:	7963      	ldrb	r3, [r4, #5]
 8006126:	2b0a      	cmp	r3, #10
 8006128:	d80d      	bhi.n	8006146 <dhcp_network_changed+0x2a>
 800612a:	e8df f003 	tbb	[pc, r3]
 800612e:	0c1c      	.short	0x0c1c
 8006130:	0606060c 	.word	0x0606060c
 8006134:	0c0c0c0c 	.word	0x0c0c0c0c
 8006138:	06          	.byte	0x06
 8006139:	00          	.byte	0x00
      dhcp->tries = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	71a3      	strb	r3, [r4, #6]
}
 800613e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8006142:	f7ff bb39 	b.w	80057b8 <dhcp_reboot>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8006146:	2b0c      	cmp	r3, #12
 8006148:	d906      	bls.n	8006158 <dhcp_network_changed+0x3c>
 800614a:	4b07      	ldr	r3, [pc, #28]	; (8006168 <dhcp_network_changed+0x4c>)
 800614c:	f240 326d 	movw	r2, #877	; 0x36d
 8006150:	4906      	ldr	r1, [pc, #24]	; (800616c <dhcp_network_changed+0x50>)
 8006152:	4807      	ldr	r0, [pc, #28]	; (8006170 <dhcp_network_changed+0x54>)
 8006154:	f006 faba 	bl	800c6cc <iprintf>
      dhcp->tries = 0;
 8006158:	2300      	movs	r3, #0
      dhcp_discover(netif);
 800615a:	4628      	mov	r0, r5
      dhcp->tries = 0;
 800615c:	71a3      	strb	r3, [r4, #6]
}
 800615e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 8006162:	f7ff bc69 	b.w	8005a38 <dhcp_discover>
}
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	080115fb 	.word	0x080115fb
 800616c:	08011901 	.word	0x08011901
 8006170:	0801153a 	.word	0x0801153a

08006174 <dhcp_arp_reply>:
{
 8006174:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006178:	4607      	mov	r7, r0
 800617a:	b948      	cbnz	r0, 8006190 <dhcp_arp_reply+0x1c>
 800617c:	4b27      	ldr	r3, [pc, #156]	; (800621c <dhcp_arp_reply+0xa8>)
 800617e:	f240 328b 	movw	r2, #907	; 0x38b
 8006182:	4927      	ldr	r1, [pc, #156]	; (8006220 <dhcp_arp_reply+0xac>)
 8006184:	4827      	ldr	r0, [pc, #156]	; (8006224 <dhcp_arp_reply+0xb0>)
 8006186:	f006 faa1 	bl	800c6cc <iprintf>
}
 800618a:	b004      	add	sp, #16
 800618c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dhcp = netif_dhcp_data(netif);
 8006190:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8006192:	2c00      	cmp	r4, #0
 8006194:	d0f9      	beq.n	800618a <dhcp_arp_reply+0x16>
 8006196:	7963      	ldrb	r3, [r4, #5]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d1f6      	bne.n	800618a <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800619c:	680a      	ldr	r2, [r1, #0]
 800619e:	69e3      	ldr	r3, [r4, #28]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d1f2      	bne.n	800618a <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80061a4:	210c      	movs	r1, #12
 80061a6:	4620      	mov	r0, r4
 80061a8:	f7ff f9dd 	bl	8005566 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80061ac:	f10d 030e 	add.w	r3, sp, #14
 80061b0:	2204      	movs	r2, #4
 80061b2:	4621      	mov	r1, r4
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff fa55 	bl	8005664 <dhcp_create_msg>
  if (p_out != NULL) {
 80061ba:	4605      	mov	r5, r0
 80061bc:	b330      	cbz	r0, 800620c <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80061be:	6846      	ldr	r6, [r0, #4]
 80061c0:	2304      	movs	r3, #4
 80061c2:	2232      	movs	r2, #50	; 0x32
 80061c4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80061c8:	36f0      	adds	r6, #240	; 0xf0
 80061ca:	4631      	mov	r1, r6
 80061cc:	f7ff f9f0 	bl	80055b0 <dhcp_option>
 80061d0:	4680      	mov	r8, r0
 80061d2:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80061d6:	69e0      	ldr	r0, [r4, #28]
 80061d8:	f001 fcbf 	bl	8007b5a <lwip_htonl>
 80061dc:	4631      	mov	r1, r6
 80061de:	4602      	mov	r2, r0
 80061e0:	4640      	mov	r0, r8
 80061e2:	f7ff fa1b 	bl	800561c <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80061e6:	462a      	mov	r2, r5
 80061e8:	4631      	mov	r1, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80061ea:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80061ee:	f7ff facb 	bl	8005788 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <dhcp_arp_reply+0xb4>)
 80061f4:	480d      	ldr	r0, [pc, #52]	; (800622c <dhcp_arp_reply+0xb8>)
 80061f6:	4629      	mov	r1, r5
 80061f8:	4a0d      	ldr	r2, [pc, #52]	; (8006230 <dhcp_arp_reply+0xbc>)
 80061fa:	e9cd 7300 	strd	r7, r3, [sp]
 80061fe:	2343      	movs	r3, #67	; 0x43
 8006200:	6840      	ldr	r0, [r0, #4]
 8006202:	f006 f81f 	bl	800c244 <udp_sendto_if_src>
    pbuf_free(p_out);
 8006206:	4628      	mov	r0, r5
 8006208:	f002 f9e2 	bl	80085d0 <pbuf_free>
  if (dhcp->tries < 255) {
 800620c:	79a3      	ldrb	r3, [r4, #6]
 800620e:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006210:	bf1c      	itt	ne
 8006212:	3301      	addne	r3, #1
 8006214:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006216:	2314      	movs	r3, #20
 8006218:	8123      	strh	r3, [r4, #8]
 800621a:	e7b6      	b.n	800618a <dhcp_arp_reply+0x16>
 800621c:	080115fb 	.word	0x080115fb
 8006220:	080117fc 	.word	0x080117fc
 8006224:	0801153a 	.word	0x0801153a
 8006228:	08011328 	.word	0x08011328
 800622c:	20000440 	.word	0x20000440
 8006230:	08011324 	.word	0x08011324

08006234 <dhcp_renew>:
{
 8006234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006238:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 800623a:	b085      	sub	sp, #20
 800623c:	4607      	mov	r7, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800623e:	2105      	movs	r1, #5
 8006240:	4620      	mov	r0, r4
 8006242:	f7ff f990 	bl	8005566 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006246:	f10d 030e 	add.w	r3, sp, #14
 800624a:	2203      	movs	r2, #3
 800624c:	4621      	mov	r1, r4
 800624e:	4638      	mov	r0, r7
 8006250:	f7ff fa08 	bl	8005664 <dhcp_create_msg>
  if (p_out != NULL) {
 8006254:	4606      	mov	r6, r0
 8006256:	2800      	cmp	r0, #0
 8006258:	d056      	beq.n	8006308 <dhcp_renew+0xd4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800625a:	6845      	ldr	r5, [r0, #4]
 800625c:	2302      	movs	r3, #2
 800625e:	2239      	movs	r2, #57	; 0x39
 8006260:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006264:	35f0      	adds	r5, #240	; 0xf0
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006266:	f04f 0800 	mov.w	r8, #0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800626a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8006314 <dhcp_renew+0xe0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800626e:	4629      	mov	r1, r5
 8006270:	f7ff f99e 	bl	80055b0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006274:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006276:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006278:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800627c:	f7ff f97c 	bl	8005578 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006280:	2303      	movs	r3, #3
 8006282:	2237      	movs	r2, #55	; 0x37
 8006284:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006286:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800628a:	f7ff f991 	bl	80055b0 <dhcp_option>
 800628e:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006292:	f819 2008 	ldrb.w	r2, [r9, r8]
 8006296:	f108 0801 	add.w	r8, r8, #1
 800629a:	4629      	mov	r1, r5
 800629c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80062a0:	f7ff f9a4 	bl	80055ec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80062a4:	f1b8 0f03 	cmp.w	r8, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80062a8:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80062ac:	d1f1      	bne.n	8006292 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80062ae:	4629      	mov	r1, r5
 80062b0:	4632      	mov	r2, r6
 80062b2:	f7ff fa69 	bl	8005788 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80062b6:	4816      	ldr	r0, [pc, #88]	; (8006310 <dhcp_renew+0xdc>)
 80062b8:	9700      	str	r7, [sp, #0]
 80062ba:	2343      	movs	r3, #67	; 0x43
 80062bc:	f104 0218 	add.w	r2, r4, #24
 80062c0:	4631      	mov	r1, r6
 80062c2:	6840      	ldr	r0, [r0, #4]
 80062c4:	f006 f856 	bl	800c374 <udp_sendto_if>
 80062c8:	4605      	mov	r5, r0
    pbuf_free(p_out);
 80062ca:	4630      	mov	r0, r6
 80062cc:	f002 f980 	bl	80085d0 <pbuf_free>
  if (dhcp->tries < 255) {
 80062d0:	79a3      	ldrb	r3, [r4, #6]
}
 80062d2:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 80062d4:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80062d6:	bf1c      	itt	ne
 80062d8:	3301      	addne	r3, #1
 80062da:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80062dc:	79a3      	ldrb	r3, [r4, #6]
 80062de:	2b09      	cmp	r3, #9
 80062e0:	bf96      	itet	ls
 80062e2:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80062e6:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 80062ea:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80062ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80062f2:	bf9c      	itt	ls
 80062f4:	011b      	lslls	r3, r3, #4
 80062f6:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80062f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80062fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006300:	8123      	strh	r3, [r4, #8]
}
 8006302:	b005      	add	sp, #20
 8006304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 8006308:	f04f 35ff 	mov.w	r5, #4294967295
 800630c:	e7e0      	b.n	80062d0 <dhcp_renew+0x9c>
 800630e:	bf00      	nop
 8006310:	20000440 	.word	0x20000440
 8006314:	0801131e 	.word	0x0801131e

08006318 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8006318:	b150      	cbz	r0, 8006330 <dhcp_supplied_address+0x18>
 800631a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800631c:	b140      	cbz	r0, 8006330 <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800631e:	7940      	ldrb	r0, [r0, #5]
 8006320:	280a      	cmp	r0, #10
 8006322:	d006      	beq.n	8006332 <dhcp_supplied_address+0x1a>
 8006324:	3804      	subs	r0, #4
 8006326:	2801      	cmp	r0, #1
 8006328:	bf8c      	ite	hi
 800632a:	2000      	movhi	r0, #0
 800632c:	2001      	movls	r0, #1
 800632e:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8006330:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8006332:	2001      	movs	r0, #1
 8006334:	e7fb      	b.n	800632e <dhcp_supplied_address+0x16>
	...

08006338 <dhcp_release_and_stop>:
{
 8006338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800633c:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 800633e:	4607      	mov	r7, r0
  if (dhcp == NULL) {
 8006340:	2c00      	cmp	r4, #0
 8006342:	d051      	beq.n	80063e8 <dhcp_release_and_stop+0xb0>
  if (dhcp->state == DHCP_STATE_OFF) {
 8006344:	7963      	ldrb	r3, [r4, #5]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d04e      	beq.n	80063e8 <dhcp_release_and_stop+0xb0>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800634a:	69a3      	ldr	r3, [r4, #24]
 800634c:	9303      	str	r3, [sp, #12]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800634e:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8006350:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8006354:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8006358:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800635c:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800635e:	82a3      	strh	r3, [r4, #20]
 8006360:	8263      	strh	r3, [r4, #18]
 8006362:	8223      	strh	r3, [r4, #16]
 8006364:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 8006366:	f7ff ffd7 	bl	8006318 <dhcp_supplied_address>
 800636a:	b368      	cbz	r0, 80063c8 <dhcp_release_and_stop+0x90>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800636c:	f10d 030a 	add.w	r3, sp, #10
 8006370:	2207      	movs	r2, #7
 8006372:	4621      	mov	r1, r4
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff f975 	bl	8005664 <dhcp_create_msg>
    if (p_out != NULL) {
 800637a:	4605      	mov	r5, r0
 800637c:	b320      	cbz	r0, 80063c8 <dhcp_release_and_stop+0x90>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800637e:	6846      	ldr	r6, [r0, #4]
 8006380:	2304      	movs	r3, #4
 8006382:	2236      	movs	r2, #54	; 0x36
 8006384:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8006388:	36f0      	adds	r6, #240	; 0xf0
 800638a:	4631      	mov	r1, r6
 800638c:	f7ff f910 	bl	80055b0 <dhcp_option>
 8006390:	4680      	mov	r8, r0
 8006392:	f8ad 000a 	strh.w	r0, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8006396:	9803      	ldr	r0, [sp, #12]
 8006398:	f001 fbdf 	bl	8007b5a <lwip_htonl>
 800639c:	4631      	mov	r1, r6
 800639e:	4602      	mov	r2, r0
 80063a0:	4640      	mov	r0, r8
 80063a2:	f7ff f93b 	bl	800561c <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80063a6:	462a      	mov	r2, r5
 80063a8:	4631      	mov	r1, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80063aa:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80063ae:	f7ff f9eb 	bl	8005788 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80063b2:	480f      	ldr	r0, [pc, #60]	; (80063f0 <dhcp_release_and_stop+0xb8>)
 80063b4:	9700      	str	r7, [sp, #0]
 80063b6:	2343      	movs	r3, #67	; 0x43
 80063b8:	aa03      	add	r2, sp, #12
 80063ba:	4629      	mov	r1, r5
 80063bc:	6840      	ldr	r0, [r0, #4]
 80063be:	f005 ffd9 	bl	800c374 <udp_sendto_if>
      pbuf_free(p_out);
 80063c2:	4628      	mov	r0, r5
 80063c4:	f002 f904 	bl	80085d0 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <dhcp_release_and_stop+0xbc>)
 80063ca:	4638      	mov	r0, r7
 80063cc:	4619      	mov	r1, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	f001 ff00 	bl	80081d4 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80063d4:	2100      	movs	r1, #0
 80063d6:	4620      	mov	r0, r4
 80063d8:	f7ff f8c5 	bl	8005566 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 80063dc:	7923      	ldrb	r3, [r4, #4]
 80063de:	b11b      	cbz	r3, 80063e8 <dhcp_release_and_stop+0xb0>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80063e0:	f7ff fc9e 	bl	8005d20 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	7123      	strb	r3, [r4, #4]
}
 80063e8:	b004      	add	sp, #16
 80063ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ee:	bf00      	nop
 80063f0:	20000440 	.word	0x20000440
 80063f4:	08011328 	.word	0x08011328

080063f8 <dhcp_start>:
{
 80063f8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80063fa:	4604      	mov	r4, r0
 80063fc:	b950      	cbnz	r0, 8006414 <dhcp_start+0x1c>
 80063fe:	4b24      	ldr	r3, [pc, #144]	; (8006490 <dhcp_start+0x98>)
 8006400:	f240 22e7 	movw	r2, #743	; 0x2e7
 8006404:	4923      	ldr	r1, [pc, #140]	; (8006494 <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8006406:	4824      	ldr	r0, [pc, #144]	; (8006498 <dhcp_start+0xa0>)
 8006408:	f006 f960 	bl	800c6cc <iprintf>
 800640c:	f06f 020f 	mvn.w	r2, #15
}
 8006410:	4610      	mov	r0, r2
 8006412:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8006414:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8006418:	07da      	lsls	r2, r3, #31
 800641a:	d404      	bmi.n	8006426 <dhcp_start+0x2e>
 800641c:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <dhcp_start+0x98>)
 800641e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8006422:	491e      	ldr	r1, [pc, #120]	; (800649c <dhcp_start+0xa4>)
 8006424:	e7ef      	b.n	8006406 <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8006426:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8006428:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800642a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800642e:	d202      	bcs.n	8006436 <dhcp_start+0x3e>
    return ERR_MEM;
 8006430:	f04f 32ff 	mov.w	r2, #4294967295
 8006434:	e7ec      	b.n	8006410 <dhcp_start+0x18>
  if (dhcp == NULL) {
 8006436:	b9dd      	cbnz	r5, 8006470 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8006438:	2034      	movs	r0, #52	; 0x34
 800643a:	f001 fd4f 	bl	8007edc <mem_malloc>
    if (dhcp == NULL) {
 800643e:	4605      	mov	r5, r0
 8006440:	2800      	cmp	r0, #0
 8006442:	d0f5      	beq.n	8006430 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8006444:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 8006446:	2234      	movs	r2, #52	; 0x34
 8006448:	2100      	movs	r1, #0
 800644a:	4628      	mov	r0, r5
 800644c:	f006 f936 	bl	800c6bc <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8006450:	f7ff fbfc 	bl	8005c4c <dhcp_inc_pcb_refcount>
 8006454:	4602      	mov	r2, r0
 8006456:	2800      	cmp	r0, #0
 8006458:	d1ea      	bne.n	8006430 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 800645a:	2301      	movs	r3, #1
 800645c:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800645e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006462:	075b      	lsls	r3, r3, #29
 8006464:	d40a      	bmi.n	800647c <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8006466:	2102      	movs	r1, #2
 8006468:	4628      	mov	r0, r5
 800646a:	f7ff f87c 	bl	8005566 <dhcp_set_state>
    return ERR_OK;
 800646e:	e7cf      	b.n	8006410 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 8006470:	792b      	ldrb	r3, [r5, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0e7      	beq.n	8006446 <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8006476:	f7ff fc53 	bl	8005d20 <dhcp_dec_pcb_refcount>
 800647a:	e7e4      	b.n	8006446 <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 800647c:	4620      	mov	r0, r4
 800647e:	f7ff fadb 	bl	8005a38 <dhcp_discover>
  if (result != ERR_OK) {
 8006482:	4602      	mov	r2, r0
 8006484:	2800      	cmp	r0, #0
 8006486:	d0c3      	beq.n	8006410 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 8006488:	4620      	mov	r0, r4
 800648a:	f7ff ff55 	bl	8006338 <dhcp_release_and_stop>
 800648e:	e7cf      	b.n	8006430 <dhcp_start+0x38>
 8006490:	080115fb 	.word	0x080115fb
 8006494:	080117fc 	.word	0x080117fc
 8006498:	0801153a 	.word	0x0801153a
 800649c:	08011915 	.word	0x08011915

080064a0 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 80064a0:	4b57      	ldr	r3, [pc, #348]	; (8006600 <dhcp_coarse_tmr+0x160>)
{
 80064a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80064a6:	681d      	ldr	r5, [r3, #0]
{
 80064a8:	b085      	sub	sp, #20
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80064aa:	4e56      	ldr	r6, [pc, #344]	; (8006604 <dhcp_coarse_tmr+0x164>)
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80064ac:	4f56      	ldr	r7, [pc, #344]	; (8006608 <dhcp_coarse_tmr+0x168>)
 80064ae:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800660c <dhcp_coarse_tmr+0x16c>
  NETIF_FOREACH(netif) {
 80064b2:	b915      	cbnz	r5, 80064ba <dhcp_coarse_tmr+0x1a>
}
 80064b4:	b005      	add	sp, #20
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80064ba:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80064bc:	b17c      	cbz	r4, 80064de <dhcp_coarse_tmr+0x3e>
 80064be:	7963      	ldrb	r3, [r4, #5]
 80064c0:	b16b      	cbz	r3, 80064de <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80064c2:	8aa1      	ldrh	r1, [r4, #20]
 80064c4:	b169      	cbz	r1, 80064e2 <dhcp_coarse_tmr+0x42>
 80064c6:	8a62      	ldrh	r2, [r4, #18]
 80064c8:	3201      	adds	r2, #1
 80064ca:	b292      	uxth	r2, r2
 80064cc:	4291      	cmp	r1, r2
 80064ce:	8262      	strh	r2, [r4, #18]
 80064d0:	d107      	bne.n	80064e2 <dhcp_coarse_tmr+0x42>
        dhcp_release_and_stop(netif);
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7ff ff30 	bl	8006338 <dhcp_release_and_stop>
        dhcp_start(netif);
 80064d8:	4628      	mov	r0, r5
 80064da:	f7ff ff8d 	bl	80063f8 <dhcp_start>
  NETIF_FOREACH(netif) {
 80064de:	682d      	ldr	r5, [r5, #0]
 80064e0:	e7e7      	b.n	80064b2 <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80064e2:	8a22      	ldrh	r2, [r4, #16]
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	d072      	beq.n	80065ce <dhcp_coarse_tmr+0x12e>
 80064e8:	1e51      	subs	r1, r2, #1
 80064ea:	2a01      	cmp	r2, #1
 80064ec:	8221      	strh	r1, [r4, #16]
 80064ee:	d16e      	bne.n	80065ce <dhcp_coarse_tmr+0x12e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b09      	cmp	r3, #9
 80064f6:	d8f2      	bhi.n	80064de <dhcp_coarse_tmr+0x3e>
 80064f8:	f240 2919 	movw	r9, #537	; 0x219
 80064fc:	fa29 f903 	lsr.w	r9, r9, r3
 8006500:	ea6f 0909 	mvn.w	r9, r9
 8006504:	f019 0901 	ands.w	r9, r9, #1
 8006508:	d1e9      	bne.n	80064de <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800650a:	2104      	movs	r1, #4
 800650c:	4620      	mov	r0, r4
 800650e:	f7ff f82a 	bl	8005566 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006512:	f10d 030e 	add.w	r3, sp, #14
 8006516:	2203      	movs	r2, #3
 8006518:	4621      	mov	r1, r4
 800651a:	4628      	mov	r0, r5
 800651c:	f7ff f8a2 	bl	8005664 <dhcp_create_msg>
  if (p_out != NULL) {
 8006520:	4683      	mov	fp, r0
 8006522:	b3a0      	cbz	r0, 800658e <dhcp_coarse_tmr+0xee>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006524:	6843      	ldr	r3, [r0, #4]
 8006526:	2239      	movs	r2, #57	; 0x39
 8006528:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800652c:	f103 0af0 	add.w	sl, r3, #240	; 0xf0
 8006530:	2302      	movs	r3, #2
 8006532:	4651      	mov	r1, sl
 8006534:	f7ff f83c 	bl	80055b0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006538:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800653a:	4651      	mov	r1, sl
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800653c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006540:	f7ff f81a 	bl	8005578 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006544:	2303      	movs	r3, #3
 8006546:	2237      	movs	r2, #55	; 0x37
 8006548:	4651      	mov	r1, sl
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800654a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800654e:	f7ff f82f 	bl	80055b0 <dhcp_option>
 8006552:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006556:	f816 2009 	ldrb.w	r2, [r6, r9]
 800655a:	f109 0901 	add.w	r9, r9, #1
 800655e:	4651      	mov	r1, sl
 8006560:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006564:	f7ff f842 	bl	80055ec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006568:	f1b9 0f03 	cmp.w	r9, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800656c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006570:	d1f1      	bne.n	8006556 <dhcp_coarse_tmr+0xb6>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006572:	465a      	mov	r2, fp
 8006574:	4651      	mov	r1, sl
 8006576:	f7ff f907 	bl	8005788 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800657a:	9500      	str	r5, [sp, #0]
 800657c:	2343      	movs	r3, #67	; 0x43
 800657e:	4642      	mov	r2, r8
 8006580:	4659      	mov	r1, fp
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f005 fef6 	bl	800c374 <udp_sendto_if>
    pbuf_free(p_out);
 8006588:	4658      	mov	r0, fp
 800658a:	f002 f821 	bl	80085d0 <pbuf_free>
  if (dhcp->tries < 255) {
 800658e:	79a3      	ldrb	r3, [r4, #6]
 8006590:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006592:	bf1c      	itt	ne
 8006594:	3301      	addne	r3, #1
 8006596:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8006598:	79a3      	ldrb	r3, [r4, #6]
 800659a:	2b09      	cmp	r3, #9
 800659c:	bf96      	itet	ls
 800659e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80065a2:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80065a6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80065aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80065ae:	bf9c      	itt	ls
 80065b0:	00db      	lslls	r3, r3, #3
 80065b2:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80065b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80065b8:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80065bc:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80065be:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80065c0:	8aa3      	ldrh	r3, [r4, #20]
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	dd8a      	ble.n	80064de <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80065c8:	105b      	asrs	r3, r3, #1
 80065ca:	8223      	strh	r3, [r4, #16]
 80065cc:	e787      	b.n	80064de <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80065ce:	89e2      	ldrh	r2, [r4, #14]
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d084      	beq.n	80064de <dhcp_coarse_tmr+0x3e>
 80065d4:	1e51      	subs	r1, r2, #1
 80065d6:	2a01      	cmp	r2, #1
 80065d8:	81e1      	strh	r1, [r4, #14]
 80065da:	d180      	bne.n	80064de <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80065dc:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 80065e0:	2a01      	cmp	r2, #1
 80065e2:	d002      	beq.n	80065ea <dhcp_coarse_tmr+0x14a>
 80065e4:	2b0a      	cmp	r3, #10
 80065e6:	f47f af7a 	bne.w	80064de <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 80065ea:	4628      	mov	r0, r5
 80065ec:	f7ff fe22 	bl	8006234 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	8a62      	ldrh	r2, [r4, #18]
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80065f8:	bfc4      	itt	gt
 80065fa:	105b      	asrgt	r3, r3, #1
 80065fc:	81e3      	strhgt	r3, [r4, #14]
 80065fe:	e76e      	b.n	80064de <dhcp_coarse_tmr+0x3e>
 8006600:	2000879c 	.word	0x2000879c
 8006604:	0801131e 	.word	0x0801131e
 8006608:	20000440 	.word	0x20000440
 800660c:	08011324 	.word	0x08011324

08006610 <dhcp_fine_tmr>:
{
 8006610:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8006612:	4b1e      	ldr	r3, [pc, #120]	; (800668c <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 8006614:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8006616:	681c      	ldr	r4, [r3, #0]
 8006618:	b904      	cbnz	r4, 800661c <dhcp_fine_tmr+0xc>
}
 800661a:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800661c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 800661e:	b123      	cbz	r3, 800662a <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8006620:	891a      	ldrh	r2, [r3, #8]
 8006622:	2a01      	cmp	r2, #1
 8006624:	d903      	bls.n	800662e <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8006626:	3a01      	subs	r2, #1
 8006628:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 800662a:	6824      	ldr	r4, [r4, #0]
 800662c:	e7f4      	b.n	8006618 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 800662e:	d1fc      	bne.n	800662a <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006630:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8006632:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006634:	2a0c      	cmp	r2, #12
 8006636:	d001      	beq.n	800663c <dhcp_fine_tmr+0x2c>
 8006638:	2a06      	cmp	r2, #6
 800663a:	d103      	bne.n	8006644 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 800663c:	4620      	mov	r0, r4
      dhcp_discover(netif);
 800663e:	f7ff f9fb 	bl	8005a38 <dhcp_discover>
 8006642:	e7f2      	b.n	800662a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8006644:	2a01      	cmp	r2, #1
 8006646:	d10c      	bne.n	8006662 <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8006648:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 800664a:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 800664c:	2b05      	cmp	r3, #5
 800664e:	d802      	bhi.n	8006656 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8006650:	f7ff f936 	bl	80058c0 <dhcp_select>
 8006654:	e7e9      	b.n	800662a <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8006656:	f7ff fe6f 	bl	8006338 <dhcp_release_and_stop>
      dhcp_start(netif);
 800665a:	4620      	mov	r0, r4
 800665c:	f7ff fecc 	bl	80063f8 <dhcp_start>
 8006660:	e7e3      	b.n	800662a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8006662:	2a08      	cmp	r2, #8
 8006664:	d109      	bne.n	800667a <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 8006666:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8006668:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 800666a:	2b01      	cmp	r3, #1
 800666c:	d802      	bhi.n	8006674 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 800666e:	f7ff fa57 	bl	8005b20 <dhcp_check>
 8006672:	e7da      	b.n	800662a <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8006674:	f7ff fa6a 	bl	8005b4c <dhcp_bind>
 8006678:	e7d7      	b.n	800662a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800667a:	2a03      	cmp	r2, #3
 800667c:	d1d5      	bne.n	800662a <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 800667e:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8006680:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8006682:	2b01      	cmp	r3, #1
 8006684:	d8db      	bhi.n	800663e <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8006686:	f7ff f897 	bl	80057b8 <dhcp_reboot>
 800668a:	e7ce      	b.n	800662a <dhcp_fine_tmr+0x1a>
 800668c:	2000879c 	.word	0x2000879c

08006690 <dhcp_stop>:
  dhcp_release_and_stop(netif);
 8006690:	f7ff be52 	b.w	8006338 <dhcp_release_and_stop>

08006694 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8006694:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8006696:	2618      	movs	r6, #24
 8006698:	4c07      	ldr	r4, [pc, #28]	; (80066b8 <etharp_free_entry+0x24>)
{
 800669a:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800669c:	4346      	muls	r6, r0
 800669e:	59a0      	ldr	r0, [r4, r6]
 80066a0:	b118      	cbz	r0, 80066aa <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80066a2:	f001 ff95 	bl	80085d0 <pbuf_free>
    arp_table[i].q = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80066aa:	2318      	movs	r3, #24
 80066ac:	fb03 4405 	mla	r4, r3, r5, r4
 80066b0:	2300      	movs	r3, #0
 80066b2:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80066b4:	bd70      	pop	{r4, r5, r6, pc}
 80066b6:	bf00      	nop
 80066b8:	2000044c 	.word	0x2000044c

080066bc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80066bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80066c2:	f04f 0e0a 	mov.w	lr, #10
{
 80066c6:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80066c8:	4699      	mov	r9, r3
 80066ca:	469b      	mov	fp, r3
 80066cc:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 80066ce:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80066d0:	4675      	mov	r5, lr
 80066d2:	46f0      	mov	r8, lr
{
 80066d4:	e9cd 2100 	strd	r2, r1, [sp]
 80066d8:	4a3a      	ldr	r2, [pc, #232]	; (80067c4 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80066da:	2c0a      	cmp	r4, #10
 80066dc:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 80066de:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80066e2:	d11a      	bne.n	800671a <etharp_find_entry+0x5e>
 80066e4:	f1ba 0f00 	cmp.w	sl, #0
 80066e8:	d05d      	beq.n	80067a6 <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80066ea:	b156      	cbz	r6, 8006702 <etharp_find_entry+0x46>
 80066ec:	6837      	ldr	r7, [r6, #0]
 80066ee:	6851      	ldr	r1, [r2, #4]
 80066f0:	428f      	cmp	r7, r1
 80066f2:	d106      	bne.n	8006702 <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80066f4:	9900      	ldr	r1, [sp, #0]
 80066f6:	2900      	cmp	r1, #0
 80066f8:	d048      	beq.n	800678c <etharp_find_entry+0xd0>
 80066fa:	6891      	ldr	r1, [r2, #8]
 80066fc:	9f00      	ldr	r7, [sp, #0]
 80066fe:	42b9      	cmp	r1, r7
 8006700:	d044      	beq.n	800678c <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8006702:	f1ba 0f01 	cmp.w	sl, #1
 8006706:	8a51      	ldrh	r1, [r2, #18]
 8006708:	d148      	bne.n	800679c <etharp_find_entry+0xe0>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800670a:	6817      	ldr	r7, [r2, #0]
 800670c:	2f00      	cmp	r7, #0
 800670e:	d040      	beq.n	8006792 <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8006710:	458c      	cmp	ip, r1
 8006712:	d805      	bhi.n	8006720 <etharp_find_entry+0x64>
 8006714:	468c      	mov	ip, r1
 8006716:	4686      	mov	lr, r0
 8006718:	e002      	b.n	8006720 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 800671a:	f1ba 0f00 	cmp.w	sl, #0
 800671e:	d1e4      	bne.n	80066ea <etharp_find_entry+0x2e>
 8006720:	3301      	adds	r3, #1
 8006722:	3218      	adds	r2, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006724:	2b0a      	cmp	r3, #10
 8006726:	d1d8      	bne.n	80066da <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d143      	bne.n	80067b6 <etharp_find_entry+0xfa>
 800672e:	2c0a      	cmp	r4, #10
 8006730:	d111      	bne.n	8006756 <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8006732:	2d0a      	cmp	r5, #10
 8006734:	d039      	beq.n	80067aa <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8006736:	2318      	movs	r3, #24
 8006738:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <etharp_find_entry+0x108>)
 800673a:	436b      	muls	r3, r5
 800673c:	58d3      	ldr	r3, [r2, r3]
 800673e:	b133      	cbz	r3, 800674e <etharp_find_entry+0x92>
 8006740:	4b21      	ldr	r3, [pc, #132]	; (80067c8 <etharp_find_entry+0x10c>)
 8006742:	f240 126d 	movw	r2, #365	; 0x16d
 8006746:	4921      	ldr	r1, [pc, #132]	; (80067cc <etharp_find_entry+0x110>)
 8006748:	4821      	ldr	r0, [pc, #132]	; (80067d0 <etharp_find_entry+0x114>)
 800674a:	f005 ffbf 	bl	800c6cc <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800674e:	462c      	mov	r4, r5
 8006750:	4628      	mov	r0, r5
 8006752:	f7ff ff9f 	bl	8006694 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8006756:	4d1b      	ldr	r5, [pc, #108]	; (80067c4 <etharp_find_entry+0x108>)
 8006758:	2318      	movs	r3, #24
 800675a:	fb03 5304 	mla	r3, r3, r4, r5
 800675e:	7d1b      	ldrb	r3, [r3, #20]
 8006760:	b133      	cbz	r3, 8006770 <etharp_find_entry+0xb4>
 8006762:	4b19      	ldr	r3, [pc, #100]	; (80067c8 <etharp_find_entry+0x10c>)
 8006764:	f240 1285 	movw	r2, #389	; 0x185
 8006768:	491a      	ldr	r1, [pc, #104]	; (80067d4 <etharp_find_entry+0x118>)
 800676a:	4819      	ldr	r0, [pc, #100]	; (80067d0 <etharp_find_entry+0x114>)
 800676c:	f005 ffae 	bl	800c6cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8006770:	b126      	cbz	r6, 800677c <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8006772:	2318      	movs	r3, #24
 8006774:	6832      	ldr	r2, [r6, #0]
 8006776:	fb03 5304 	mla	r3, r3, r4, r5
 800677a:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800677c:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800677e:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8006780:	fb03 5504 	mla	r5, r3, r4, r5
 8006784:	2300      	movs	r3, #0
 8006786:	826b      	strh	r3, [r5, #18]
  arp_table[i].netif = netif;
 8006788:	9b00      	ldr	r3, [sp, #0]
 800678a:	60ab      	str	r3, [r5, #8]
}
 800678c:	b003      	add	sp, #12
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8006792:	458b      	cmp	fp, r1
 8006794:	d8c4      	bhi.n	8006720 <etharp_find_entry+0x64>
 8006796:	468b      	mov	fp, r1
 8006798:	4680      	mov	r8, r0
 800679a:	e7c1      	b.n	8006720 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 800679c:	4589      	cmp	r9, r1
 800679e:	d8bf      	bhi.n	8006720 <etharp_find_entry+0x64>
 80067a0:	4689      	mov	r9, r1
 80067a2:	4605      	mov	r5, r0
 80067a4:	e7bc      	b.n	8006720 <etharp_find_entry+0x64>
 80067a6:	4604      	mov	r4, r0
 80067a8:	e7ba      	b.n	8006720 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80067aa:	f1b8 0f0a 	cmp.w	r8, #10
 80067ae:	d105      	bne.n	80067bc <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80067b0:	f1be 0f0a 	cmp.w	lr, #10
 80067b4:	d104      	bne.n	80067c0 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	e7e7      	b.n	800678c <etharp_find_entry+0xd0>
 80067bc:	4645      	mov	r5, r8
 80067be:	e7c6      	b.n	800674e <etharp_find_entry+0x92>
 80067c0:	4675      	mov	r5, lr
 80067c2:	e7c4      	b.n	800674e <etharp_find_entry+0x92>
 80067c4:	2000044c 	.word	0x2000044c
 80067c8:	08011936 	.word	0x08011936
 80067cc:	08011990 	.word	0x08011990
 80067d0:	0801153a 	.word	0x0801153a
 80067d4:	080119a7 	.word	0x080119a7

080067d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80067d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80067de:	4689      	mov	r9, r1
 80067e0:	4692      	mov	sl, r2
 80067e2:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80067e4:	4607      	mov	r7, r0
 80067e6:	b930      	cbnz	r0, 80067f6 <etharp_raw+0x1e>
 80067e8:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <etharp_raw+0xc8>)
 80067ea:	f240 4257 	movw	r2, #1111	; 0x457
 80067ee:	492d      	ldr	r1, [pc, #180]	; (80068a4 <etharp_raw+0xcc>)
 80067f0:	482d      	ldr	r0, [pc, #180]	; (80068a8 <etharp_raw+0xd0>)
 80067f2:	f005 ff6b 	bl	800c6cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80067f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80067fa:	211c      	movs	r1, #28
 80067fc:	200e      	movs	r0, #14
 80067fe:	f001 ff49 	bl	8008694 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8006802:	4606      	mov	r6, r0
 8006804:	2800      	cmp	r0, #0
 8006806:	d047      	beq.n	8006898 <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8006808:	8943      	ldrh	r3, [r0, #10]
 800680a:	2b1b      	cmp	r3, #27
 800680c:	d806      	bhi.n	800681c <etharp_raw+0x44>
 800680e:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <etharp_raw+0xc8>)
 8006810:	f240 4263 	movw	r2, #1123	; 0x463
 8006814:	4925      	ldr	r1, [pc, #148]	; (80068ac <etharp_raw+0xd4>)
 8006816:	4824      	ldr	r0, [pc, #144]	; (80068a8 <etharp_raw+0xd0>)
 8006818:	f005 ff58 	bl	800c6cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800681c:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800681e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8006822:	f001 f997 	bl	8007b54 <lwip_htons>
 8006826:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8006828:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800682c:	2b06      	cmp	r3, #6
 800682e:	d006      	beq.n	800683e <etharp_raw+0x66>
 8006830:	4b1b      	ldr	r3, [pc, #108]	; (80068a0 <etharp_raw+0xc8>)
 8006832:	f240 426a 	movw	r2, #1130	; 0x46a
 8006836:	491e      	ldr	r1, [pc, #120]	; (80068b0 <etharp_raw+0xd8>)
 8006838:	481b      	ldr	r0, [pc, #108]	; (80068a8 <etharp_raw+0xd0>)
 800683a:	f005 ff47 	bl	800c6cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800683e:	f8d8 3000 	ldr.w	r3, [r8]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006842:	464a      	mov	r2, r9
 8006844:	4631      	mov	r1, r6
 8006846:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006848:	60a3      	str	r3, [r4, #8]
 800684a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800684e:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	f8c4 3012 	str.w	r3, [r4, #18]
 8006856:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006858:	2500      	movs	r5, #0
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800685a:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006866:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006868:	7025      	strb	r5, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800686a:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800686c:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800686e:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006870:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006872:	2308      	movs	r3, #8
 8006874:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8006876:	2306      	movs	r3, #6
 8006878:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800687a:	2304      	movs	r3, #4
 800687c:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800687e:	f640 0306 	movw	r3, #2054	; 0x806
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	4653      	mov	r3, sl
 8006886:	f005 fe9d 	bl	800c5c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800688a:	4630      	mov	r0, r6
 800688c:	f001 fea0 	bl	80085d0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8006890:	4628      	mov	r0, r5
}
 8006892:	b002      	add	sp, #8
 8006894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	e7f9      	b.n	8006892 <etharp_raw+0xba>
 800689e:	bf00      	nop
 80068a0:	08011936 	.word	0x08011936
 80068a4:	080117fc 	.word	0x080117fc
 80068a8:	0801153a 	.word	0x0801153a
 80068ac:	080119d0 	.word	0x080119d0
 80068b0:	08011a01 	.word	0x08011a01

080068b4 <etharp_cleanup_netif>:
{
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80068b8:	2400      	movs	r4, #0
 80068ba:	4e08      	ldr	r6, [pc, #32]	; (80068dc <etharp_cleanup_netif+0x28>)
 80068bc:	2718      	movs	r7, #24
 80068be:	fb07 6304 	mla	r3, r7, r4, r6
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80068c2:	7d1a      	ldrb	r2, [r3, #20]
 80068c4:	b12a      	cbz	r2, 80068d2 <etharp_cleanup_netif+0x1e>
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	d102      	bne.n	80068d2 <etharp_cleanup_netif+0x1e>
      etharp_free_entry(i);
 80068cc:	4620      	mov	r0, r4
 80068ce:	f7ff fee1 	bl	8006694 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80068d2:	3401      	adds	r4, #1
 80068d4:	2c0a      	cmp	r4, #10
 80068d6:	d1f2      	bne.n	80068be <etharp_cleanup_netif+0xa>
}
 80068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068da:	bf00      	nop
 80068dc:	2000044c 	.word	0x2000044c

080068e0 <etharp_input>:
{
 80068e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	4680      	mov	r8, r0
 80068e6:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80068e8:	460c      	mov	r4, r1
 80068ea:	b949      	cbnz	r1, 8006900 <etharp_input+0x20>
 80068ec:	4b4a      	ldr	r3, [pc, #296]	; (8006a18 <etharp_input+0x138>)
 80068ee:	f240 228a 	movw	r2, #650	; 0x28a
 80068f2:	494a      	ldr	r1, [pc, #296]	; (8006a1c <etharp_input+0x13c>)
 80068f4:	484a      	ldr	r0, [pc, #296]	; (8006a20 <etharp_input+0x140>)
 80068f6:	f005 fee9 	bl	800c6cc <iprintf>
}
 80068fa:	b006      	add	sp, #24
 80068fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8006900:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8006902:	8833      	ldrh	r3, [r6, #0]
 8006904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006908:	d108      	bne.n	800691c <etharp_input+0x3c>
 800690a:	7933      	ldrb	r3, [r6, #4]
 800690c:	2b06      	cmp	r3, #6
 800690e:	d105      	bne.n	800691c <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8006910:	7973      	ldrb	r3, [r6, #5]
 8006912:	2b04      	cmp	r3, #4
 8006914:	d102      	bne.n	800691c <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006916:	8873      	ldrh	r3, [r6, #2]
 8006918:	2b08      	cmp	r3, #8
 800691a:	d003      	beq.n	8006924 <etharp_input+0x44>
  pbuf_free(p);
 800691c:	4640      	mov	r0, r8
 800691e:	f001 fe57 	bl	80085d0 <pbuf_free>
 8006922:	e7ea      	b.n	80068fa <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006924:	f8d6 300e 	ldr.w	r3, [r6, #14]
 8006928:	f106 0708 	add.w	r7, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800692c:	684d      	ldr	r5, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800692e:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8006930:	69b3      	ldr	r3, [r6, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006932:	b115      	cbz	r5, 800693a <etharp_input+0x5a>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006934:	429d      	cmp	r5, r3
 8006936:	d05a      	beq.n	80069ee <etharp_input+0x10e>
    for_us = 0;
 8006938:	2500      	movs	r5, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800693a:	f04f 0a02 	mov.w	sl, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800693e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006942:	2b06      	cmp	r3, #6
 8006944:	d006      	beq.n	8006954 <etharp_input+0x74>
 8006946:	4b34      	ldr	r3, [pc, #208]	; (8006a18 <etharp_input+0x138>)
 8006948:	f240 12a9 	movw	r2, #425	; 0x1a9
 800694c:	4935      	ldr	r1, [pc, #212]	; (8006a24 <etharp_input+0x144>)
 800694e:	4834      	ldr	r0, [pc, #208]	; (8006a20 <etharp_input+0x140>)
 8006950:	f005 febc 	bl	800c6cc <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8006954:	9805      	ldr	r0, [sp, #20]
 8006956:	2800      	cmp	r0, #0
 8006958:	d03d      	beq.n	80069d6 <etharp_input+0xf6>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800695a:	4621      	mov	r1, r4
 800695c:	f000 fcd5 	bl	800730a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8006960:	4681      	mov	r9, r0
 8006962:	bbc0      	cbnz	r0, 80069d6 <etharp_input+0xf6>
      ip4_addr_ismulticast(ipaddr)) {
 8006964:	9b05      	ldr	r3, [sp, #20]
 8006966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800696a:	2be0      	cmp	r3, #224	; 0xe0
 800696c:	d033      	beq.n	80069d6 <etharp_input+0xf6>
  i = etharp_find_entry(ipaddr, flags, netif);
 800696e:	4622      	mov	r2, r4
 8006970:	4651      	mov	r1, sl
 8006972:	a805      	add	r0, sp, #20
 8006974:	f7ff fea2 	bl	80066bc <etharp_find_entry>
  if (i < 0) {
 8006978:	2800      	cmp	r0, #0
 800697a:	db2c      	blt.n	80069d6 <etharp_input+0xf6>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800697c:	2218      	movs	r2, #24
 800697e:	4b2a      	ldr	r3, [pc, #168]	; (8006a28 <etharp_input+0x148>)
 8006980:	f04f 0e02 	mov.w	lr, #2
 8006984:	fb02 f100 	mul.w	r1, r2, r0
 8006988:	eb03 0c01 	add.w	ip, r3, r1
 800698c:	f88c e014 	strb.w	lr, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8006990:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8006994:	f8cc 4008 	str.w	r4, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8006998:	fb10 e202 	smlabb	r2, r0, r2, lr
 800699c:	6838      	ldr	r0, [r7, #0]
 800699e:	eb03 0e02 	add.w	lr, r3, r2
 80069a2:	5098      	str	r0, [r3, r2]
 80069a4:	88ba      	ldrh	r2, [r7, #4]
 80069a6:	f8ae 2004 	strh.w	r2, [lr, #4]
  if (arp_table[i].q != NULL) {
 80069aa:	f853 a001 	ldr.w	sl, [r3, r1]
  arp_table[i].ctime = 0;
 80069ae:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 80069b2:	f1ba 0f00 	cmp.w	sl, #0
 80069b6:	d00e      	beq.n	80069d6 <etharp_input+0xf6>
    arp_table[i].q = NULL;
 80069b8:	f843 9001 	str.w	r9, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80069bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069c0:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 80069c4:	4651      	mov	r1, sl
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	4620      	mov	r0, r4
 80069ca:	463b      	mov	r3, r7
 80069cc:	f005 fdfa 	bl	800c5c4 <ethernet_output>
    pbuf_free(p);
 80069d0:	4650      	mov	r0, sl
 80069d2:	f001 fdfd 	bl	80085d0 <pbuf_free>
  switch (hdr->opcode) {
 80069d6:	88f3      	ldrh	r3, [r6, #6]
 80069d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069dc:	d00a      	beq.n	80069f4 <etharp_input+0x114>
 80069de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e2:	d19b      	bne.n	800691c <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 80069e4:	a905      	add	r1, sp, #20
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7ff fbc4 	bl	8006174 <dhcp_arp_reply>
      break;
 80069ec:	e796      	b.n	800691c <etharp_input+0x3c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80069ee:	2501      	movs	r5, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80069f0:	46aa      	mov	sl, r5
 80069f2:	e7a4      	b.n	800693e <etharp_input+0x5e>
      if (for_us) {
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	d091      	beq.n	800691c <etharp_input+0x3c>
        etharp_raw(netif,
 80069f8:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80069fa:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 80069fe:	4620      	mov	r0, r4
 8006a00:	9203      	str	r2, [sp, #12]
 8006a02:	aa05      	add	r2, sp, #20
 8006a04:	4619      	mov	r1, r3
 8006a06:	e9cd 7201 	strd	r7, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8006a0a:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8006a0c:	9200      	str	r2, [sp, #0]
 8006a0e:	463a      	mov	r2, r7
 8006a10:	f7ff fee2 	bl	80067d8 <etharp_raw>
 8006a14:	e782      	b.n	800691c <etharp_input+0x3c>
 8006a16:	bf00      	nop
 8006a18:	08011936 	.word	0x08011936
 8006a1c:	080117fc 	.word	0x080117fc
 8006a20:	0801153a 	.word	0x0801153a
 8006a24:	08011a83 	.word	0x08011a83
 8006a28:	2000044c 	.word	0x2000044c

08006a2c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a2e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006a30:	2401      	movs	r4, #1
 8006a32:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006a36:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006a38:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8006a3c:	4904      	ldr	r1, [pc, #16]	; (8006a50 <etharp_request+0x24>)
 8006a3e:	9200      	str	r2, [sp, #0]
 8006a40:	9101      	str	r1, [sp, #4]
 8006a42:	4619      	mov	r1, r3
 8006a44:	4a03      	ldr	r2, [pc, #12]	; (8006a54 <etharp_request+0x28>)
 8006a46:	f7ff fec7 	bl	80067d8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8006a4a:	b004      	add	sp, #16
 8006a4c:	bd10      	pop	{r4, pc}
 8006a4e:	bf00      	nop
 8006a50:	0801143e 	.word	0x0801143e
 8006a54:	08011438 	.word	0x08011438

08006a58 <etharp_tmr>:
{
 8006a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5c:	4c15      	ldr	r4, [pc, #84]	; (8006ab4 <etharp_tmr+0x5c>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006a5e:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8006a60:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8006a62:	2704      	movs	r7, #4
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8006a64:	f1a4 0804 	sub.w	r8, r4, #4
    u8_t state = arp_table[i].state;
 8006a68:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 8006a6a:	b16a      	cbz	r2, 8006a88 <etharp_tmr+0x30>
      arp_table[i].ctime++;
 8006a6c:	8963      	ldrh	r3, [r4, #10]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006a72:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8006a76:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006a78:	d203      	bcs.n	8006a82 <etharp_tmr+0x2a>
 8006a7a:	2a01      	cmp	r2, #1
 8006a7c:	d10a      	bne.n	8006a94 <etharp_tmr+0x3c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d90c      	bls.n	8006a9c <etharp_tmr+0x44>
        etharp_free_entry(i);
 8006a82:	4628      	mov	r0, r5
 8006a84:	f7ff fe06 	bl	8006694 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006a88:	3501      	adds	r5, #1
 8006a8a:	3418      	adds	r4, #24
 8006a8c:	2d0a      	cmp	r5, #10
 8006a8e:	d1eb      	bne.n	8006a68 <etharp_tmr+0x10>
}
 8006a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8006a94:	2a03      	cmp	r2, #3
 8006a96:	d108      	bne.n	8006aaa <etharp_tmr+0x52>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8006a98:	7327      	strb	r7, [r4, #12]
 8006a9a:	e7f5      	b.n	8006a88 <etharp_tmr+0x30>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8006a9c:	2118      	movs	r1, #24
 8006a9e:	6820      	ldr	r0, [r4, #0]
 8006aa0:	fb01 8105 	mla	r1, r1, r5, r8
 8006aa4:	f7ff ffc2 	bl	8006a2c <etharp_request>
 8006aa8:	e7ee      	b.n	8006a88 <etharp_tmr+0x30>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8006aaa:	2a04      	cmp	r2, #4
 8006aac:	d1ec      	bne.n	8006a88 <etharp_tmr+0x30>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8006aae:	7326      	strb	r6, [r4, #12]
 8006ab0:	e7ea      	b.n	8006a88 <etharp_tmr+0x30>
 8006ab2:	bf00      	nop
 8006ab4:	20000454 	.word	0x20000454

08006ab8 <etharp_output_to_arp_index>:
{
 8006ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006abc:	2318      	movs	r3, #24
 8006abe:	4d25      	ldr	r5, [pc, #148]	; (8006b54 <etharp_output_to_arp_index+0x9c>)
{
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	4606      	mov	r6, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006ac4:	fb03 5302 	mla	r3, r3, r2, r5
{
 8006ac8:	4689      	mov	r9, r1
 8006aca:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006acc:	7d1b      	ldrb	r3, [r3, #20]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d806      	bhi.n	8006ae0 <etharp_output_to_arp_index+0x28>
 8006ad2:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <etharp_output_to_arp_index+0xa0>)
 8006ad4:	f240 22ef 	movw	r2, #751	; 0x2ef
 8006ad8:	4920      	ldr	r1, [pc, #128]	; (8006b5c <etharp_output_to_arp_index+0xa4>)
 8006ada:	4821      	ldr	r0, [pc, #132]	; (8006b60 <etharp_output_to_arp_index+0xa8>)
 8006adc:	f005 fdf6 	bl	800c6cc <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8006ae0:	2318      	movs	r3, #24
 8006ae2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8006ae6:	f106 082a 	add.w	r8, r6, #42	; 0x2a
 8006aea:	fb03 5404 	mla	r4, r3, r4, r5
 8006aee:	00c9      	lsls	r1, r1, #3
 8006af0:	7d23      	ldrb	r3, [r4, #20]
 8006af2:	f101 070c 	add.w	r7, r1, #12
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	442f      	add	r7, r5
 8006afa:	d10b      	bne.n	8006b14 <etharp_output_to_arp_index+0x5c>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8006afc:	8a63      	ldrh	r3, [r4, #18]
 8006afe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006b02:	d913      	bls.n	8006b2c <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8006b04:	3104      	adds	r1, #4
 8006b06:	4630      	mov	r0, r6
 8006b08:	4429      	add	r1, r5
 8006b0a:	f7ff ff8f 	bl	8006a2c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006b0e:	b908      	cbnz	r0, 8006b14 <etharp_output_to_arp_index+0x5c>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8006b10:	2303      	movs	r3, #3
 8006b12:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8006b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b18:	4642      	mov	r2, r8
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	463b      	mov	r3, r7
 8006b22:	f005 fd4f 	bl	800c5c4 <ethernet_output>
}
 8006b26:	b005      	add	sp, #20
 8006b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8006b2c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006b30:	d3f0      	bcc.n	8006b14 <etharp_output_to_arp_index+0x5c>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006b32:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006b34:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006b36:	463a      	mov	r2, r7
 8006b38:	4630      	mov	r0, r6
 8006b3a:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006b3c:	4429      	add	r1, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <etharp_output_to_arp_index+0xac>)
 8006b40:	9102      	str	r1, [sp, #8]
 8006b42:	4641      	mov	r1, r8
 8006b44:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006b46:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	4643      	mov	r3, r8
 8006b4c:	f7ff fe44 	bl	80067d8 <etharp_raw>
 8006b50:	e7dd      	b.n	8006b0e <etharp_output_to_arp_index+0x56>
 8006b52:	bf00      	nop
 8006b54:	2000044c 	.word	0x2000044c
 8006b58:	08011936 	.word	0x08011936
 8006b5c:	08011aa7 	.word	0x08011aa7
 8006b60:	0801153a 	.word	0x0801153a
 8006b64:	0801143e 	.word	0x0801143e

08006b68 <etharp_query>:
{
 8006b68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	4689      	mov	r9, r1
 8006b6e:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006b70:	4601      	mov	r1, r0
{
 8006b72:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006b74:	f8d9 0000 	ldr.w	r0, [r9]
 8006b78:	f000 fbc7 	bl	800730a <ip4_addr_isbroadcast_u32>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f040 8081 	bne.w	8006c84 <etharp_query+0x11c>
      ip4_addr_ismulticast(ipaddr) ||
 8006b82:	f8d9 3000 	ldr.w	r3, [r9]
 8006b86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006b8a:	2ae0      	cmp	r2, #224	; 0xe0
 8006b8c:	d07a      	beq.n	8006c84 <etharp_query+0x11c>
      ip4_addr_isany(ipaddr)) {
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d078      	beq.n	8006c84 <etharp_query+0x11c>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8006b92:	463a      	mov	r2, r7
 8006b94:	2101      	movs	r1, #1
 8006b96:	4648      	mov	r0, r9
 8006b98:	f7ff fd90 	bl	80066bc <etharp_find_entry>
  if (i_err < 0) {
 8006b9c:	1e04      	subs	r4, r0, #0
 8006b9e:	da03      	bge.n	8006ba8 <etharp_query+0x40>
    return (err_t)i_err;
 8006ba0:	b260      	sxtb	r0, r4
}
 8006ba2:	b002      	add	sp, #8
 8006ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8006ba8:	2c7e      	cmp	r4, #126	; 0x7e
 8006baa:	dd06      	ble.n	8006bba <etharp_query+0x52>
 8006bac:	4b3e      	ldr	r3, [pc, #248]	; (8006ca8 <etharp_query+0x140>)
 8006bae:	f240 32c1 	movw	r2, #961	; 0x3c1
 8006bb2:	493e      	ldr	r1, [pc, #248]	; (8006cac <etharp_query+0x144>)
 8006bb4:	483e      	ldr	r0, [pc, #248]	; (8006cb0 <etharp_query+0x148>)
 8006bb6:	f005 fd89 	bl	800c6cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8006bba:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006bbc:	4e3d      	ldr	r6, [pc, #244]	; (8006cb4 <etharp_query+0x14c>)
 8006bbe:	2218      	movs	r2, #24
 8006bc0:	fb02 6204 	mla	r2, r2, r4, r6
 8006bc4:	7d13      	ldrb	r3, [r2, #20]
 8006bc6:	bb83      	cbnz	r3, 8006c2a <etharp_query+0xc2>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006bc8:	f04f 0801 	mov.w	r8, #1
    arp_table[i].netif = netif;
 8006bcc:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006bce:	f882 8014 	strb.w	r8, [r2, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8006bd2:	2318      	movs	r3, #24
 8006bd4:	fb03 6304 	mla	r3, r3, r4, r6
 8006bd8:	7d1b      	ldrb	r3, [r3, #20]
 8006bda:	b933      	cbnz	r3, 8006bea <etharp_query+0x82>
 8006bdc:	4b32      	ldr	r3, [pc, #200]	; (8006ca8 <etharp_query+0x140>)
 8006bde:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006be2:	4935      	ldr	r1, [pc, #212]	; (8006cb8 <etharp_query+0x150>)
 8006be4:	4832      	ldr	r0, [pc, #200]	; (8006cb0 <etharp_query+0x148>)
 8006be6:	f005 fd71 	bl	800c6cc <iprintf>
  if (is_new_entry || (q == NULL)) {
 8006bea:	f1b8 0f00 	cmp.w	r8, #0
 8006bee:	d101      	bne.n	8006bf4 <etharp_query+0x8c>
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	d14a      	bne.n	8006c8a <etharp_query+0x122>
    result = etharp_request(netif, ipaddr);
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f7ff ff18 	bl	8006a2c <etharp_request>
    if (q == NULL) {
 8006bfc:	2d00      	cmp	r5, #0
 8006bfe:	d0d0      	beq.n	8006ba2 <etharp_query+0x3a>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8006c00:	2318      	movs	r3, #24
 8006c02:	fb03 6204 	mla	r2, r3, r4, r6
 8006c06:	7d12      	ldrb	r2, [r2, #20]
 8006c08:	2a01      	cmp	r2, #1
 8006c0a:	d911      	bls.n	8006c30 <etharp_query+0xc8>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006c0c:	fb03 6304 	mla	r3, r3, r4, r6
 8006c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c14:	4629      	mov	r1, r5
 8006c16:	4638      	mov	r0, r7
 8006c18:	9200      	str	r2, [sp, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	f107 022a 	add.w	r2, r7, #42	; 0x2a
    ETHARP_SET_ADDRHINT(netif, i);
 8006c20:	f886 40f0 	strb.w	r4, [r6, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006c24:	f005 fcce 	bl	800c5c4 <ethernet_output>
 8006c28:	e7bb      	b.n	8006ba2 <etharp_query+0x3a>
  int is_new_entry = 0;
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	e7d0      	b.n	8006bd2 <etharp_query+0x6a>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8006c30:	d1b7      	bne.n	8006ba2 <etharp_query+0x3a>
 8006c32:	462f      	mov	r7, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8006c34:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8006ca8 <etharp_query+0x140>
 8006c38:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8006cbc <etharp_query+0x154>
 8006c3c:	f8df a070 	ldr.w	sl, [pc, #112]	; 8006cb0 <etharp_query+0x148>
 8006c40:	897a      	ldrh	r2, [r7, #10]
 8006c42:	893b      	ldrh	r3, [r7, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d108      	bne.n	8006c5a <etharp_query+0xf2>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	b133      	cbz	r3, 8006c5a <etharp_query+0xf2>
 8006c4c:	4643      	mov	r3, r8
 8006c4e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006c52:	4649      	mov	r1, r9
 8006c54:	4650      	mov	r0, sl
 8006c56:	f005 fd39 	bl	800c6cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8006c5a:	7b3b      	ldrb	r3, [r7, #12]
 8006c5c:	065b      	lsls	r3, r3, #25
 8006c5e:	d417      	bmi.n	8006c90 <etharp_query+0x128>
      p = p->next;
 8006c60:	683f      	ldr	r7, [r7, #0]
    while (p) {
 8006c62:	2f00      	cmp	r7, #0
 8006c64:	d1ec      	bne.n	8006c40 <etharp_query+0xd8>
      pbuf_ref(p);
 8006c66:	4628      	mov	r0, r5
 8006c68:	f001 fdf0 	bl	800884c <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8006c6c:	2318      	movs	r3, #24
 8006c6e:	fb03 f204 	mul.w	r2, r3, r4
 8006c72:	461f      	mov	r7, r3
 8006c74:	58b0      	ldr	r0, [r6, r2]
 8006c76:	b108      	cbz	r0, 8006c7c <etharp_query+0x114>
        pbuf_free(arp_table[i].q);
 8006c78:	f001 fcaa 	bl	80085d0 <pbuf_free>
      arp_table[i].q = p;
 8006c7c:	437c      	muls	r4, r7
      result = ERR_OK;
 8006c7e:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8006c80:	5135      	str	r5, [r6, r4]
 8006c82:	e78e      	b.n	8006ba2 <etharp_query+0x3a>
    return ERR_ARG;
 8006c84:	f06f 000f 	mvn.w	r0, #15
 8006c88:	e78b      	b.n	8006ba2 <etharp_query+0x3a>
  err_t result = ERR_MEM;
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	e7b7      	b.n	8006c00 <etharp_query+0x98>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8006c90:	462a      	mov	r2, r5
 8006c92:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006c96:	200e      	movs	r0, #14
 8006c98:	f001 fef8 	bl	8008a8c <pbuf_clone>
    if (p != NULL) {
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d1e4      	bne.n	8006c6c <etharp_query+0x104>
      result = ERR_MEM;
 8006ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca6:	e77c      	b.n	8006ba2 <etharp_query+0x3a>
 8006ca8:	08011936 	.word	0x08011936
 8006cac:	08011ad7 	.word	0x08011ad7
 8006cb0:	0801153a 	.word	0x0801153a
 8006cb4:	2000044c 	.word	0x2000044c
 8006cb8:	08011ae5 	.word	0x08011ae5
 8006cbc:	08011b0d 	.word	0x08011b0d

08006cc0 <etharp_output>:
{
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	460e      	mov	r6, r1
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006cc8:	4604      	mov	r4, r0
 8006cca:	b930      	cbnz	r0, 8006cda <etharp_output+0x1a>
 8006ccc:	4b41      	ldr	r3, [pc, #260]	; (8006dd4 <etharp_output+0x114>)
 8006cce:	f240 321e 	movw	r2, #798	; 0x31e
 8006cd2:	4941      	ldr	r1, [pc, #260]	; (8006dd8 <etharp_output+0x118>)
 8006cd4:	4841      	ldr	r0, [pc, #260]	; (8006ddc <etharp_output+0x11c>)
 8006cd6:	f005 fcf9 	bl	800c6cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006cda:	b936      	cbnz	r6, 8006cea <etharp_output+0x2a>
 8006cdc:	4b3d      	ldr	r3, [pc, #244]	; (8006dd4 <etharp_output+0x114>)
 8006cde:	f240 321f 	movw	r2, #799	; 0x31f
 8006ce2:	493f      	ldr	r1, [pc, #252]	; (8006de0 <etharp_output+0x120>)
 8006ce4:	483d      	ldr	r0, [pc, #244]	; (8006ddc <etharp_output+0x11c>)
 8006ce6:	f005 fcf1 	bl	800c6cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006cea:	b935      	cbnz	r5, 8006cfa <etharp_output+0x3a>
 8006cec:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <etharp_output+0x114>)
 8006cee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006cf2:	493c      	ldr	r1, [pc, #240]	; (8006de4 <etharp_output+0x124>)
 8006cf4:	4839      	ldr	r0, [pc, #228]	; (8006ddc <etharp_output+0x11c>)
 8006cf6:	f005 fce9 	bl	800c6cc <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	6828      	ldr	r0, [r5, #0]
 8006cfe:	f000 fb04 	bl	800730a <ip4_addr_isbroadcast_u32>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d160      	bne.n	8006dc8 <etharp_output+0x108>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006d06:	682b      	ldr	r3, [r5, #0]
 8006d08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d0c:	2ae0      	cmp	r2, #224	; 0xe0
 8006d0e:	d11b      	bne.n	8006d48 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8006d16:	235e      	movs	r3, #94	; 0x5e
 8006d18:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006d1c:	786b      	ldrb	r3, [r5, #1]
 8006d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d22:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006d26:	78ab      	ldrb	r3, [r5, #2]
 8006d28:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8006d2c:	78eb      	ldrb	r3, [r5, #3]
 8006d2e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8006d32:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8006d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	9200      	str	r2, [sp, #0]
 8006d3e:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8006d42:	f005 fc3f 	bl	800c5c4 <ethernet_output>
 8006d46:	e023      	b.n	8006d90 <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006d48:	6862      	ldr	r2, [r4, #4]
 8006d4a:	68a1      	ldr	r1, [r4, #8]
 8006d4c:	405a      	eors	r2, r3
 8006d4e:	420a      	tst	r2, r1
 8006d50:	d009      	beq.n	8006d66 <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
 8006d52:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006d54:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8006d5c:	68e3      	ldr	r3, [r4, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d034      	beq.n	8006dcc <etharp_output+0x10c>
            dst_addr = netif_ip4_gw(netif);
 8006d62:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8006d66:	4920      	ldr	r1, [pc, #128]	; (8006de8 <etharp_output+0x128>)
 8006d68:	2318      	movs	r3, #24
 8006d6a:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 8006d6e:	468c      	mov	ip, r1
 8006d70:	fb03 1302 	mla	r3, r3, r2, r1
 8006d74:	7d18      	ldrb	r0, [r3, #20]
 8006d76:	2801      	cmp	r0, #1
 8006d78:	d90c      	bls.n	8006d94 <etharp_output+0xd4>
 8006d7a:	6899      	ldr	r1, [r3, #8]
 8006d7c:	42a1      	cmp	r1, r4
 8006d7e:	d109      	bne.n	8006d94 <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8006d80:	6829      	ldr	r1, [r5, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	4299      	cmp	r1, r3
 8006d86:	d105      	bne.n	8006d94 <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f7ff fe94 	bl	8006ab8 <etharp_output_to_arp_index>
}
 8006d90:	b005      	add	sp, #20
 8006d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <etharp_output+0x12c>)
{
 8006d96:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006d98:	7c1f      	ldrb	r7, [r3, #16]
 8006d9a:	b2ca      	uxtb	r2, r1
 8006d9c:	2f01      	cmp	r7, #1
 8006d9e:	d909      	bls.n	8006db4 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 8006da0:	685f      	ldr	r7, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006da2:	42a7      	cmp	r7, r4
 8006da4:	d106      	bne.n	8006db4 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 8006da6:	681f      	ldr	r7, [r3, #0]
 8006da8:	6828      	ldr	r0, [r5, #0]
 8006daa:	42b8      	cmp	r0, r7
 8006dac:	d102      	bne.n	8006db4 <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
 8006dae:	f88c 20f0 	strb.w	r2, [ip, #240]	; 0xf0
 8006db2:	e7e9      	b.n	8006d88 <etharp_output+0xc8>
 8006db4:	3101      	adds	r1, #1
 8006db6:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006db8:	290a      	cmp	r1, #10
 8006dba:	d1ed      	bne.n	8006d98 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f7ff fed1 	bl	8006b68 <etharp_query>
 8006dc6:	e7e3      	b.n	8006d90 <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
 8006dc8:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <etharp_output+0x130>)
 8006dca:	e7b3      	b.n	8006d34 <etharp_output+0x74>
            return ERR_RTE;
 8006dcc:	f06f 0003 	mvn.w	r0, #3
 8006dd0:	e7de      	b.n	8006d90 <etharp_output+0xd0>
 8006dd2:	bf00      	nop
 8006dd4:	08011936 	.word	0x08011936
 8006dd8:	080117fc 	.word	0x080117fc
 8006ddc:	0801153a 	.word	0x0801153a
 8006de0:	080124b0 	.word	0x080124b0
 8006de4:	08011a64 	.word	0x08011a64
 8006de8:	2000044c 	.word	0x2000044c
 8006dec:	20000450 	.word	0x20000450
 8006df0:	08011438 	.word	0x08011438

08006df4 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8006df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df6:	4604      	mov	r4, r0
 8006df8:	b087      	sub	sp, #28
 8006dfa:	460f      	mov	r7, r1
 8006dfc:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006dfe:	2124      	movs	r1, #36	; 0x24
 8006e00:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006e04:	2022      	movs	r0, #34	; 0x22
 8006e06:	f001 fc45 	bl	8008694 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	b3a0      	cbz	r0, 8006e78 <icmp_send_response.isra.0+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006e0e:	8943      	ldrh	r3, [r0, #10]
 8006e10:	2b23      	cmp	r3, #35	; 0x23
 8006e12:	d806      	bhi.n	8006e22 <icmp_send_response.isra.0+0x2e>
 8006e14:	4b19      	ldr	r3, [pc, #100]	; (8006e7c <icmp_send_response.isra.0+0x88>)
 8006e16:	f240 1269 	movw	r2, #361	; 0x169
 8006e1a:	4919      	ldr	r1, [pc, #100]	; (8006e80 <icmp_send_response.isra.0+0x8c>)
 8006e1c:	4819      	ldr	r0, [pc, #100]	; (8006e84 <icmp_send_response.isra.0+0x90>)
 8006e1e:	f005 fc55 	bl	800c6cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006e22:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8006e24:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006e26:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006e28:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8006e2c:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006e2e:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8006e32:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8006e34:	71a3      	strb	r3, [r4, #6]
 8006e36:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006e38:	4613      	mov	r3, r2
  icmphdr->type = type;
 8006e3a:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8006e3c:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006e3e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006e42:	4283      	cmp	r3, r0
 8006e44:	f841 6b04 	str.w	r6, [r1], #4
 8006e48:	d1f9      	bne.n	8006e3e <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006e4a:	ae06      	add	r6, sp, #24
 8006e4c:	68d3      	ldr	r3, [r2, #12]
 8006e4e:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006e52:	4630      	mov	r0, r6
 8006e54:	f000 f8da 	bl	800700c <ip4_route>
#endif
  if (netif != NULL) {
 8006e58:	b158      	cbz	r0, 8006e72 <icmp_send_response.isra.0+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8006e5a:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8006e60:	70a1      	strb	r1, [r4, #2]
 8006e62:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006e64:	9002      	str	r0, [sp, #8]
 8006e66:	4628      	mov	r0, r5
 8006e68:	e9cd 1300 	strd	r1, r3, [sp]
 8006e6c:	23ff      	movs	r3, #255	; 0xff
 8006e6e:	f000 fa3b 	bl	80072e8 <ip4_output_if>
  }
  pbuf_free(q);
 8006e72:	4628      	mov	r0, r5
 8006e74:	f001 fbac 	bl	80085d0 <pbuf_free>
}
 8006e78:	b007      	add	sp, #28
 8006e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e7c:	08011b27 	.word	0x08011b27
 8006e80:	08011b7f 	.word	0x08011b7f
 8006e84:	0801153a 	.word	0x0801153a

08006e88 <icmp_input>:
  iphdr_in = ip4_current_header();
 8006e88:	4b48      	ldr	r3, [pc, #288]	; (8006fac <icmp_input+0x124>)
{
 8006e8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8006e8e:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8006e92:	b085      	sub	sp, #20
 8006e94:	4604      	mov	r4, r0
 8006e96:	4688      	mov	r8, r1
  hlen = IPH_HL_BYTES(iphdr_in);
 8006e98:	f899 5000 	ldrb.w	r5, [r9]
 8006e9c:	461f      	mov	r7, r3
 8006e9e:	f005 050f 	and.w	r5, r5, #15
 8006ea2:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8006ea4:	2d13      	cmp	r5, #19
 8006ea6:	d916      	bls.n	8006ed6 <icmp_input+0x4e>
  if (p->len < sizeof(u16_t) * 2) {
 8006ea8:	8942      	ldrh	r2, [r0, #10]
 8006eaa:	2a03      	cmp	r2, #3
 8006eac:	d913      	bls.n	8006ed6 <icmp_input+0x4e>
  type = *((u8_t *)p->payload);
 8006eae:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	2a08      	cmp	r2, #8
 8006eb4:	d10f      	bne.n	8006ed6 <icmp_input+0x4e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006eb6:	6958      	ldr	r0, [r3, #20]
 8006eb8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006ebc:	2ae0      	cmp	r2, #224	; 0xe0
 8006ebe:	d00a      	beq.n	8006ed6 <icmp_input+0x4e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8006ec0:	6819      	ldr	r1, [r3, #0]
 8006ec2:	f000 fa22 	bl	800730a <ip4_addr_isbroadcast_u32>
 8006ec6:	b930      	cbnz	r0, 8006ed6 <icmp_input+0x4e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8006ec8:	8923      	ldrh	r3, [r4, #8]
 8006eca:	2b07      	cmp	r3, #7
 8006ecc:	d903      	bls.n	8006ed6 <icmp_input+0x4e>
        if (inet_chksum_pbuf(p) != 0) {
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 fe72 	bl	8007bb8 <inet_chksum_pbuf>
 8006ed4:	b128      	cbz	r0, 8006ee2 <icmp_input+0x5a>
  pbuf_free(p);
 8006ed6:	4620      	mov	r0, r4
}
 8006ed8:	b005      	add	sp, #20
 8006eda:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8006ede:	f001 bb77 	b.w	80085d0 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006ee2:	f105 060e 	add.w	r6, r5, #14
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4631      	mov	r1, r6
 8006eea:	f001 fb3a 	bl	8008562 <pbuf_add_header>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d04e      	beq.n	8006f90 <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8006ef2:	8923      	ldrh	r3, [r4, #8]
 8006ef4:	1959      	adds	r1, r3, r5
 8006ef6:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8006ef8:	428b      	cmp	r3, r1
 8006efa:	d8ec      	bhi.n	8006ed6 <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8006efc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006f00:	200e      	movs	r0, #14
 8006f02:	f001 fbc7 	bl	8008694 <pbuf_alloc>
        if (r == NULL) {
 8006f06:	4606      	mov	r6, r0
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d0e4      	beq.n	8006ed6 <icmp_input+0x4e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8006f0c:	8942      	ldrh	r2, [r0, #10]
 8006f0e:	f105 0308 	add.w	r3, r5, #8
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d203      	bcs.n	8006f1e <icmp_input+0x96>
          pbuf_free(r);
 8006f16:	4630      	mov	r0, r6
 8006f18:	f001 fb5a 	bl	80085d0 <pbuf_free>
          goto icmperr;
 8006f1c:	e7db      	b.n	8006ed6 <icmp_input+0x4e>
        MEMCPY(r->payload, iphdr_in, hlen);
 8006f1e:	4649      	mov	r1, r9
 8006f20:	462a      	mov	r2, r5
 8006f22:	6840      	ldr	r0, [r0, #4]
 8006f24:	f005 fbbf 	bl	800c6a6 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f001 fb1c 	bl	8008568 <pbuf_remove_header>
 8006f30:	b130      	cbz	r0, 8006f40 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8006f32:	4b1f      	ldr	r3, [pc, #124]	; (8006fb0 <icmp_input+0x128>)
 8006f34:	22b6      	movs	r2, #182	; 0xb6
 8006f36:	491f      	ldr	r1, [pc, #124]	; (8006fb4 <icmp_input+0x12c>)
 8006f38:	481f      	ldr	r0, [pc, #124]	; (8006fb8 <icmp_input+0x130>)
 8006f3a:	f005 fbc7 	bl	800c6cc <iprintf>
 8006f3e:	e7ea      	b.n	8006f16 <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8006f40:	4621      	mov	r1, r4
 8006f42:	4630      	mov	r0, r6
 8006f44:	f001 fcda 	bl	80088fc <pbuf_copy>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d1e4      	bne.n	8006f16 <icmp_input+0x8e>
        pbuf_free(p);
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4634      	mov	r4, r6
 8006f50:	f001 fb3e 	bl	80085d0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8006f54:	4629      	mov	r1, r5
 8006f56:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8006f58:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8006f5a:	f001 fb02 	bl	8008562 <pbuf_add_header>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d1b8      	bne.n	8006ed6 <icmp_input+0x4e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8006f64:	6861      	ldr	r1, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	610b      	str	r3, [r1, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8006f6e:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8006f70:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8006f72:	70b0      	strb	r0, [r6, #2]
 8006f74:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8006f76:	720b      	strb	r3, [r1, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8006f78:	7288      	strb	r0, [r1, #10]
 8006f7a:	72c8      	strb	r0, [r1, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	f8cd 8008 	str.w	r8, [sp, #8]
 8006f82:	e9cd 0100 	strd	r0, r1, [sp]
 8006f86:	490d      	ldr	r1, [pc, #52]	; (8006fbc <icmp_input+0x134>)
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 f9ad 	bl	80072e8 <ip4_output_if>
 8006f8e:	e7a2      	b.n	8006ed6 <icmp_input+0x4e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006f90:	4631      	mov	r1, r6
 8006f92:	4620      	mov	r0, r4
 8006f94:	f001 fae8 	bl	8008568 <pbuf_remove_header>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d0db      	beq.n	8006f54 <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8006f9c:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <icmp_input+0x128>)
 8006f9e:	22c7      	movs	r2, #199	; 0xc7
 8006fa0:	4907      	ldr	r1, [pc, #28]	; (8006fc0 <icmp_input+0x138>)
 8006fa2:	4805      	ldr	r0, [pc, #20]	; (8006fb8 <icmp_input+0x130>)
 8006fa4:	f005 fb92 	bl	800c6cc <iprintf>
          goto icmperr;
 8006fa8:	e795      	b.n	8006ed6 <icmp_input+0x4e>
 8006faa:	bf00      	nop
 8006fac:	200043d0 	.word	0x200043d0
 8006fb0:	08011b27 	.word	0x08011b27
 8006fb4:	08011bab 	.word	0x08011bab
 8006fb8:	0801153a 	.word	0x0801153a
 8006fbc:	200043e4 	.word	0x200043e4
 8006fc0:	08011be0 	.word	0x08011be0

08006fc4 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8006fc4:	460a      	mov	r2, r1
 8006fc6:	3004      	adds	r0, #4
 8006fc8:	2103      	movs	r1, #3
 8006fca:	f7ff bf13 	b.w	8006df4 <icmp_send_response.isra.0>

08006fce <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8006fce:	460a      	mov	r2, r1
 8006fd0:	3004      	adds	r0, #4
 8006fd2:	210b      	movs	r1, #11
 8006fd4:	f7ff bf0e 	b.w	8006df4 <icmp_send_response.isra.0>

08006fd8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8006fd8:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006fda:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 8006fde:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006fe0:	f013 0301 	ands.w	r3, r3, #1
 8006fe4:	d00b      	beq.n	8006ffe <ip4_input_accept+0x26>
 8006fe6:	6843      	ldr	r3, [r0, #4]
 8006fe8:	b14b      	cbz	r3, 8006ffe <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006fea:	4a07      	ldr	r2, [pc, #28]	; (8007008 <ip4_input_accept+0x30>)
 8006fec:	6950      	ldr	r0, [r2, #20]
 8006fee:	4283      	cmp	r3, r0
 8006ff0:	d007      	beq.n	8007002 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006ff2:	f000 f98a 	bl	800730a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006ff6:	3000      	adds	r0, #0
 8006ff8:	bf18      	it	ne
 8006ffa:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8006ffc:	bd08      	pop	{r3, pc}
  return 0;
 8006ffe:	4618      	mov	r0, r3
 8007000:	e7fc      	b.n	8006ffc <ip4_input_accept+0x24>
      return 1;
 8007002:	2001      	movs	r0, #1
 8007004:	e7fa      	b.n	8006ffc <ip4_input_accept+0x24>
 8007006:	bf00      	nop
 8007008:	200043d0 	.word	0x200043d0

0800700c <ip4_route>:
  NETIF_FOREACH(netif) {
 800700c:	4b14      	ldr	r3, [pc, #80]	; (8007060 <ip4_route+0x54>)
{
 800700e:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	b97b      	cbnz	r3, 8007034 <ip4_route+0x28>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8007014:	4a13      	ldr	r2, [pc, #76]	; (8007064 <ip4_route+0x58>)
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	b1fa      	cbz	r2, 800705a <ip4_route+0x4e>
 800701a:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800701e:	f001 0105 	and.w	r1, r1, #5
 8007022:	2905      	cmp	r1, #5
 8007024:	d119      	bne.n	800705a <ip4_route+0x4e>
 8007026:	6851      	ldr	r1, [r2, #4]
 8007028:	b1b9      	cbz	r1, 800705a <ip4_route+0x4e>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800702a:	7801      	ldrb	r1, [r0, #0]
 800702c:	297f      	cmp	r1, #127	; 0x7f
 800702e:	bf18      	it	ne
 8007030:	4613      	movne	r3, r2
 8007032:	e012      	b.n	800705a <ip4_route+0x4e>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007034:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8007038:	07cd      	lsls	r5, r1, #31
 800703a:	d5e9      	bpl.n	8007010 <ip4_route+0x4>
 800703c:	074c      	lsls	r4, r1, #29
 800703e:	d5e7      	bpl.n	8007010 <ip4_route+0x4>
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	2a00      	cmp	r2, #0
 8007044:	d0e4      	beq.n	8007010 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8007046:	6804      	ldr	r4, [r0, #0]
 8007048:	689d      	ldr	r5, [r3, #8]
 800704a:	4062      	eors	r2, r4
 800704c:	422a      	tst	r2, r5
 800704e:	d004      	beq.n	800705a <ip4_route+0x4e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8007050:	078a      	lsls	r2, r1, #30
 8007052:	d4dd      	bmi.n	8007010 <ip4_route+0x4>
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	4294      	cmp	r4, r2
 8007058:	d1da      	bne.n	8007010 <ip4_route+0x4>
}
 800705a:	4618      	mov	r0, r3
 800705c:	bd30      	pop	{r4, r5, pc}
 800705e:	bf00      	nop
 8007060:	2000879c 	.word	0x2000879c
 8007064:	200087a0 	.word	0x200087a0

08007068 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8007068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800706c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8007070:	4605      	mov	r5, r0
 8007072:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 8007074:	f898 9000 	ldrb.w	r9, [r8]
 8007078:	ea4f 1319 	mov.w	r3, r9, lsr #4
 800707c:	2b04      	cmp	r3, #4
 800707e:	d005      	beq.n	800708c <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8007080:	4628      	mov	r0, r5
 8007082:	f001 faa5 	bl	80085d0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8007086:	2000      	movs	r0, #0
 8007088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800708c:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8007090:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007094:	f000 fd5e 	bl	8007b54 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8007098:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800709a:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800709e:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80070a0:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80070a2:	fa1f f689 	uxth.w	r6, r9
  if (iphdr_len < p->tot_len) {
 80070a6:	d903      	bls.n	80070b0 <ip4_input+0x48>
    pbuf_realloc(p, iphdr_len);
 80070a8:	4601      	mov	r1, r0
 80070aa:	4628      	mov	r0, r5
 80070ac:	f001 fb6e 	bl	800878c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80070b0:	896b      	ldrh	r3, [r5, #10]
 80070b2:	42b3      	cmp	r3, r6
 80070b4:	d3e4      	bcc.n	8007080 <ip4_input+0x18>
 80070b6:	892b      	ldrh	r3, [r5, #8]
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	d3e1      	bcc.n	8007080 <ip4_input+0x18>
 80070bc:	2e13      	cmp	r6, #19
 80070be:	d9df      	bls.n	8007080 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80070c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80070c4:	4c49      	ldr	r4, [pc, #292]	; (80071ec <ip4_input+0x184>)
 80070c6:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80070c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80070cc:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80070d0:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80070d2:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80070d4:	d143      	bne.n	800715e <ip4_input+0xf6>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80070d6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80070da:	07db      	lsls	r3, r3, #31
 80070dc:	d405      	bmi.n	80070ea <ip4_input+0x82>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80070de:	f898 3009 	ldrb.w	r3, [r8, #9]
 80070e2:	2b11      	cmp	r3, #17
 80070e4:	d053      	beq.n	800718e <ip4_input+0x126>
 80070e6:	2600      	movs	r6, #0
 80070e8:	e003      	b.n	80070f2 <ip4_input+0x8a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f6      	beq.n	80070de <ip4_input+0x76>
{
 80070f0:	463e      	mov	r6, r7
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80070f2:	6920      	ldr	r0, [r4, #16]
 80070f4:	b148      	cbz	r0, 800710a <ip4_input+0xa2>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80070f6:	4639      	mov	r1, r7
 80070f8:	f000 f907 	bl	800730a <ip4_addr_isbroadcast_u32>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d1bf      	bne.n	8007080 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8007106:	2be0      	cmp	r3, #224	; 0xe0
 8007108:	d0ba      	beq.n	8007080 <ip4_input+0x18>
  if (netif == NULL) {
 800710a:	2e00      	cmp	r6, #0
 800710c:	d0b8      	beq.n	8007080 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800710e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8007112:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007116:	b13b      	cbz	r3, 8007128 <ip4_input+0xc0>
    p = ip4_reass(p);
 8007118:	4628      	mov	r0, r5
 800711a:	f000 fa77 	bl	800760c <ip4_reass>
    if (p == NULL) {
 800711e:	4605      	mov	r5, r0
 8007120:	2800      	cmp	r0, #0
 8007122:	d0b0      	beq.n	8007086 <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 8007124:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8007128:	f8c4 8008 	str.w	r8, [r4, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800712c:	4649      	mov	r1, r9
 800712e:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 8007130:	e9c4 6700 	strd	r6, r7, [r4]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8007134:	f898 3000 	ldrb.w	r3, [r8]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	81a3      	strh	r3, [r4, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007140:	f001 fa12 	bl	8008568 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8007144:	f898 3009 	ldrb.w	r3, [r8, #9]
 8007148:	2b06      	cmp	r3, #6
 800714a:	d034      	beq.n	80071b6 <ip4_input+0x14e>
 800714c:	2b11      	cmp	r3, #17
 800714e:	d026      	beq.n	800719e <ip4_input+0x136>
 8007150:	2b01      	cmp	r3, #1
 8007152:	d135      	bne.n	80071c0 <ip4_input+0x158>
        icmp_input(p, inp);
 8007154:	4639      	mov	r1, r7
 8007156:	4628      	mov	r0, r5
 8007158:	f7ff fe96 	bl	8006e88 <icmp_input>
        break;
 800715c:	e023      	b.n	80071a6 <ip4_input+0x13e>
    if (ip4_input_accept(inp)) {
 800715e:	4638      	mov	r0, r7
 8007160:	f7ff ff3a 	bl	8006fd8 <ip4_input_accept>
 8007164:	b980      	cbnz	r0, 8007188 <ip4_input+0x120>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8007166:	7d23      	ldrb	r3, [r4, #20]
 8007168:	2b7f      	cmp	r3, #127	; 0x7f
 800716a:	d0b8      	beq.n	80070de <ip4_input+0x76>
        NETIF_FOREACH(netif) {
 800716c:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <ip4_input+0x188>)
 800716e:	681e      	ldr	r6, [r3, #0]
 8007170:	2e00      	cmp	r6, #0
 8007172:	d0b4      	beq.n	80070de <ip4_input+0x76>
          if (netif == inp) {
 8007174:	42be      	cmp	r6, r7
 8007176:	d101      	bne.n	800717c <ip4_input+0x114>
        NETIF_FOREACH(netif) {
 8007178:	6836      	ldr	r6, [r6, #0]
 800717a:	e7f9      	b.n	8007170 <ip4_input+0x108>
          if (ip4_input_accept(netif)) {
 800717c:	4630      	mov	r0, r6
 800717e:	f7ff ff2b 	bl	8006fd8 <ip4_input_accept>
 8007182:	2800      	cmp	r0, #0
 8007184:	d0f8      	beq.n	8007178 <ip4_input+0x110>
 8007186:	e7b4      	b.n	80070f2 <ip4_input+0x8a>
  if (netif == NULL) {
 8007188:	2f00      	cmp	r7, #0
 800718a:	d1b1      	bne.n	80070f0 <ip4_input+0x88>
 800718c:	e7a7      	b.n	80070de <ip4_input+0x76>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800718e:	eb08 0309 	add.w	r3, r8, r9
 8007192:	885b      	ldrh	r3, [r3, #2]
 8007194:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8007198:	d1a5      	bne.n	80070e6 <ip4_input+0x7e>
 800719a:	463e      	mov	r6, r7
 800719c:	e7b5      	b.n	800710a <ip4_input+0xa2>
        udp_input(p, inp);
 800719e:	4639      	mov	r1, r7
 80071a0:	4628      	mov	r0, r5
 80071a2:	f004 ff15 	bl	800bfd0 <udp_input>
  ip_data.current_netif = NULL;
 80071a6:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 80071a8:	e9c4 3300 	strd	r3, r3, [r4]
  ip_data.current_ip4_header = NULL;
 80071ac:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 80071ae:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 80071b0:	e9c4 3304 	strd	r3, r3, [r4, #16]
  return ERR_OK;
 80071b4:	e767      	b.n	8007086 <ip4_input+0x1e>
        tcp_input(p, inp);
 80071b6:	4639      	mov	r1, r7
 80071b8:	4628      	mov	r0, r5
 80071ba:	f002 ffd9 	bl	800a170 <tcp_input>
        break;
 80071be:	e7f2      	b.n	80071a6 <ip4_input+0x13e>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80071c0:	4631      	mov	r1, r6
 80071c2:	6960      	ldr	r0, [r4, #20]
 80071c4:	f000 f8a1 	bl	800730a <ip4_addr_isbroadcast_u32>
 80071c8:	b960      	cbnz	r0, 80071e4 <ip4_input+0x17c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80071ca:	6963      	ldr	r3, [r4, #20]
 80071cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80071d0:	2be0      	cmp	r3, #224	; 0xe0
 80071d2:	d007      	beq.n	80071e4 <ip4_input+0x17c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80071d4:	4649      	mov	r1, r9
 80071d6:	4628      	mov	r0, r5
 80071d8:	f001 f9f2 	bl	80085c0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80071dc:	2102      	movs	r1, #2
 80071de:	4628      	mov	r0, r5
 80071e0:	f7ff fef0 	bl	8006fc4 <icmp_dest_unreach>
        pbuf_free(p);
 80071e4:	4628      	mov	r0, r5
 80071e6:	f001 f9f3 	bl	80085d0 <pbuf_free>
        break;
 80071ea:	e7dc      	b.n	80071a6 <ip4_input+0x13e>
 80071ec:	200043d0 	.word	0x200043d0
 80071f0:	2000879c 	.word	0x2000879c

080071f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80071f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80071fa:	7b83      	ldrb	r3, [r0, #14]
{
 80071fc:	4605      	mov	r5, r0
 80071fe:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007200:	2b01      	cmp	r3, #1
{
 8007202:	4616      	mov	r6, r2
 8007204:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007208:	d006      	beq.n	8007218 <ip4_output_if_src+0x24>
 800720a:	4b31      	ldr	r3, [pc, #196]	; (80072d0 <ip4_output_if_src+0xdc>)
 800720c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8007210:	4930      	ldr	r1, [pc, #192]	; (80072d4 <ip4_output_if_src+0xe0>)
 8007212:	4831      	ldr	r0, [pc, #196]	; (80072d8 <ip4_output_if_src+0xe4>)
 8007214:	f005 fa5a 	bl	800c6cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8007218:	2e00      	cmp	r6, #0
 800721a:	d049      	beq.n	80072b0 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800721c:	2114      	movs	r1, #20
 800721e:	4628      	mov	r0, r5
 8007220:	f001 f99f 	bl	8008562 <pbuf_add_header>
 8007224:	b120      	cbz	r0, 8007230 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8007226:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800722a:	b002      	add	sp, #8
 800722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8007230:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8007232:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8007234:	2b13      	cmp	r3, #19
 8007236:	d806      	bhi.n	8007246 <ip4_output_if_src+0x52>
 8007238:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <ip4_output_if_src+0xdc>)
 800723a:	f240 3289 	movw	r2, #905	; 0x389
 800723e:	4927      	ldr	r1, [pc, #156]	; (80072dc <ip4_output_if_src+0xe8>)
 8007240:	4825      	ldr	r0, [pc, #148]	; (80072d8 <ip4_output_if_src+0xe4>)
 8007242:	f005 fa43 	bl	800c6cc <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8007246:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800724a:	7227      	strb	r7, [r4, #8]
    IPH_OFFSET_SET(iphdr, 0);
 800724c:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 800724e:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8007250:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007252:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80072e4 <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 8007256:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8007258:	2345      	movs	r3, #69	; 0x45
 800725a:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800725c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8007260:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8007262:	8928      	ldrh	r0, [r5, #8]
 8007264:	f000 fc76 	bl	8007b54 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8007268:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800726a:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800726c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800726e:	f8b9 0000 	ldrh.w	r0, [r9]
 8007272:	f000 fc6f 	bl	8007b54 <lwip_htons>
    ++ip_id;
 8007276:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800727a:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800727c:	3301      	adds	r3, #1
 800727e:	f8a9 3000 	strh.w	r3, [r9]
    if (src == NULL) {
 8007282:	f1ba 0f00 	cmp.w	sl, #0
 8007286:	d110      	bne.n	80072aa <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8007288:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <ip4_output_if_src+0xec>)
 800728a:	681b      	ldr	r3, [r3, #0]
      ip4_addr_copy(iphdr->src, *src);
 800728c:	60e3      	str	r3, [r4, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800728e:	72a7      	strb	r7, [r4, #10]
 8007290:	72e7      	strb	r7, [r4, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8007292:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 8007296:	b1a3      	cbz	r3, 80072c2 <ip4_output_if_src+0xce>
 8007298:	892a      	ldrh	r2, [r5, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	d911      	bls.n	80072c2 <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
 800729e:	4632      	mov	r2, r6
 80072a0:	4641      	mov	r1, r8
 80072a2:	4628      	mov	r0, r5
 80072a4:	f000 fb74 	bl	8007990 <ip4_frag>
 80072a8:	e7bf      	b.n	800722a <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 80072aa:	f8da 3000 	ldr.w	r3, [sl]
 80072ae:	e7ed      	b.n	800728c <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 80072b0:	896b      	ldrh	r3, [r5, #10]
 80072b2:	2b13      	cmp	r3, #19
 80072b4:	d9b7      	bls.n	8007226 <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80072b6:	686b      	ldr	r3, [r5, #4]
 80072b8:	ae02      	add	r6, sp, #8
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f846 3d04 	str.w	r3, [r6, #-4]!
 80072c0:	e7e7      	b.n	8007292 <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 80072c2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80072c6:	4632      	mov	r2, r6
 80072c8:	4629      	mov	r1, r5
 80072ca:	4640      	mov	r0, r8
 80072cc:	4798      	blx	r3
 80072ce:	e7ac      	b.n	800722a <ip4_output_if_src+0x36>
 80072d0:	08011c12 	.word	0x08011c12
 80072d4:	08011c69 	.word	0x08011c69
 80072d8:	0801153a 	.word	0x0801153a
 80072dc:	08011c75 	.word	0x08011c75
 80072e0:	08011328 	.word	0x08011328
 80072e4:	2000053e 	.word	0x2000053e

080072e8 <ip4_output_if>:
{
 80072e8:	b4f0      	push	{r4, r5, r6, r7}
 80072ea:	9c06      	ldr	r4, [sp, #24]
 80072ec:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80072f0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80072f4:	b11a      	cbz	r2, 80072fe <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80072f6:	b109      	cbz	r1, 80072fc <ip4_output_if+0x14>
 80072f8:	680f      	ldr	r7, [r1, #0]
 80072fa:	b907      	cbnz	r7, 80072fe <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80072fc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80072fe:	9504      	str	r5, [sp, #16]
 8007300:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8007304:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8007306:	f7ff bf75 	b.w	80071f4 <ip4_output_if_src>

0800730a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800730a:	1e43      	subs	r3, r0, #1
 800730c:	3303      	adds	r3, #3
 800730e:	d811      	bhi.n	8007334 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8007310:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8007314:	f013 0302 	ands.w	r3, r3, #2
 8007318:	d00e      	beq.n	8007338 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800731a:	684a      	ldr	r2, [r1, #4]
 800731c:	4282      	cmp	r2, r0
 800731e:	d00b      	beq.n	8007338 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8007320:	688b      	ldr	r3, [r1, #8]
 8007322:	4042      	eors	r2, r0
 8007324:	421a      	tst	r2, r3
 8007326:	d107      	bne.n	8007338 <ip4_addr_isbroadcast_u32+0x2e>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8007328:	43db      	mvns	r3, r3
 800732a:	4383      	bics	r3, r0
    return 1;
 800732c:	bf0c      	ite	eq
 800732e:	2001      	moveq	r0, #1
 8007330:	2000      	movne	r0, #0
 8007332:	4770      	bx	lr
 8007334:	2001      	movs	r0, #1
 8007336:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8007338:	2000      	movs	r0, #0
  }
}
 800733a:	4770      	bx	lr

0800733c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800733c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8007340:	6803      	ldr	r3, [r0, #0]
 8007342:	a802      	add	r0, sp, #8

  rp = buf;
 8007344:	460f      	mov	r7, r1
  int len = 0;
 8007346:	2500      	movs	r5, #0
  s_addr = ip4_addr_get_u32(addr);
 8007348:	f840 3d04 	str.w	r3, [r0, #-4]!
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 800734c:	ab02      	add	r3, sp, #8
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 800734e:	f04f 0c0a 	mov.w	ip, #10
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 8007352:	f04f 082e 	mov.w	r8, #46	; 0x2e
  for (n = 0; n < 4; n++) {
 8007356:	fa5f fe83 	uxtb.w	lr, r3
 800735a:	f810 4b01 	ldrb.w	r4, [r0], #1
    i = 0;
 800735e:	2300      	movs	r3, #0
      inv[i++] = (char)('0' + rem);
 8007360:	f10d 0a08 	add.w	sl, sp, #8
 8007364:	f103 0901 	add.w	r9, r3, #1
      rem = *ap % (u8_t)10;
 8007368:	fbb4 f6fc 	udiv	r6, r4, ip
 800736c:	fb0c 4416 	mls	r4, ip, r6, r4
      inv[i++] = (char)('0' + rem);
 8007370:	449a      	add	sl, r3
 8007372:	fa5f f989 	uxtb.w	r9, r9
 8007376:	3430      	adds	r4, #48	; 0x30
 8007378:	f80a 4c08 	strb.w	r4, [sl, #-8]
    } while (*ap);
 800737c:	f016 04ff 	ands.w	r4, r6, #255	; 0xff
 8007380:	d115      	bne.n	80073ae <ip4addr_ntoa_r+0x72>
 8007382:	f800 4c01 	strb.w	r4, [r0, #-1]
 8007386:	462e      	mov	r6, r5
 8007388:	463c      	mov	r4, r7
    while (i--) {
 800738a:	2bff      	cmp	r3, #255	; 0xff
 800738c:	f105 0501 	add.w	r5, r5, #1
 8007390:	d10f      	bne.n	80073b2 <ip4addr_ntoa_r+0x76>
    if (len++ >= buflen) {
 8007392:	4296      	cmp	r6, r2
 8007394:	da1a      	bge.n	80073cc <ip4addr_ntoa_r+0x90>
  for (n = 0; n < 4; n++) {
 8007396:	b2c3      	uxtb	r3, r0
    *rp++ = '.';
 8007398:	1c67      	adds	r7, r4, #1
 800739a:	f884 8000 	strb.w	r8, [r4]
  for (n = 0; n < 4; n++) {
 800739e:	459e      	cmp	lr, r3
 80073a0:	d1db      	bne.n	800735a <ip4addr_ntoa_r+0x1e>
    ap++;
  }
  *--rp = 0;
 80073a2:	2300      	movs	r3, #0
  return buf;
 80073a4:	4608      	mov	r0, r1
  *--rp = 0;
 80073a6:	7023      	strb	r3, [r4, #0]
}
 80073a8:	b002      	add	sp, #8
 80073aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      inv[i++] = (char)('0' + rem);
 80073ae:	464b      	mov	r3, r9
 80073b0:	e7d6      	b.n	8007360 <ip4addr_ntoa_r+0x24>
 80073b2:	1e5f      	subs	r7, r3, #1
      if (len++ >= buflen) {
 80073b4:	4296      	cmp	r6, r2
 80073b6:	b2ff      	uxtb	r7, r7
 80073b8:	da08      	bge.n	80073cc <ip4addr_ntoa_r+0x90>
      *rp++ = inv[i];
 80073ba:	ae02      	add	r6, sp, #8
 80073bc:	4433      	add	r3, r6
 80073be:	462e      	mov	r6, r5
 80073c0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80073c4:	f804 3b01 	strb.w	r3, [r4], #1
 80073c8:	463b      	mov	r3, r7
 80073ca:	e7de      	b.n	800738a <ip4addr_ntoa_r+0x4e>
        return NULL;
 80073cc:	2000      	movs	r0, #0
 80073ce:	e7eb      	b.n	80073a8 <ip4addr_ntoa_r+0x6c>

080073d0 <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80073d0:	2210      	movs	r2, #16
 80073d2:	4901      	ldr	r1, [pc, #4]	; (80073d8 <ip4addr_ntoa+0x8>)
 80073d4:	f7ff bfb2 	b.w	800733c <ip4addr_ntoa_r>
 80073d8:	20000540 	.word	0x20000540

080073dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80073dc:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80073de:	4b0c      	ldr	r3, [pc, #48]	; (8007410 <ip_reass_dequeue_datagram+0x34>)
{
 80073e0:	4604      	mov	r4, r0
 80073e2:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	4282      	cmp	r2, r0
 80073e8:	d107      	bne.n	80073fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80073ea:	6802      	ldr	r2, [r0, #0]
 80073ec:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80073ee:	4621      	mov	r1, r4
 80073f0:	2004      	movs	r0, #4
}
 80073f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80073f6:	f000 be7b 	b.w	80080f0 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80073fa:	b931      	cbnz	r1, 800740a <ip_reass_dequeue_datagram+0x2e>
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <ip_reass_dequeue_datagram+0x38>)
 80073fe:	f240 1245 	movw	r2, #325	; 0x145
 8007402:	4905      	ldr	r1, [pc, #20]	; (8007418 <ip_reass_dequeue_datagram+0x3c>)
 8007404:	4805      	ldr	r0, [pc, #20]	; (800741c <ip_reass_dequeue_datagram+0x40>)
 8007406:	f005 f961 	bl	800c6cc <iprintf>
    prev->next = ipr->next;
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	602b      	str	r3, [r5, #0]
 800740e:	e7ee      	b.n	80073ee <ip_reass_dequeue_datagram+0x12>
 8007410:	20000550 	.word	0x20000550
 8007414:	08011ca2 	.word	0x08011ca2
 8007418:	08011cfe 	.word	0x08011cfe
 800741c:	0801153a 	.word	0x0801153a

08007420 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007420:	4281      	cmp	r1, r0
{
 8007422:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007426:	4605      	mov	r5, r0
 8007428:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800742a:	d105      	bne.n	8007438 <ip_reass_free_complete_datagram+0x18>
 800742c:	4b2f      	ldr	r3, [pc, #188]	; (80074ec <ip_reass_free_complete_datagram+0xcc>)
 800742e:	22ab      	movs	r2, #171	; 0xab
 8007430:	492f      	ldr	r1, [pc, #188]	; (80074f0 <ip_reass_free_complete_datagram+0xd0>)
 8007432:	4830      	ldr	r0, [pc, #192]	; (80074f4 <ip_reass_free_complete_datagram+0xd4>)
 8007434:	f005 f94a 	bl	800c6cc <iprintf>
  if (prev != NULL) {
 8007438:	b147      	cbz	r7, 800744c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	42ab      	cmp	r3, r5
 800743e:	d005      	beq.n	800744c <ip_reass_free_complete_datagram+0x2c>
 8007440:	4b2a      	ldr	r3, [pc, #168]	; (80074ec <ip_reass_free_complete_datagram+0xcc>)
 8007442:	22ad      	movs	r2, #173	; 0xad
 8007444:	492c      	ldr	r1, [pc, #176]	; (80074f8 <ip_reass_free_complete_datagram+0xd8>)
 8007446:	482b      	ldr	r0, [pc, #172]	; (80074f4 <ip_reass_free_complete_datagram+0xd4>)
 8007448:	f005 f940 	bl	800c6cc <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800744c:	686e      	ldr	r6, [r5, #4]
 800744e:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8007450:	889a      	ldrh	r2, [r3, #4]
 8007452:	bb92      	cbnz	r2, 80074ba <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8007454:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007456:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 800745a:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800745c:	f105 0208 	add.w	r2, r5, #8
 8007460:	f852 0b04 	ldr.w	r0, [r2], #4
 8007464:	428a      	cmp	r2, r1
 8007466:	f843 0b04 	str.w	r0, [r3], #4
 800746a:	d1f9      	bne.n	8007460 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800746c:	2101      	movs	r1, #1
 800746e:	4630      	mov	r0, r6
 8007470:	f7ff fdad 	bl	8006fce <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007474:	4630      	mov	r0, r6
 8007476:	f001 f9e1 	bl	800883c <pbuf_clen>
 800747a:	4604      	mov	r4, r0
    pbuf_free(p);
 800747c:	4630      	mov	r0, r6
 800747e:	f001 f8a7 	bl	80085d0 <pbuf_free>
  p = ipr->p;
 8007482:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007484:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80074ec <ip_reass_free_complete_datagram+0xcc>
 8007488:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007504 <ip_reass_free_complete_datagram+0xe4>
 800748c:	f8df a064 	ldr.w	sl, [pc, #100]	; 80074f4 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8007490:	b9ae      	cbnz	r6, 80074be <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8007492:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007494:	4d19      	ldr	r5, [pc, #100]	; (80074fc <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8007496:	4639      	mov	r1, r7
 8007498:	f7ff ffa0 	bl	80073dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800749c:	88ab      	ldrh	r3, [r5, #4]
 800749e:	42a3      	cmp	r3, r4
 80074a0:	d205      	bcs.n	80074ae <ip_reass_free_complete_datagram+0x8e>
 80074a2:	4b12      	ldr	r3, [pc, #72]	; (80074ec <ip_reass_free_complete_datagram+0xcc>)
 80074a4:	22d2      	movs	r2, #210	; 0xd2
 80074a6:	4916      	ldr	r1, [pc, #88]	; (8007500 <ip_reass_free_complete_datagram+0xe0>)
 80074a8:	4812      	ldr	r0, [pc, #72]	; (80074f4 <ip_reass_free_complete_datagram+0xd4>)
 80074aa:	f005 f90f 	bl	800c6cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80074ae:	88ab      	ldrh	r3, [r5, #4]
}
 80074b0:	4620      	mov	r0, r4
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80074b2:	1b1b      	subs	r3, r3, r4
 80074b4:	80ab      	strh	r3, [r5, #4]
}
 80074b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 80074ba:	2400      	movs	r4, #0
 80074bc:	e7e1      	b.n	8007482 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 80074be:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 80074c0:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 80074c2:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 80074c6:	f001 f9b9 	bl	800883c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80074ca:	4404      	add	r4, r0
 80074cc:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80074d0:	db05      	blt.n	80074de <ip_reass_free_complete_datagram+0xbe>
 80074d2:	4643      	mov	r3, r8
 80074d4:	22cc      	movs	r2, #204	; 0xcc
 80074d6:	4649      	mov	r1, r9
 80074d8:	4650      	mov	r0, sl
 80074da:	f005 f8f7 	bl	800c6cc <iprintf>
    pbuf_free(pcur);
 80074de:	4630      	mov	r0, r6
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80074e0:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 80074e2:	f001 f875 	bl	80085d0 <pbuf_free>
    p = iprh->next_pbuf;
 80074e6:	465e      	mov	r6, fp
 80074e8:	e7d2      	b.n	8007490 <ip_reass_free_complete_datagram+0x70>
 80074ea:	bf00      	nop
 80074ec:	08011ca2 	.word	0x08011ca2
 80074f0:	08011d17 	.word	0x08011d17
 80074f4:	0801153a 	.word	0x0801153a
 80074f8:	08011d23 	.word	0x08011d23
 80074fc:	20000550 	.word	0x20000550
 8007500:	08011d52 	.word	0x08011d52
 8007504:	08011d35 	.word	0x08011d35

08007508 <ip_reass_remove_oldest_datagram>:
{
 8007508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800750c:	4606      	mov	r6, r0
 800750e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8007510:	2500      	movs	r5, #0
    r = reassdatagrams;
 8007512:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800757c <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8007516:	2400      	movs	r4, #0
    r = reassdatagrams;
 8007518:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800751c:	4621      	mov	r1, r4
    prev = NULL;
 800751e:	46a4      	mov	ip, r4
    oldest = NULL;
 8007520:	4620      	mov	r0, r4
    while (r != NULL) {
 8007522:	b953      	cbnz	r3, 800753a <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8007524:	b110      	cbz	r0, 800752c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8007526:	f7ff ff7b 	bl	8007420 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800752a:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800752c:	42bd      	cmp	r5, r7
 800752e:	da01      	bge.n	8007534 <ip_reass_remove_oldest_datagram+0x2c>
 8007530:	2c01      	cmp	r4, #1
 8007532:	dcf0      	bgt.n	8007516 <ip_reass_remove_oldest_datagram+0xe>
}
 8007534:	4628      	mov	r0, r5
 8007536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800753a:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800753e:	695a      	ldr	r2, [r3, #20]
 8007540:	4572      	cmp	r2, lr
 8007542:	d109      	bne.n	8007558 <ip_reass_remove_oldest_datagram+0x50>
 8007544:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	4572      	cmp	r2, lr
 800754c:	d104      	bne.n	8007558 <ip_reass_remove_oldest_datagram+0x50>
 800754e:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8007552:	88b2      	ldrh	r2, [r6, #4]
 8007554:	4596      	cmp	lr, r2
 8007556:	d008      	beq.n	800756a <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8007558:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800755a:	b160      	cbz	r0, 8007576 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800755c:	7fc2      	ldrb	r2, [r0, #31]
 800755e:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 8007562:	4596      	cmp	lr, r2
 8007564:	bf9c      	itt	ls
 8007566:	4661      	movls	r1, ip
 8007568:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	2a00      	cmp	r2, #0
 800756e:	bf18      	it	ne
 8007570:	469c      	movne	ip, r3
 8007572:	4613      	mov	r3, r2
 8007574:	e7d5      	b.n	8007522 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8007576:	4661      	mov	r1, ip
 8007578:	4618      	mov	r0, r3
 800757a:	e7f6      	b.n	800756a <ip_reass_remove_oldest_datagram+0x62>
 800757c:	20000550 	.word	0x20000550

08007580 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8007580:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007582:	4604      	mov	r4, r0
 8007584:	b930      	cbnz	r0, 8007594 <ip_frag_free_pbuf_custom_ref+0x14>
 8007586:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <ip_frag_free_pbuf_custom_ref+0x20>)
 8007588:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800758c:	4905      	ldr	r1, [pc, #20]	; (80075a4 <ip_frag_free_pbuf_custom_ref+0x24>)
 800758e:	4806      	ldr	r0, [pc, #24]	; (80075a8 <ip_frag_free_pbuf_custom_ref+0x28>)
 8007590:	f005 f89c 	bl	800c6cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8007594:	4621      	mov	r1, r4
 8007596:	2005      	movs	r0, #5
}
 8007598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800759c:	f000 bda8 	b.w	80080f0 <memp_free>
 80075a0:	08011ca2 	.word	0x08011ca2
 80075a4:	08012498 	.word	0x08012498
 80075a8:	0801153a 	.word	0x0801153a

080075ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80075ac:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80075ae:	4604      	mov	r4, r0
 80075b0:	b930      	cbnz	r0, 80075c0 <ipfrag_free_pbuf_custom+0x14>
 80075b2:	4b08      	ldr	r3, [pc, #32]	; (80075d4 <ipfrag_free_pbuf_custom+0x28>)
 80075b4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80075b8:	4907      	ldr	r1, [pc, #28]	; (80075d8 <ipfrag_free_pbuf_custom+0x2c>)
 80075ba:	4808      	ldr	r0, [pc, #32]	; (80075dc <ipfrag_free_pbuf_custom+0x30>)
 80075bc:	f005 f886 	bl	800c6cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80075c0:	6960      	ldr	r0, [r4, #20]
 80075c2:	b108      	cbz	r0, 80075c8 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 80075c4:	f001 f804 	bl	80085d0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80075c8:	4620      	mov	r0, r4
}
 80075ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 80075ce:	f7ff bfd7 	b.w	8007580 <ip_frag_free_pbuf_custom_ref>
 80075d2:	bf00      	nop
 80075d4:	08011ca2 	.word	0x08011ca2
 80075d8:	08011d74 	.word	0x08011d74
 80075dc:	0801153a 	.word	0x0801153a

080075e0 <ip_reass_tmr>:
{
 80075e0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 80075e4:	2400      	movs	r4, #0
  r = reassdatagrams;
 80075e6:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80075e8:	b900      	cbnz	r0, 80075ec <ip_reass_tmr+0xc>
}
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80075ec:	7fc3      	ldrb	r3, [r0, #31]
 80075ee:	6805      	ldr	r5, [r0, #0]
 80075f0:	b123      	cbz	r3, 80075fc <ip_reass_tmr+0x1c>
      r->timer--;
 80075f2:	3b01      	subs	r3, #1
 80075f4:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 80075f6:	4604      	mov	r4, r0
 80075f8:	4628      	mov	r0, r5
 80075fa:	e7f5      	b.n	80075e8 <ip_reass_tmr+0x8>
 80075fc:	4621      	mov	r1, r4
 80075fe:	f7ff ff0f 	bl	8007420 <ip_reass_free_complete_datagram>
 8007602:	4620      	mov	r0, r4
 8007604:	e7f7      	b.n	80075f6 <ip_reass_tmr+0x16>
 8007606:	bf00      	nop
 8007608:	20000550 	.word	0x20000550

0800760c <ip4_reass>:
{
 800760c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8007610:	6845      	ldr	r5, [r0, #4]
{
 8007612:	4607      	mov	r7, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8007614:	782b      	ldrb	r3, [r5, #0]
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	2b05      	cmp	r3, #5
 800761c:	f040 8095 	bne.w	800774a <ip4_reass+0x13e>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007620:	88e8      	ldrh	r0, [r5, #6]
 8007622:	f000 fa97 	bl	8007b54 <lwip_htons>
 8007626:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800762a:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800762e:	8868      	ldrh	r0, [r5, #2]
 8007630:	f000 fa90 	bl	8007b54 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8007634:	782b      	ldrb	r3, [r5, #0]
 8007636:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4283      	cmp	r3, r0
 800763e:	f200 8084 	bhi.w	800774a <ip4_reass+0x13e>
  len = (u16_t)(len - hlen);
 8007642:	1ac0      	subs	r0, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007644:	4eb7      	ldr	r6, [pc, #732]	; (8007924 <ip4_reass+0x318>)
  len = (u16_t)(len - hlen);
 8007646:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8007648:	4638      	mov	r0, r7
  len = (u16_t)(len - hlen);
 800764a:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800764c:	f001 f8f6 	bl	800883c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007650:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 8007652:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007654:	4403      	add	r3, r0
 8007656:	2b0a      	cmp	r3, #10
 8007658:	dc6e      	bgt.n	8007738 <ip4_reass+0x12c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800765a:	6834      	ldr	r4, [r6, #0]
 800765c:	2c00      	cmp	r4, #0
 800765e:	d179      	bne.n	8007754 <ip4_reass+0x148>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007660:	2004      	movs	r0, #4
 8007662:	f000 fd29 	bl	80080b8 <memp_malloc>
  if (ipr == NULL) {
 8007666:	4604      	mov	r4, r0
 8007668:	b958      	cbnz	r0, 8007682 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800766a:	4651      	mov	r1, sl
 800766c:	4628      	mov	r0, r5
 800766e:	f7ff ff4b 	bl	8007508 <ip_reass_remove_oldest_datagram>
 8007672:	4582      	cmp	sl, r0
 8007674:	dc69      	bgt.n	800774a <ip4_reass+0x13e>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007676:	2004      	movs	r0, #4
 8007678:	f000 fd1e 	bl	80080b8 <memp_malloc>
    if (ipr == NULL)
 800767c:	4604      	mov	r4, r0
 800767e:	2800      	cmp	r0, #0
 8007680:	d063      	beq.n	800774a <ip4_reass+0x13e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8007682:	221c      	movs	r2, #28
 8007684:	2100      	movs	r1, #0
 8007686:	1d20      	adds	r0, r4, #4
 8007688:	f005 f818 	bl	800c6bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800768c:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800768e:	f104 0208 	add.w	r2, r4, #8
 8007692:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8007696:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8007698:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800769a:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800769c:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800769e:	462b      	mov	r3, r5
 80076a0:	f853 0b04 	ldr.w	r0, [r3], #4
 80076a4:	428b      	cmp	r3, r1
 80076a6:	f842 0b04 	str.w	r0, [r2], #4
 80076aa:	d1f9      	bne.n	80076a0 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80076ac:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 80076b0:	f01b 0b20 	ands.w	fp, fp, #32
 80076b4:	d10a      	bne.n	80076cc <ip4_reass+0xc0>
    u16_t datagram_len = (u16_t)(offset + len);
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	444b      	add	r3, r9
 80076ba:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80076bc:	4599      	cmp	r9, r3
 80076be:	f200 811d 	bhi.w	80078fc <ip4_reass+0x2f0>
 80076c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80076c6:	4293      	cmp	r3, r2
 80076c8:	f200 8118 	bhi.w	80078fc <ip4_reass+0x2f0>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80076cc:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80076ce:	8868      	ldrh	r0, [r5, #2]
 80076d0:	f000 fa40 	bl	8007b54 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80076d4:	782b      	ldrb	r3, [r5, #0]
 80076d6:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4298      	cmp	r0, r3
 80076de:	f0c0 810d 	bcc.w	80078fc <ip4_reass+0x2f0>
  len = (u16_t)(len - hlen);
 80076e2:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80076e4:	88e8      	ldrh	r0, [r5, #6]
  iprh->next_pbuf = NULL;
 80076e6:	2500      	movs	r5, #0
  len = (u16_t)(len - hlen);
 80076e8:	fa1f f883 	uxth.w	r8, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80076ec:	f000 fa32 	bl	8007b54 <lwip_htons>
 80076f0:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80076f4:	687e      	ldr	r6, [r7, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80076f6:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 80076f8:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 80076fa:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 80076fe:	7075      	strb	r5, [r6, #1]
 8007700:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8007702:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8007704:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8007706:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 8007708:	4298      	cmp	r0, r3
  iprh->end = (u16_t)(offset + len);
 800770a:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 800770c:	f200 80f6 	bhi.w	80078fc <ip4_reass+0x2f0>
  for (q = ipr->p; q != NULL;) {
 8007710:	f8d4 c004 	ldr.w	ip, [r4, #4]
  int valid = 1;
 8007714:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8007718:	4662      	mov	r2, ip
 800771a:	bb52      	cbnz	r2, 8007772 <ip4_reass+0x166>
    if (iprh_prev != NULL) {
 800771c:	2d00      	cmp	r5, #0
 800771e:	f040 808c 	bne.w	800783a <ip4_reass+0x22e>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8007722:	f1bc 0f00 	cmp.w	ip, #0
 8007726:	d079      	beq.n	800781c <ip4_reass+0x210>
 8007728:	4b7f      	ldr	r3, [pc, #508]	; (8007928 <ip4_reass+0x31c>)
 800772a:	f240 12bf 	movw	r2, #447	; 0x1bf
 800772e:	497f      	ldr	r1, [pc, #508]	; (800792c <ip4_reass+0x320>)
 8007730:	487f      	ldr	r0, [pc, #508]	; (8007930 <ip4_reass+0x324>)
 8007732:	f004 ffcb 	bl	800c6cc <iprintf>
 8007736:	e071      	b.n	800781c <ip4_reass+0x210>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007738:	4601      	mov	r1, r0
 800773a:	4628      	mov	r0, r5
 800773c:	f7ff fee4 	bl	8007508 <ip_reass_remove_oldest_datagram>
 8007740:	b118      	cbz	r0, 800774a <ip4_reass+0x13e>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8007742:	88b3      	ldrh	r3, [r6, #4]
 8007744:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007746:	2b0a      	cmp	r3, #10
 8007748:	dd87      	ble.n	800765a <ip4_reass+0x4e>
  pbuf_free(p);
 800774a:	4638      	mov	r0, r7
 800774c:	f000 ff40 	bl	80085d0 <pbuf_free>
  return NULL;
 8007750:	2600      	movs	r6, #0
 8007752:	e0cf      	b.n	80078f4 <ip4_reass+0x2e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8007754:	68eb      	ldr	r3, [r5, #12]
 8007756:	6962      	ldr	r2, [r4, #20]
 8007758:	429a      	cmp	r2, r3
 800775a:	d108      	bne.n	800776e <ip4_reass+0x162>
 800775c:	692b      	ldr	r3, [r5, #16]
 800775e:	69a2      	ldr	r2, [r4, #24]
 8007760:	429a      	cmp	r2, r3
 8007762:	d104      	bne.n	800776e <ip4_reass+0x162>
 8007764:	89a2      	ldrh	r2, [r4, #12]
 8007766:	88ab      	ldrh	r3, [r5, #4]
 8007768:	429a      	cmp	r2, r3
 800776a:	f000 80ed 	beq.w	8007948 <ip4_reass+0x33c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800776e:	6824      	ldr	r4, [r4, #0]
 8007770:	e774      	b.n	800765c <ip4_reass+0x50>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8007772:	6851      	ldr	r1, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8007774:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8007778:	4570      	cmp	r0, lr
 800777a:	d251      	bcs.n	8007820 <ip4_reass+0x214>
      iprh->next_pbuf = q;
 800777c:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800777e:	2d00      	cmp	r5, #0
 8007780:	d04a      	beq.n	8007818 <ip4_reass+0x20c>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8007782:	88ea      	ldrh	r2, [r5, #6]
 8007784:	4290      	cmp	r0, r2
 8007786:	f0c0 80b9 	bcc.w	80078fc <ip4_reass+0x2f0>
 800778a:	4573      	cmp	r3, lr
 800778c:	f200 80b6 	bhi.w	80078fc <ip4_reass+0x2f0>
        if (iprh_prev->end != iprh->start) {
 8007790:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 8007792:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8007794:	f040 80f4 	bne.w	8007980 <ip4_reass+0x374>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007798:	f1bb 0f00 	cmp.w	fp, #0
 800779c:	d003      	beq.n	80077a6 <ip4_reass+0x19a>
 800779e:	7fa3      	ldrb	r3, [r4, #30]
 80077a0:	f013 0301 	ands.w	r3, r3, #1
 80077a4:	d07d      	beq.n	80078a2 <ip4_reass+0x296>
    if (valid) {
 80077a6:	f1b8 0f00 	cmp.w	r8, #0
 80077aa:	d155      	bne.n	8007858 <ip4_reass+0x24c>
          q = iprh->next_pbuf;
 80077ac:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80077b0:	4d5c      	ldr	r5, [pc, #368]	; (8007924 <ip4_reass+0x318>)
 80077b2:	88ab      	ldrh	r3, [r5, #4]
 80077b4:	449a      	add	sl, r3
 80077b6:	f8a5 a004 	strh.w	sl, [r5, #4]
  if (is_last) {
 80077ba:	f1bb 0f00 	cmp.w	fp, #0
 80077be:	d107      	bne.n	80077d0 <ip4_reass+0x1c4>
    u16_t datagram_len = (u16_t)(offset + len);
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80077c4:	7fa3      	ldrb	r3, [r4, #30]
 80077c6:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 80077ca:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80077ce:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80077d0:	f1b8 0f01 	cmp.w	r8, #1
 80077d4:	d1bc      	bne.n	8007750 <ip4_reass+0x144>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80077d6:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80077d8:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80077dc:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80077de:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80077e0:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80077e4:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80077e6:	6837      	ldr	r7, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80077e8:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80077ea:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80077ec:	f853 cb04 	ldr.w	ip, [r3], #4
 80077f0:	428b      	cmp	r3, r1
 80077f2:	f842 cb04 	str.w	ip, [r2], #4
 80077f6:	d1f9      	bne.n	80077ec <ip4_reass+0x1e0>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80077f8:	f000 f9ac 	bl	8007b54 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80077fc:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80077fe:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8007800:	71b3      	strb	r3, [r6, #6]
 8007802:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8007804:	72b3      	strb	r3, [r6, #10]
 8007806:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8007808:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800780a:	2f00      	cmp	r7, #0
 800780c:	d14b      	bne.n	80078a6 <ip4_reass+0x29a>
    if (ipr == reassdatagrams) {
 800780e:	6829      	ldr	r1, [r5, #0]
 8007810:	42a1      	cmp	r1, r4
 8007812:	d159      	bne.n	80078c8 <ip4_reass+0x2bc>
      ipr_prev = NULL;
 8007814:	4639      	mov	r1, r7
 8007816:	e059      	b.n	80078cc <ip4_reass+0x2c0>
        if (iprh->end > iprh_tmp->start) {
 8007818:	4573      	cmp	r3, lr
 800781a:	d86f      	bhi.n	80078fc <ip4_reass+0x2f0>
      ipr->p = new_p;
 800781c:	6067      	str	r7, [r4, #4]
 800781e:	e7bb      	b.n	8007798 <ip4_reass+0x18c>
    } else if (iprh->start == iprh_tmp->start) {
 8007820:	d06c      	beq.n	80078fc <ip4_reass+0x2f0>
    } else if (iprh->start < iprh_tmp->end) {
 8007822:	88ca      	ldrh	r2, [r1, #6]
 8007824:	4282      	cmp	r2, r0
 8007826:	d869      	bhi.n	80078fc <ip4_reass+0x2f0>
      if (iprh_prev != NULL) {
 8007828:	b125      	cbz	r5, 8007834 <ip4_reass+0x228>
        if (iprh_prev->end != iprh_tmp->start) {
 800782a:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 800782c:	4572      	cmp	r2, lr
 800782e:	bf18      	it	ne
 8007830:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8007834:	680a      	ldr	r2, [r1, #0]
 8007836:	460d      	mov	r5, r1
 8007838:	e76f      	b.n	800771a <ip4_reass+0x10e>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800783a:	88eb      	ldrh	r3, [r5, #6]
 800783c:	4283      	cmp	r3, r0
 800783e:	d906      	bls.n	800784e <ip4_reass+0x242>
 8007840:	4b39      	ldr	r3, [pc, #228]	; (8007928 <ip4_reass+0x31c>)
 8007842:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8007846:	493b      	ldr	r1, [pc, #236]	; (8007934 <ip4_reass+0x328>)
 8007848:	4839      	ldr	r0, [pc, #228]	; (8007930 <ip4_reass+0x324>)
 800784a:	f004 ff3f 	bl	800c6cc <iprintf>
      iprh_prev->next_pbuf = new_p;
 800784e:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8007850:	88ea      	ldrh	r2, [r5, #6]
 8007852:	88b3      	ldrh	r3, [r6, #4]
 8007854:	429a      	cmp	r2, r3
 8007856:	e79d      	b.n	8007794 <ip4_reass+0x188>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0a6      	beq.n	80077ac <ip4_reass+0x1a0>
 800785e:	6859      	ldr	r1, [r3, #4]
 8007860:	888b      	ldrh	r3, [r1, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1a2      	bne.n	80077ac <ip4_reass+0x1a0>
        q = iprh->next_pbuf;
 8007866:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8007868:	b99b      	cbnz	r3, 8007892 <ip4_reass+0x286>
          LWIP_ASSERT("sanity check",
 800786a:	42b1      	cmp	r1, r6
 800786c:	d106      	bne.n	800787c <ip4_reass+0x270>
 800786e:	4b2e      	ldr	r3, [pc, #184]	; (8007928 <ip4_reass+0x31c>)
 8007870:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007874:	4930      	ldr	r1, [pc, #192]	; (8007938 <ip4_reass+0x32c>)
 8007876:	482e      	ldr	r0, [pc, #184]	; (8007930 <ip4_reass+0x324>)
 8007878:	f004 ff28 	bl	800c6cc <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800787c:	6833      	ldr	r3, [r6, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d096      	beq.n	80077b0 <ip4_reass+0x1a4>
 8007882:	4b29      	ldr	r3, [pc, #164]	; (8007928 <ip4_reass+0x31c>)
 8007884:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007888:	492c      	ldr	r1, [pc, #176]	; (800793c <ip4_reass+0x330>)
 800788a:	4829      	ldr	r0, [pc, #164]	; (8007930 <ip4_reass+0x324>)
 800788c:	f004 ff1e 	bl	800c6cc <iprintf>
 8007890:	e78e      	b.n	80077b0 <ip4_reass+0x1a4>
          iprh = (struct ip_reass_helper *)q->payload;
 8007892:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8007894:	88f0      	ldrh	r0, [r6, #6]
 8007896:	8893      	ldrh	r3, [r2, #4]
 8007898:	4298      	cmp	r0, r3
 800789a:	d187      	bne.n	80077ac <ip4_reass+0x1a0>
          q = iprh->next_pbuf;
 800789c:	6813      	ldr	r3, [r2, #0]
 800789e:	4616      	mov	r6, r2
 80078a0:	e7e2      	b.n	8007868 <ip4_reass+0x25c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80078a2:	4698      	mov	r8, r3
 80078a4:	e784      	b.n	80077b0 <ip4_reass+0x1a4>
      iprh = (struct ip_reass_helper *)r->payload;
 80078a6:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_remove_header(r, IP_HLEN);
 80078aa:	2114      	movs	r1, #20
 80078ac:	4638      	mov	r0, r7
 80078ae:	f000 fe5b 	bl	8008568 <pbuf_remove_header>
      pbuf_cat(p, r);
 80078b2:	4639      	mov	r1, r7
 80078b4:	4630      	mov	r0, r6
 80078b6:	f000 ffdd 	bl	8008874 <pbuf_cat>
      r = iprh->next_pbuf;
 80078ba:	f8d8 7000 	ldr.w	r7, [r8]
 80078be:	e7a4      	b.n	800780a <ip4_reass+0x1fe>
        if (ipr_prev->next == ipr) {
 80078c0:	680b      	ldr	r3, [r1, #0]
 80078c2:	42a3      	cmp	r3, r4
 80078c4:	d002      	beq.n	80078cc <ip4_reass+0x2c0>
 80078c6:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80078c8:	2900      	cmp	r1, #0
 80078ca:	d1f9      	bne.n	80078c0 <ip4_reass+0x2b4>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80078cc:	4620      	mov	r0, r4
 80078ce:	f7ff fd85 	bl	80073dc <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80078d2:	4630      	mov	r0, r6
 80078d4:	f000 ffb2 	bl	800883c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80078d8:	88ab      	ldrh	r3, [r5, #4]
    clen = pbuf_clen(p);
 80078da:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80078dc:	4283      	cmp	r3, r0
 80078de:	d206      	bcs.n	80078ee <ip4_reass+0x2e2>
 80078e0:	4b11      	ldr	r3, [pc, #68]	; (8007928 <ip4_reass+0x31c>)
 80078e2:	f240 229b 	movw	r2, #667	; 0x29b
 80078e6:	4916      	ldr	r1, [pc, #88]	; (8007940 <ip4_reass+0x334>)
 80078e8:	4811      	ldr	r0, [pc, #68]	; (8007930 <ip4_reass+0x324>)
 80078ea:	f004 feef 	bl	800c6cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80078ee:	88a8      	ldrh	r0, [r5, #4]
 80078f0:	1b00      	subs	r0, r0, r4
 80078f2:	80a8      	strh	r0, [r5, #4]
}
 80078f4:	4630      	mov	r0, r6
 80078f6:	b003      	add	sp, #12
 80078f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (ipr->p == NULL) {
 80078fc:	6863      	ldr	r3, [r4, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f47f af23 	bne.w	800774a <ip4_reass+0x13e>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <ip4_reass+0x318>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	42a3      	cmp	r3, r4
 800790a:	d006      	beq.n	800791a <ip4_reass+0x30e>
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <ip4_reass+0x31c>)
 800790e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007912:	490c      	ldr	r1, [pc, #48]	; (8007944 <ip4_reass+0x338>)
 8007914:	4806      	ldr	r0, [pc, #24]	; (8007930 <ip4_reass+0x324>)
 8007916:	f004 fed9 	bl	800c6cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800791a:	2100      	movs	r1, #0
 800791c:	4620      	mov	r0, r4
 800791e:	f7ff fd5d 	bl	80073dc <ip_reass_dequeue_datagram>
 8007922:	e712      	b.n	800774a <ip4_reass+0x13e>
 8007924:	20000550 	.word	0x20000550
 8007928:	08011ca2 	.word	0x08011ca2
 800792c:	08011d9e 	.word	0x08011d9e
 8007930:	0801153a 	.word	0x0801153a
 8007934:	08011d80 	.word	0x08011d80
 8007938:	08011dd5 	.word	0x08011dd5
 800793c:	08011de2 	.word	0x08011de2
 8007940:	08011e04 	.word	0x08011e04
 8007944:	08011e1f 	.word	0x08011e1f
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007948:	88e8      	ldrh	r0, [r5, #6]
 800794a:	f000 f903 	bl	8007b54 <lwip_htons>
 800794e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007952:	2800      	cmp	r0, #0
 8007954:	f47f aeaa 	bne.w	80076ac <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8007958:	89e0      	ldrh	r0, [r4, #14]
 800795a:	f000 f8fb 	bl	8007b54 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800795e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007962:	2800      	cmp	r0, #0
 8007964:	f43f aea2 	beq.w	80076ac <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8007968:	462b      	mov	r3, r5
 800796a:	f104 0208 	add.w	r2, r4, #8
 800796e:	f105 0114 	add.w	r1, r5, #20
 8007972:	f853 0b04 	ldr.w	r0, [r3], #4
 8007976:	428b      	cmp	r3, r1
 8007978:	f842 0b04 	str.w	r0, [r2], #4
 800797c:	d1f9      	bne.n	8007972 <ip4_reass+0x366>
 800797e:	e695      	b.n	80076ac <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007980:	f1bb 0f00 	cmp.w	fp, #0
 8007984:	f43f af12 	beq.w	80077ac <ip4_reass+0x1a0>
 8007988:	f04f 0800 	mov.w	r8, #0
 800798c:	e707      	b.n	800779e <ip4_reass+0x192>
 800798e:	bf00      	nop

08007990 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8007994:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 8007996:	b08d      	sub	sp, #52	; 0x34
 8007998:	4607      	mov	r7, r0
 800799a:	468b      	mov	fp, r1
 800799c:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800799e:	3b14      	subs	r3, #20
 80079a0:	2208      	movs	r2, #8
 80079a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	9307      	str	r3, [sp, #28]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80079aa:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80079ac:	781d      	ldrb	r5, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 80079ae:	9303      	str	r3, [sp, #12]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80079b0:	f005 050f 	and.w	r5, r5, #15
 80079b4:	00ad      	lsls	r5, r5, #2
 80079b6:	2d14      	cmp	r5, #20
 80079b8:	d109      	bne.n	80079ce <ip4_frag+0x3e>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80079ba:	8943      	ldrh	r3, [r0, #10]
 80079bc:	2b13      	cmp	r3, #19
 80079be:	d809      	bhi.n	80079d4 <ip4_frag+0x44>
 80079c0:	4b5e      	ldr	r3, [pc, #376]	; (8007b3c <ip4_frag+0x1ac>)
 80079c2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80079c6:	495e      	ldr	r1, [pc, #376]	; (8007b40 <ip4_frag+0x1b0>)
 80079c8:	485e      	ldr	r0, [pc, #376]	; (8007b44 <ip4_frag+0x1b4>)
 80079ca:	f004 fe7f 	bl	800c6cc <iprintf>
    return ERR_VAL;
 80079ce:	f06f 0005 	mvn.w	r0, #5
 80079d2:	e013      	b.n	80079fc <ip4_frag+0x6c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80079d4:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 80079d6:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80079d8:	88d8      	ldrh	r0, [r3, #6]
 80079da:	f000 f8bb 	bl	8007b54 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80079de:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80079e2:	893c      	ldrh	r4, [r7, #8]
  ofo = tmp & IP_OFFMASK;
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80079ea:	3c14      	subs	r4, #20
 80079ec:	9309      	str	r3, [sp, #36]	; 0x24

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80079ee:	9b07      	ldr	r3, [sp, #28]
  left = (u16_t)(p->tot_len - IP_HLEN);
 80079f0:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	9308      	str	r3, [sp, #32]
  while (left) {
 80079f8:	b91c      	cbnz	r4, 8007a02 <ip4_frag+0x72>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80079fa:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80079fc:	b00d      	add	sp, #52	; 0x34
 80079fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007a02:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007a04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007a08:	2114      	movs	r1, #20
 8007a0a:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	bf28      	it	cs
 8007a10:	4623      	movcs	r3, r4
 8007a12:	9306      	str	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007a14:	f000 fe3e 	bl	8008694 <pbuf_alloc>
    if (rambuf == NULL) {
 8007a18:	4680      	mov	r8, r0
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d037      	beq.n	8007a8e <ip4_frag+0xfe>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8007a1e:	8943      	ldrh	r3, [r0, #10]
 8007a20:	2b13      	cmp	r3, #19
 8007a22:	d806      	bhi.n	8007a32 <ip4_frag+0xa2>
 8007a24:	4b45      	ldr	r3, [pc, #276]	; (8007b3c <ip4_frag+0x1ac>)
 8007a26:	f240 3225 	movw	r2, #805	; 0x325
 8007a2a:	4947      	ldr	r1, [pc, #284]	; (8007b48 <ip4_frag+0x1b8>)
 8007a2c:	4845      	ldr	r0, [pc, #276]	; (8007b44 <ip4_frag+0x1b4>)
 8007a2e:	f004 fe4d 	bl	800c6cc <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	3114      	adds	r1, #20
 8007a3c:	f853 0b04 	ldr.w	r0, [r3], #4
 8007a40:	428b      	cmp	r3, r1
 8007a42:	f842 0b04 	str.w	r0, [r2], #4
 8007a46:	d1f9      	bne.n	8007a3c <ip4_frag+0xac>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007a48:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8007a4c:	f8dd 9018 	ldr.w	r9, [sp, #24]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007a50:	9304      	str	r3, [sp, #16]
    while (left_to_copy) {
 8007a52:	f1b9 0f00 	cmp.w	r9, #0
 8007a56:	d040      	beq.n	8007ada <ip4_frag+0x14a>
      u16_t plen = (u16_t)(p->len - poff);
 8007a58:	897b      	ldrh	r3, [r7, #10]
 8007a5a:	1b5e      	subs	r6, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8007a5c:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 8007a5e:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8007a60:	d206      	bcs.n	8007a70 <ip4_frag+0xe0>
 8007a62:	4b36      	ldr	r3, [pc, #216]	; (8007b3c <ip4_frag+0x1ac>)
 8007a64:	f240 322d 	movw	r2, #813	; 0x32d
 8007a68:	4938      	ldr	r1, [pc, #224]	; (8007b4c <ip4_frag+0x1bc>)
 8007a6a:	4836      	ldr	r0, [pc, #216]	; (8007b44 <ip4_frag+0x1b4>)
 8007a6c:	f004 fe2e 	bl	800c6cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8007a70:	454e      	cmp	r6, r9
 8007a72:	bf28      	it	cs
 8007a74:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8007a76:	b916      	cbnz	r6, 8007a7e <ip4_frag+0xee>
        p = p->next;
 8007a78:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8007a7a:	2500      	movs	r5, #0
 8007a7c:	e7e9      	b.n	8007a52 <ip4_frag+0xc2>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8007a7e:	2005      	movs	r0, #5
 8007a80:	f000 fb1a 	bl	80080b8 <memp_malloc>
      if (pcr == NULL) {
 8007a84:	4682      	mov	sl, r0
 8007a86:	b928      	cbnz	r0, 8007a94 <ip4_frag+0x104>
        pbuf_free(rambuf);
 8007a88:	4640      	mov	r0, r8
 8007a8a:	f000 fda1 	bl	80085d0 <pbuf_free>
  return ERR_MEM;
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a92:	e7b3      	b.n	80079fc <ip4_frag+0x6c>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8007a94:	9601      	str	r6, [sp, #4]
 8007a96:	2241      	movs	r2, #65	; 0x41
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	442b      	add	r3, r5
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	f000 fd42 	bl	800852c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8007aa8:	b918      	cbnz	r0, 8007ab2 <ip4_frag+0x122>
        ip_frag_free_pbuf_custom_ref(pcr);
 8007aaa:	4650      	mov	r0, sl
 8007aac:	f7ff fd68 	bl	8007580 <ip_frag_free_pbuf_custom_ref>
 8007ab0:	e7ea      	b.n	8007a88 <ip4_frag+0xf8>
 8007ab2:	900b      	str	r0, [sp, #44]	; 0x2c
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8007ab4:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f000 fec7 	bl	800884c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8007abe:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <ip4_frag+0x1c0>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8007ac0:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 8007ac4:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8007ac8:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8007acc:	4640      	mov	r0, r8
 8007ace:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ad0:	f000 fed0 	bl	8008874 <pbuf_cat>
      if (left_to_copy) {
 8007ad4:	f1b9 0f00 	cmp.w	r9, #0
 8007ad8:	d1ce      	bne.n	8007a78 <ip4_frag+0xe8>
    tmp = (IP_OFFMASK & (ofo));
 8007ada:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 8007adc:	4435      	add	r5, r6
    tmp = (IP_OFFMASK & (ofo));
 8007ade:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8007ae2:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 8007ae6:	b2ad      	uxth	r5, r5
    last = (left <= netif->mtu - IP_HLEN);
 8007ae8:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8007aea:	42a3      	cmp	r3, r4
 8007aec:	dd01      	ble.n	8007af2 <ip4_frag+0x162>
 8007aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af0:	b10b      	cbz	r3, 8007af6 <ip4_frag+0x166>
      tmp = tmp | IP_MF;
 8007af2:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8007af6:	f000 f82d 	bl	8007b54 <lwip_htons>
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	f103 0014 	add.w	r0, r3, #20
 8007b04:	b280      	uxth	r0, r0
 8007b06:	f000 f825 	bl	8007b54 <lwip_htons>
 8007b0a:	9b04      	ldr	r3, [sp, #16]
    IPH_CHKSUM_SET(iphdr, 0);
 8007b0c:	9a04      	ldr	r2, [sp, #16]
    netif->output(netif, rambuf, dest);
 8007b0e:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8007b10:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8007b12:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8007b14:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 8007b16:	7293      	strb	r3, [r2, #10]
 8007b18:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8007b1a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b20:	4798      	blx	r3
    pbuf_free(rambuf);
 8007b22:	4640      	mov	r0, r8
 8007b24:	f000 fd54 	bl	80085d0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8007b28:	9b06      	ldr	r3, [sp, #24]
    ofo = (u16_t)(ofo + nfb);
 8007b2a:	9a07      	ldr	r2, [sp, #28]
    left = (u16_t)(left - fragsize);
 8007b2c:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8007b2e:	9b05      	ldr	r3, [sp, #20]
 8007b30:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 8007b32:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	9305      	str	r3, [sp, #20]
 8007b38:	e75e      	b.n	80079f8 <ip4_frag+0x68>
 8007b3a:	bf00      	nop
 8007b3c:	08011ca2 	.word	0x08011ca2
 8007b40:	08011e3f 	.word	0x08011e3f
 8007b44:	0801153a 	.word	0x0801153a
 8007b48:	08011e5a 	.word	0x08011e5a
 8007b4c:	08011e7a 	.word	0x08011e7a
 8007b50:	080075ad 	.word	0x080075ad

08007b54 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8007b54:	ba40      	rev16	r0, r0
}
 8007b56:	b280      	uxth	r0, r0
 8007b58:	4770      	bx	lr

08007b5a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8007b5a:	ba00      	rev	r0, r0
 8007b5c:	4770      	bx	lr

08007b5e <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8007b5e:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8007b60:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8007b62:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 8007b66:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8007b6a:	d007      	beq.n	8007b7c <lwip_standard_chksum+0x1e>
 8007b6c:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 8007b6e:	bfc1      	itttt	gt
 8007b70:	7803      	ldrbgt	r3, [r0, #0]
    len--;
 8007b72:	f101 31ff 	addgt.w	r1, r1, #4294967295
    ((u8_t *)&t)[1] = *pb++;
 8007b76:	3001      	addgt	r0, #1
 8007b78:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 8007b7c:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8007b7e:	2901      	cmp	r1, #1
 8007b80:	dc15      	bgt.n	8007bae <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8007b82:	bf04      	itt	eq
 8007b84:	7803      	ldrbeq	r3, [r0, #0]
 8007b86:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8007b8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007b8e:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007b90:	b298      	uxth	r0, r3
 8007b92:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8007b96:	b298      	uxth	r0, r3
 8007b98:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8007b9c:	b124      	cbz	r4, 8007ba8 <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8007b9e:	0203      	lsls	r3, r0, #8
 8007ba0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8007ba8:	b280      	uxth	r0, r0
 8007baa:	b002      	add	sp, #8
 8007bac:	bd10      	pop	{r4, pc}
    sum += *ps++;
 8007bae:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 8007bb2:	3902      	subs	r1, #2
    sum += *ps++;
 8007bb4:	441a      	add	r2, r3
 8007bb6:	e7e2      	b.n	8007b7e <lwip_standard_chksum+0x20>

08007bb8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8007bb8:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8007bba:	2600      	movs	r6, #0
{
 8007bbc:	4605      	mov	r5, r0

  acc = 0;
 8007bbe:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8007bc0:	b945      	cbnz	r5, 8007bd4 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8007bc2:	b126      	cbz	r6, 8007bce <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8007bc4:	0223      	lsls	r3, r4, #8
 8007bc6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8007bce:	43e0      	mvns	r0, r4
}
 8007bd0:	b280      	uxth	r0, r0
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007bd4:	8969      	ldrh	r1, [r5, #10]
 8007bd6:	6868      	ldr	r0, [r5, #4]
 8007bd8:	f7ff ffc1 	bl	8007b5e <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 8007bdc:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007bde:	4420      	add	r0, r4
    if (q->len % 2 != 0) {
 8007be0:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8007be2:	b284      	uxth	r4, r0
 8007be4:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
 8007be8:	d506      	bpl.n	8007bf8 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 8007bea:	0223      	lsls	r3, r4, #8
 8007bec:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007bf0:	f086 0601 	eor.w	r6, r6, #1
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8007bf8:	682d      	ldr	r5, [r5, #0]
 8007bfa:	e7e1      	b.n	8007bc0 <inet_chksum_pbuf+0x8>

08007bfc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007bfc:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007bfe:	f000 f80d 	bl	8007c1c <mem_init>
  memp_init();
 8007c02:	f000 fa4b 	bl	800809c <memp_init>
  pbuf_init();
  netif_init();
 8007c06:	f000 fae3 	bl	80081d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007c0a:	f004 f9d5 	bl	800bfb8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007c0e:	f000 ffb1 	bl	8008b74 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8007c12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8007c16:	f004 b98d 	b.w	800bf34 <sys_timeouts_init>
	...

08007c1c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <mem_init+0x2c>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8007c1e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007c22:	4a0a      	ldr	r2, [pc, #40]	; (8007c4c <mem_init+0x30>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8007c24:	f04f 2028 	mov.w	r0, #671098880	; 0x28002800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007c28:	f023 0303 	bic.w	r3, r3, #3
  mem->next = MEM_SIZE_ALIGNED;
 8007c2c:	6019      	str	r1, [r3, #0]
  mem->prev = 0;
 8007c2e:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007c30:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 8007c32:	7119      	strb	r1, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8007c34:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007c38:	6093      	str	r3, [r2, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007c3a:	6008      	str	r0, [r1, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007c3c:	2001      	movs	r0, #1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007c3e:	6051      	str	r1, [r2, #4]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007c40:	f642 0104 	movw	r1, #10244	; 0x2804
 8007c44:	5458      	strb	r0, [r3, r1]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007c46:	4770      	bx	lr
 8007c48:	200043eb 	.word	0x200043eb
 8007c4c:	20000558 	.word	0x20000558

08007c50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007c54:	4604      	mov	r4, r0
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f000 808e 	beq.w	8007d78 <mem_free+0x128>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007c5c:	0783      	lsls	r3, r0, #30
 8007c5e:	d008      	beq.n	8007c72 <mem_free+0x22>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007c60:	4b4a      	ldr	r3, [pc, #296]	; (8007d8c <mem_free+0x13c>)
 8007c62:	f240 2273 	movw	r2, #627	; 0x273
 8007c66:	494a      	ldr	r1, [pc, #296]	; (8007d90 <mem_free+0x140>)
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007c68:	484a      	ldr	r0, [pc, #296]	; (8007d94 <mem_free+0x144>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007c6e:	f004 bd2d 	b.w	800c6cc <iprintf>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007c72:	4a49      	ldr	r2, [pc, #292]	; (8007d98 <mem_free+0x148>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007c74:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007c78:	6813      	ldr	r3, [r2, #0]
 8007c7a:	4616      	mov	r6, r2
 8007c7c:	42ab      	cmp	r3, r5
 8007c7e:	d804      	bhi.n	8007c8a <mem_free+0x3a>
 8007c80:	6851      	ldr	r1, [r2, #4]
 8007c82:	f100 020c 	add.w	r2, r0, #12
 8007c86:	4291      	cmp	r1, r2
 8007c88:	d204      	bcs.n	8007c94 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007c8a:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <mem_free+0x13c>)
 8007c8c:	f240 227f 	movw	r2, #639	; 0x27f
 8007c90:	4942      	ldr	r1, [pc, #264]	; (8007d9c <mem_free+0x14c>)
 8007c92:	e7e9      	b.n	8007c68 <mem_free+0x18>
  if (!mem->used) {
 8007c94:	f810 2c04 	ldrb.w	r2, [r0, #-4]
 8007c98:	b922      	cbnz	r2, 8007ca4 <mem_free+0x54>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007c9a:	4b3c      	ldr	r3, [pc, #240]	; (8007d8c <mem_free+0x13c>)
 8007c9c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007ca0:	493f      	ldr	r1, [pc, #252]	; (8007da0 <mem_free+0x150>)
 8007ca2:	e7e1      	b.n	8007c68 <mem_free+0x18>
  nmem = ptr_to_mem(mem->next);
 8007ca4:	f830 7c08 	ldrh.w	r7, [r0, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007ca8:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 8007cac:	d866      	bhi.n	8007d7c <mem_free+0x12c>
  pmem = ptr_to_mem(mem->prev);
 8007cae:	f830 0c06 	ldrh.w	r0, [r0, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007cb2:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8007cb6:	d861      	bhi.n	8007d7c <mem_free+0x12c>
  return (mem_size_t)((u8_t *)mem - ram);
 8007cb8:	1aea      	subs	r2, r5, r3
 8007cba:	b292      	uxth	r2, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007cbc:	4282      	cmp	r2, r0
 8007cbe:	d002      	beq.n	8007cc6 <mem_free+0x76>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007cc0:	5a18      	ldrh	r0, [r3, r0]
 8007cc2:	4290      	cmp	r0, r2
 8007cc4:	d15a      	bne.n	8007d7c <mem_free+0x12c>
  return (struct mem *)(void *)&ram[ptr];
 8007cc6:	443b      	add	r3, r7
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <mem_free+0x82>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007ccc:	885b      	ldrh	r3, [r3, #2]
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d154      	bne.n	8007d7c <mem_free+0x12c>
  mem->used = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8007cd8:	68b3      	ldr	r3, [r6, #8]
 8007cda:	42ab      	cmp	r3, r5
 8007cdc:	d853      	bhi.n	8007d86 <mem_free+0x136>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007cde:	42a9      	cmp	r1, r5
 8007ce0:	d806      	bhi.n	8007cf0 <mem_free+0xa0>
 8007ce2:	4b2a      	ldr	r3, [pc, #168]	; (8007d8c <mem_free+0x13c>)
 8007ce4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007ce8:	492e      	ldr	r1, [pc, #184]	; (8007da4 <mem_free+0x154>)
 8007cea:	482a      	ldr	r0, [pc, #168]	; (8007d94 <mem_free+0x144>)
 8007cec:	f004 fcee 	bl	800c6cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007cf0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007cf4:	b133      	cbz	r3, 8007d04 <mem_free+0xb4>
 8007cf6:	4b25      	ldr	r3, [pc, #148]	; (8007d8c <mem_free+0x13c>)
 8007cf8:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007cfc:	492a      	ldr	r1, [pc, #168]	; (8007da8 <mem_free+0x158>)
 8007cfe:	4825      	ldr	r0, [pc, #148]	; (8007d94 <mem_free+0x144>)
 8007d00:	f004 fce4 	bl	800c6cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007d04:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8007d08:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007d0c:	d906      	bls.n	8007d1c <mem_free+0xcc>
 8007d0e:	4b1f      	ldr	r3, [pc, #124]	; (8007d8c <mem_free+0x13c>)
 8007d10:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007d14:	4925      	ldr	r1, [pc, #148]	; (8007dac <mem_free+0x15c>)
 8007d16:	481f      	ldr	r0, [pc, #124]	; (8007d94 <mem_free+0x144>)
 8007d18:	f004 fcd8 	bl	800c6cc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8007d1c:	6833      	ldr	r3, [r6, #0]
 8007d1e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007d22:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007d24:	4295      	cmp	r5, r2
 8007d26:	d012      	beq.n	8007d4e <mem_free+0xfe>
 8007d28:	7910      	ldrb	r0, [r2, #4]
 8007d2a:	b980      	cbnz	r0, 8007d4e <mem_free+0xfe>
 8007d2c:	6870      	ldr	r0, [r6, #4]
 8007d2e:	4282      	cmp	r2, r0
 8007d30:	d00d      	beq.n	8007d4e <mem_free+0xfe>
    if (lfree == nmem) {
 8007d32:	68b0      	ldr	r0, [r6, #8]
 8007d34:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8007d36:	5a5a      	ldrh	r2, [r3, r1]
 8007d38:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007d3c:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8007d3e:	bf08      	it	eq
 8007d40:	60b5      	streq	r5, [r6, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007d42:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007d46:	bf1e      	ittt	ne
 8007d48:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8007d4a:	1ae9      	subne	r1, r5, r3
 8007d4c:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8007d4e:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8007d52:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8007d54:	428d      	cmp	r5, r1
 8007d56:	d00f      	beq.n	8007d78 <mem_free+0x128>
 8007d58:	7908      	ldrb	r0, [r1, #4]
 8007d5a:	b968      	cbnz	r0, 8007d78 <mem_free+0x128>
    if (lfree == mem) {
 8007d5c:	68b0      	ldr	r0, [r6, #8]
 8007d5e:	4285      	cmp	r5, r0
      lfree = pmem;
 8007d60:	bf08      	it	eq
 8007d62:	60b1      	streq	r1, [r6, #8]
    pmem->next = mem->next;
 8007d64:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007d68:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007d6a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007d6e:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007d72:	bf1c      	itt	ne
 8007d74:	185b      	addne	r3, r3, r1
 8007d76:	805a      	strhne	r2, [r3, #2]
}
 8007d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007d7c:	4b03      	ldr	r3, [pc, #12]	; (8007d8c <mem_free+0x13c>)
 8007d7e:	f240 2295 	movw	r2, #661	; 0x295
 8007d82:	490b      	ldr	r1, [pc, #44]	; (8007db0 <mem_free+0x160>)
 8007d84:	e770      	b.n	8007c68 <mem_free+0x18>
    lfree = mem;
 8007d86:	60b5      	str	r5, [r6, #8]
 8007d88:	e7a9      	b.n	8007cde <mem_free+0x8e>
 8007d8a:	bf00      	nop
 8007d8c:	08011e89 	.word	0x08011e89
 8007d90:	08011edb 	.word	0x08011edb
 8007d94:	0801153a 	.word	0x0801153a
 8007d98:	20000558 	.word	0x20000558
 8007d9c:	08011efc 	.word	0x08011efc
 8007da0:	08011f15 	.word	0x08011f15
 8007da4:	08011f6d 	.word	0x08011f6d
 8007da8:	08011f87 	.word	0x08011f87
 8007dac:	08011fa2 	.word	0x08011fa2
 8007db0:	08011f3b 	.word	0x08011f3b

08007db4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007db8:	1ccd      	adds	r5, r1, #3
{
 8007dba:	4604      	mov	r4, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007dbc:	f025 0503 	bic.w	r5, r5, #3
 8007dc0:	b2ad      	uxth	r5, r5
  if (newsize < MIN_SIZE_ALIGNED) {
 8007dc2:	2d0b      	cmp	r5, #11
 8007dc4:	d904      	bls.n	8007dd0 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007dc6:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8007dca:	d902      	bls.n	8007dd2 <mem_trim+0x1e>
    return NULL;
 8007dcc:	2400      	movs	r4, #0
 8007dce:	e076      	b.n	8007ebe <mem_trim+0x10a>
    newsize = MIN_SIZE_ALIGNED;
 8007dd0:	250c      	movs	r5, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007dd2:	42a9      	cmp	r1, r5
 8007dd4:	d8fa      	bhi.n	8007dcc <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007dd6:	4e3b      	ldr	r6, [pc, #236]	; (8007ec4 <mem_trim+0x110>)
 8007dd8:	6833      	ldr	r3, [r6, #0]
 8007dda:	42a3      	cmp	r3, r4
 8007ddc:	d802      	bhi.n	8007de4 <mem_trim+0x30>
 8007dde:	6873      	ldr	r3, [r6, #4]
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	d806      	bhi.n	8007df2 <mem_trim+0x3e>
 8007de4:	4b38      	ldr	r3, [pc, #224]	; (8007ec8 <mem_trim+0x114>)
 8007de6:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007dea:	4938      	ldr	r1, [pc, #224]	; (8007ecc <mem_trim+0x118>)
 8007dec:	4838      	ldr	r0, [pc, #224]	; (8007ed0 <mem_trim+0x11c>)
 8007dee:	f004 fc6d 	bl	800c6cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007df2:	f8d6 a000 	ldr.w	sl, [r6]
 8007df6:	45a2      	cmp	sl, r4
 8007df8:	d861      	bhi.n	8007ebe <mem_trim+0x10a>
 8007dfa:	6873      	ldr	r3, [r6, #4]
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d95e      	bls.n	8007ebe <mem_trim+0x10a>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007e00:	f1a4 0708 	sub.w	r7, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007e04:	f834 9c08 	ldrh.w	r9, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8007e08:	eba7 070a 	sub.w	r7, r7, sl
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007e0c:	f1a9 0308 	sub.w	r3, r9, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8007e10:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007e12:	1bdb      	subs	r3, r3, r7
 8007e14:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007e16:	42ab      	cmp	r3, r5
 8007e18:	d226      	bcs.n	8007e68 <mem_trim+0xb4>
 8007e1a:	4b2b      	ldr	r3, [pc, #172]	; (8007ec8 <mem_trim+0x114>)
 8007e1c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007e20:	492c      	ldr	r1, [pc, #176]	; (8007ed4 <mem_trim+0x120>)
 8007e22:	482b      	ldr	r0, [pc, #172]	; (8007ed0 <mem_trim+0x11c>)
 8007e24:	f004 fc52 	bl	800c6cc <iprintf>
 8007e28:	e7d0      	b.n	8007dcc <mem_trim+0x18>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ptr_to_mem(mem2->next)->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007e2a:	f105 0214 	add.w	r2, r5, #20
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d845      	bhi.n	8007ebe <mem_trim+0x10a>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007e32:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e36:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007e3a:	441d      	add	r5, r3
 8007e3c:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e3e:	d106      	bne.n	8007e4e <mem_trim+0x9a>
 8007e40:	4b21      	ldr	r3, [pc, #132]	; (8007ec8 <mem_trim+0x114>)
 8007e42:	f240 3216 	movw	r2, #790	; 0x316
 8007e46:	4924      	ldr	r1, [pc, #144]	; (8007ed8 <mem_trim+0x124>)
 8007e48:	4821      	ldr	r0, [pc, #132]	; (8007ed0 <mem_trim+0x11c>)
 8007e4a:	f004 fc3f 	bl	800c6cc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8007e4e:	6833      	ldr	r3, [r6, #0]
    mem2 = ptr_to_mem(ptr2);
    if (mem2 < lfree) {
 8007e50:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 8007e52:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 8007e54:	4291      	cmp	r1, r2
      lfree = mem2;
    }
    mem2->used = 0;
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8007e5c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
      lfree = mem2;
 8007e60:	bf88      	it	hi
 8007e62:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 8007e64:	5359      	strh	r1, [r3, r5]
 8007e66:	e021      	b.n	8007eac <mem_trim+0xf8>
  if (newsize == size) {
 8007e68:	d029      	beq.n	8007ebe <mem_trim+0x10a>
  return (struct mem *)(void *)&ram[ptr];
 8007e6a:	eb0a 0809 	add.w	r8, sl, r9
  if (mem2->used == 0) {
 8007e6e:	f898 2004 	ldrb.w	r2, [r8, #4]
 8007e72:	2a00      	cmp	r2, #0
 8007e74:	d1d9      	bne.n	8007e2a <mem_trim+0x76>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e76:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 8007e7a:	d106      	bne.n	8007e8a <mem_trim+0xd6>
 8007e7c:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <mem_trim+0x114>)
 8007e7e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007e82:	4915      	ldr	r1, [pc, #84]	; (8007ed8 <mem_trim+0x124>)
 8007e84:	4812      	ldr	r0, [pc, #72]	; (8007ed0 <mem_trim+0x11c>)
 8007e86:	f004 fc21 	bl	800c6cc <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007e8a:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 8007e8e:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8007e90:	f83a 0009 	ldrh.w	r0, [sl, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007e94:	441d      	add	r5, r3
 8007e96:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8007e98:	4541      	cmp	r1, r8
    mem2->used = 0;
 8007e9a:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007e9e:	b2ad      	uxth	r5, r5
 8007ea0:	eb03 0205 	add.w	r2, r3, r5
    mem2->used = 0;
 8007ea4:	7111      	strb	r1, [r2, #4]
      lfree = ptr_to_mem(ptr2);
 8007ea6:	bf08      	it	eq
 8007ea8:	60b2      	streq	r2, [r6, #8]
    mem2->next = next;
 8007eaa:	5358      	strh	r0, [r3, r5]
    mem2->prev = ptr;
 8007eac:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007eae:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007eb2:	5b5a      	ldrh	r2, [r3, r5]
 8007eb4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007eb8:	d001      	beq.n	8007ebe <mem_trim+0x10a>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007eba:	4413      	add	r3, r2
 8007ebc:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec4:	20000558 	.word	0x20000558
 8007ec8:	08011e89 	.word	0x08011e89
 8007ecc:	08011fcc 	.word	0x08011fcc
 8007ed0:	0801153a 	.word	0x0801153a
 8007ed4:	08011fe3 	.word	0x08011fe3
 8007ed8:	08012003 	.word	0x08012003

08007edc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d07e      	beq.n	8007fe2 <mem_malloc+0x106>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007ee4:	1cc5      	adds	r5, r0, #3
 8007ee6:	f025 0503 	bic.w	r5, r5, #3
 8007eea:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8007eec:	2d0b      	cmp	r5, #11
 8007eee:	d904      	bls.n	8007efa <mem_malloc+0x1e>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007ef0:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8007ef4:	d902      	bls.n	8007efc <mem_malloc+0x20>
    return NULL;
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	e073      	b.n	8007fe2 <mem_malloc+0x106>
    size = MIN_SIZE_ALIGNED;
 8007efa:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007efc:	42a8      	cmp	r0, r5
 8007efe:	d8fa      	bhi.n	8007ef6 <mem_malloc+0x1a>
  return (mem_size_t)((u8_t *)mem - ram);
 8007f00:	4f3d      	ldr	r7, [pc, #244]	; (8007ff8 <mem_malloc+0x11c>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007f02:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007f06:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	68be      	ldr	r6, [r7, #8]
 8007f0e:	1ab6      	subs	r6, r6, r2
 8007f10:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007f12:	4286      	cmp	r6, r0
 8007f14:	d2ef      	bcs.n	8007ef6 <mem_malloc+0x1a>
  return (struct mem *)(void *)&ram[ptr];
 8007f16:	1994      	adds	r4, r2, r6
 8007f18:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8007f1a:	7923      	ldrb	r3, [r4, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d168      	bne.n	8007ff2 <mem_malloc+0x116>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007f20:	ebac 0306 	sub.w	r3, ip, r6
 8007f24:	440b      	add	r3, r1
      if ((!mem->used) &&
 8007f26:	42ab      	cmp	r3, r5
 8007f28:	d363      	bcc.n	8007ff2 <mem_malloc+0x116>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007f2a:	f105 0214 	add.w	r2, r5, #20
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d359      	bcc.n	8007fe6 <mem_malloc+0x10a>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007f32:	f105 0808 	add.w	r8, r5, #8
 8007f36:	44b0      	add	r8, r6
 8007f38:	fa1f f888 	uxth.w	r8, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007f3c:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8007f40:	d106      	bne.n	8007f50 <mem_malloc+0x74>
 8007f42:	4b2e      	ldr	r3, [pc, #184]	; (8007ffc <mem_malloc+0x120>)
 8007f44:	f240 3287 	movw	r2, #903	; 0x387
 8007f48:	492d      	ldr	r1, [pc, #180]	; (8008000 <mem_malloc+0x124>)
 8007f4a:	482e      	ldr	r0, [pc, #184]	; (8008004 <mem_malloc+0x128>)
 8007f4c:	f004 fbbe 	bl	800c6cc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8007f50:	683b      	ldr	r3, [r7, #0]
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 8007f52:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8007f54:	eb03 0208 	add.w	r2, r3, r8
          mem2->used = 0;
 8007f58:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8007f5a:	8821      	ldrh	r1, [r4, #0]
 8007f5c:	f823 1008 	strh.w	r1, [r3, r8]
          mem2->prev = ptr;
 8007f60:	8056      	strh	r6, [r2, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;
 8007f62:	2201      	movs	r2, #1
          mem->next = ptr2;
 8007f64:	f8a4 8000 	strh.w	r8, [r4]
          mem->used = 1;
 8007f68:	7122      	strb	r2, [r4, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007f6a:	f833 2008 	ldrh.w	r2, [r3, r8]
 8007f6e:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007f72:	d002      	beq.n	8007f7a <mem_malloc+0x9e>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007f74:	4413      	add	r3, r2
 8007f76:	f8a3 8002 	strh.w	r8, [r3, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d112      	bne.n	8007fa6 <mem_malloc+0xca>
  return (struct mem *)(void *)&ram[ptr];
 8007f80:	4623      	mov	r3, r4
 8007f82:	e9d7 0200 	ldrd	r0, r2, [r7]
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007f86:	7919      	ldrb	r1, [r3, #4]
 8007f88:	b111      	cbz	r1, 8007f90 <mem_malloc+0xb4>
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d12e      	bne.n	8007fec <mem_malloc+0x110>
 8007f8e:	4613      	mov	r3, r2
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007f90:	429a      	cmp	r2, r3
          lfree = cur;
 8007f92:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007f94:	d007      	beq.n	8007fa6 <mem_malloc+0xca>
 8007f96:	b131      	cbz	r1, 8007fa6 <mem_malloc+0xca>
 8007f98:	4b18      	ldr	r3, [pc, #96]	; (8007ffc <mem_malloc+0x120>)
 8007f9a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007f9e:	491a      	ldr	r1, [pc, #104]	; (8008008 <mem_malloc+0x12c>)
 8007fa0:	4818      	ldr	r0, [pc, #96]	; (8008004 <mem_malloc+0x128>)
 8007fa2:	f004 fb93 	bl	800c6cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007fa6:	3508      	adds	r5, #8
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4425      	add	r5, r4
 8007fac:	42ab      	cmp	r3, r5
 8007fae:	d206      	bcs.n	8007fbe <mem_malloc+0xe2>
 8007fb0:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <mem_malloc+0x120>)
 8007fb2:	f240 32ba 	movw	r2, #954	; 0x3ba
 8007fb6:	4915      	ldr	r1, [pc, #84]	; (800800c <mem_malloc+0x130>)
 8007fb8:	4812      	ldr	r0, [pc, #72]	; (8008004 <mem_malloc+0x128>)
 8007fba:	f004 fb87 	bl	800c6cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007fbe:	07a3      	lsls	r3, r4, #30
 8007fc0:	d00d      	beq.n	8007fde <mem_malloc+0x102>
 8007fc2:	4b0e      	ldr	r3, [pc, #56]	; (8007ffc <mem_malloc+0x120>)
 8007fc4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8007fc8:	4911      	ldr	r1, [pc, #68]	; (8008010 <mem_malloc+0x134>)
 8007fca:	480e      	ldr	r0, [pc, #56]	; (8008004 <mem_malloc+0x128>)
 8007fcc:	f004 fb7e 	bl	800c6cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <mem_malloc+0x120>)
 8007fd2:	f240 32be 	movw	r2, #958	; 0x3be
 8007fd6:	490f      	ldr	r1, [pc, #60]	; (8008014 <mem_malloc+0x138>)
 8007fd8:	480a      	ldr	r0, [pc, #40]	; (8008004 <mem_malloc+0x128>)
 8007fda:	f004 fb77 	bl	800c6cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007fde:	f104 0008 	add.w	r0, r4, #8
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8007fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	7123      	strb	r3, [r4, #4]
 8007fea:	e7c6      	b.n	8007f7a <mem_malloc+0x9e>
  return (struct mem *)(void *)&ram[ptr];
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	4403      	add	r3, r0
 8007ff0:	e7c9      	b.n	8007f86 <mem_malloc+0xaa>
 8007ff2:	460e      	mov	r6, r1
 8007ff4:	e78d      	b.n	8007f12 <mem_malloc+0x36>
 8007ff6:	bf00      	nop
 8007ff8:	20000558 	.word	0x20000558
 8007ffc:	08011e89 	.word	0x08011e89
 8008000:	08012003 	.word	0x08012003
 8008004:	0801153a 	.word	0x0801153a
 8008008:	08012014 	.word	0x08012014
 800800c:	0801202d 	.word	0x0801202d
 8008010:	0801205d 	.word	0x0801205d
 8008014:	0801208c 	.word	0x0801208c

08008018 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8008018:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800801a:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800801c:	b154      	cbz	r4, 8008034 <do_memp_malloc_pool.isra.0+0x1c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008022:	07a3      	lsls	r3, r4, #30
 8008024:	d006      	beq.n	8008034 <do_memp_malloc_pool.isra.0+0x1c>
 8008026:	4b04      	ldr	r3, [pc, #16]	; (8008038 <do_memp_malloc_pool.isra.0+0x20>)
 8008028:	f240 1219 	movw	r2, #281	; 0x119
 800802c:	4903      	ldr	r1, [pc, #12]	; (800803c <do_memp_malloc_pool.isra.0+0x24>)
 800802e:	4804      	ldr	r0, [pc, #16]	; (8008040 <do_memp_malloc_pool.isra.0+0x28>)
 8008030:	f004 fb4c 	bl	800c6cc <iprintf>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8008034:	4620      	mov	r0, r4
 8008036:	bd10      	pop	{r4, pc}
 8008038:	080120af 	.word	0x080120af
 800803c:	08012102 	.word	0x08012102
 8008040:	0801153a 	.word	0x0801153a

08008044 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8008044:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008046:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8008048:	4605      	mov	r5, r0
 800804a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800804c:	d006      	beq.n	800805c <do_memp_free_pool.isra.1+0x18>
 800804e:	4b06      	ldr	r3, [pc, #24]	; (8008068 <do_memp_free_pool.isra.1+0x24>)
 8008050:	f240 126d 	movw	r2, #365	; 0x16d
 8008054:	4905      	ldr	r1, [pc, #20]	; (800806c <do_memp_free_pool.isra.1+0x28>)
 8008056:	4806      	ldr	r0, [pc, #24]	; (8008070 <do_memp_free_pool.isra.1+0x2c>)
 8008058:	f004 fb38 	bl	800c6cc <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8008062:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008064:	bd38      	pop	{r3, r4, r5, pc}
 8008066:	bf00      	nop
 8008068:	080120af 	.word	0x080120af
 800806c:	08012125 	.word	0x08012125
 8008070:	0801153a 	.word	0x0801153a

08008074 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008074:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8008076:	2200      	movs	r2, #0
 8008078:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800807a:	3303      	adds	r3, #3
{
 800807c:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800807e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8008082:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8008084:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8008086:	4294      	cmp	r4, r2
 8008088:	dc00      	bgt.n	800808c <memp_init_pool+0x18>
}
 800808a:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800808c:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800808e:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8008090:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008092:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8008094:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008096:	442b      	add	r3, r5
 8008098:	e7f5      	b.n	8008086 <memp_init_pool+0x12>
	...

0800809c <memp_init>:
{
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 80080a0:	4d04      	ldr	r5, [pc, #16]	; (80080b4 <memp_init+0x18>)
 80080a2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80080a6:	3401      	adds	r4, #1
 80080a8:	f7ff ffe4 	bl	8008074 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80080ac:	2c09      	cmp	r4, #9
 80080ae:	d1f8      	bne.n	80080a2 <memp_init+0x6>
}
 80080b0:	bd38      	pop	{r3, r4, r5, pc}
 80080b2:	bf00      	nop
 80080b4:	0801132c 	.word	0x0801132c

080080b8 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80080b8:	2808      	cmp	r0, #8
{
 80080ba:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80080bc:	d807      	bhi.n	80080ce <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80080be:	4b08      	ldr	r3, [pc, #32]	; (80080e0 <memp_malloc+0x28>)
 80080c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80080c4:	6898      	ldr	r0, [r3, #8]
}
 80080c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80080ca:	f7ff bfa5 	b.w	8008018 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <memp_malloc+0x2c>)
 80080d0:	f240 1257 	movw	r2, #343	; 0x157
 80080d4:	4904      	ldr	r1, [pc, #16]	; (80080e8 <memp_malloc+0x30>)
 80080d6:	4805      	ldr	r0, [pc, #20]	; (80080ec <memp_malloc+0x34>)
 80080d8:	f004 faf8 	bl	800c6cc <iprintf>
}
 80080dc:	2000      	movs	r0, #0
 80080de:	bd08      	pop	{r3, pc}
 80080e0:	0801132c 	.word	0x0801132c
 80080e4:	080120af 	.word	0x080120af
 80080e8:	08012157 	.word	0x08012157
 80080ec:	0801153a 	.word	0x0801153a

080080f0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80080f0:	2808      	cmp	r0, #8
 80080f2:	d906      	bls.n	8008102 <memp_free+0x12>
 80080f4:	4b07      	ldr	r3, [pc, #28]	; (8008114 <memp_free+0x24>)
 80080f6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80080fa:	4907      	ldr	r1, [pc, #28]	; (8008118 <memp_free+0x28>)
 80080fc:	4807      	ldr	r0, [pc, #28]	; (800811c <memp_free+0x2c>)
 80080fe:	f004 bae5 	b.w	800c6cc <iprintf>

  if (mem == NULL) {
 8008102:	b129      	cbz	r1, 8008110 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008104:	4b06      	ldr	r3, [pc, #24]	; (8008120 <memp_free+0x30>)
 8008106:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800810a:	3008      	adds	r0, #8
 800810c:	f7ff bf9a 	b.w	8008044 <do_memp_free_pool.isra.1>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	080120af 	.word	0x080120af
 8008118:	08012174 	.word	0x08012174
 800811c:	0801153a 	.word	0x0801153a
 8008120:	0801132c 	.word	0x0801132c

08008124 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8008124:	f06f 000b 	mvn.w	r0, #11
 8008128:	4770      	bx	lr
	...

0800812c <netif_issue_reports>:
{
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008130:	4604      	mov	r4, r0
 8008132:	b930      	cbnz	r0, 8008142 <netif_issue_reports+0x16>
 8008134:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <netif_issue_reports+0x3c>)
 8008136:	f240 326d 	movw	r2, #877	; 0x36d
 800813a:	490c      	ldr	r1, [pc, #48]	; (800816c <netif_issue_reports+0x40>)
 800813c:	480c      	ldr	r0, [pc, #48]	; (8008170 <netif_issue_reports+0x44>)
 800813e:	f004 fac5 	bl	800c6cc <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008142:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008146:	f003 0205 	and.w	r2, r3, #5
 800814a:	2a05      	cmp	r2, #5
 800814c:	d10b      	bne.n	8008166 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800814e:	07ea      	lsls	r2, r5, #31
 8008150:	d509      	bpl.n	8008166 <netif_issue_reports+0x3a>
 8008152:	6862      	ldr	r2, [r4, #4]
 8008154:	b13a      	cbz	r2, 8008166 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008156:	071b      	lsls	r3, r3, #28
 8008158:	d505      	bpl.n	8008166 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800815a:	1d21      	adds	r1, r4, #4
 800815c:	4620      	mov	r0, r4
}
 800815e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 8008162:	f7fe bc63 	b.w	8006a2c <etharp_request>
}
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	0801218f 	.word	0x0801218f
 800816c:	080121e3 	.word	0x080121e3
 8008170:	0801153a 	.word	0x0801153a

08008174 <netif_do_set_ipaddr>:
{
 8008174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008176:	4606      	mov	r6, r0
 8008178:	4617      	mov	r7, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800817a:	460d      	mov	r5, r1
 800817c:	b931      	cbnz	r1, 800818c <netif_do_set_ipaddr+0x18>
 800817e:	4b11      	ldr	r3, [pc, #68]	; (80081c4 <netif_do_set_ipaddr+0x50>)
 8008180:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008184:	4910      	ldr	r1, [pc, #64]	; (80081c8 <netif_do_set_ipaddr+0x54>)
 8008186:	4811      	ldr	r0, [pc, #68]	; (80081cc <netif_do_set_ipaddr+0x58>)
 8008188:	f004 faa0 	bl	800c6cc <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800818c:	6873      	ldr	r3, [r6, #4]
 800818e:	682a      	ldr	r2, [r5, #0]
 8008190:	429a      	cmp	r2, r3
 8008192:	d101      	bne.n	8008198 <netif_do_set_ipaddr+0x24>
  return 0; /* address unchanged */
 8008194:	2000      	movs	r0, #0
 8008196:	e012      	b.n	80081be <netif_do_set_ipaddr+0x4a>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008198:	ac02      	add	r4, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800819a:	603b      	str	r3, [r7, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800819c:	4638      	mov	r0, r7
    *ip_2_ip4(&new_addr) = *ipaddr;
 800819e:	f844 2d04 	str.w	r2, [r4, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80081a2:	4621      	mov	r1, r4
 80081a4:	f001 fcae 	bl	8009b04 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80081a8:	4621      	mov	r1, r4
 80081aa:	4638      	mov	r0, r7
 80081ac:	f004 f9a4 	bl	800c4f8 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80081b0:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80081b2:	4630      	mov	r0, r6
 80081b4:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80081b6:	6073      	str	r3, [r6, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80081b8:	f7ff ffb8 	bl	800812c <netif_issue_reports>
    return 1; /* address changed */
 80081bc:	2001      	movs	r0, #1
}
 80081be:	b003      	add	sp, #12
 80081c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c2:	bf00      	nop
 80081c4:	0801218f 	.word	0x0801218f
 80081c8:	08012206 	.word	0x08012206
 80081cc:	0801153a 	.word	0x0801153a

080081d0 <netif_init>:
}
 80081d0:	4770      	bx	lr
	...

080081d4 <netif_set_addr>:
{
 80081d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 80081d6:	4d14      	ldr	r5, [pc, #80]	; (8008228 <netif_set_addr+0x54>)
{
 80081d8:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80081da:	2900      	cmp	r1, #0
 80081dc:	bf14      	ite	ne
 80081de:	460e      	movne	r6, r1
 80081e0:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	bf14      	ite	ne
 80081e6:	4617      	movne	r7, r2
 80081e8:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bf18      	it	ne
 80081ee:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 80081f0:	6833      	ldr	r3, [r6, #0]
 80081f2:	b9b3      	cbnz	r3, 8008222 <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80081f4:	aa01      	add	r2, sp, #4
 80081f6:	4631      	mov	r1, r6
 80081f8:	f7ff ffbc 	bl	8008174 <netif_do_set_ipaddr>
 80081fc:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	68a1      	ldr	r1, [r4, #8]
 8008202:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008204:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008206:	bf18      	it	ne
 8008208:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800820a:	682a      	ldr	r2, [r5, #0]
 800820c:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800820e:	bf18      	it	ne
 8008210:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 8008212:	b923      	cbnz	r3, 800821e <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008214:	aa01      	add	r2, sp, #4
 8008216:	4631      	mov	r1, r6
 8008218:	4620      	mov	r0, r4
 800821a:	f7ff ffab 	bl	8008174 <netif_do_set_ipaddr>
}
 800821e:	b003      	add	sp, #12
 8008220:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8008222:	2300      	movs	r3, #0
 8008224:	e7eb      	b.n	80081fe <netif_set_addr+0x2a>
 8008226:	bf00      	nop
 8008228:	08011328 	.word	0x08011328

0800822c <netif_add>:
{
 800822c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008232:	469e      	mov	lr, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008234:	4604      	mov	r4, r0
 8008236:	b948      	cbnz	r0, 800824c <netif_add+0x20>
 8008238:	4b3e      	ldr	r3, [pc, #248]	; (8008334 <netif_add+0x108>)
 800823a:	f240 1227 	movw	r2, #295	; 0x127
 800823e:	493e      	ldr	r1, [pc, #248]	; (8008338 <netif_add+0x10c>)
 8008240:	483e      	ldr	r0, [pc, #248]	; (800833c <netif_add+0x110>)
 8008242:	f004 fa43 	bl	800c6cc <iprintf>
}
 8008246:	4620      	mov	r0, r4
 8008248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800824c:	b947      	cbnz	r7, 8008260 <netif_add+0x34>
 800824e:	4b39      	ldr	r3, [pc, #228]	; (8008334 <netif_add+0x108>)
 8008250:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008254:	493a      	ldr	r1, [pc, #232]	; (8008340 <netif_add+0x114>)
 8008256:	463c      	mov	r4, r7
 8008258:	4838      	ldr	r0, [pc, #224]	; (800833c <netif_add+0x110>)
 800825a:	f004 fa37 	bl	800c6cc <iprintf>
 800825e:	e7f2      	b.n	8008246 <netif_add+0x1a>
  netif->state = state;
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008262:	2500      	movs	r5, #0
  netif->output = netif_null_output_ip4;
 8008264:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8008350 <netif_add+0x124>
  netif->num = netif_num;
 8008268:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8008354 <netif_add+0x128>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800826c:	4e35      	ldr	r6, [pc, #212]	; (8008344 <netif_add+0x118>)
  netif->output = netif_null_output_ip4;
 800826e:	f8c0 c014 	str.w	ip, [r0, #20]
  netif->state = state;
 8008272:	6203      	str	r3, [r0, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008274:	42aa      	cmp	r2, r5
 8008276:	bf08      	it	eq
 8008278:	4632      	moveq	r2, r6
  netif->num = netif_num;
 800827a:	f898 c000 	ldrb.w	ip, [r8]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800827e:	42a9      	cmp	r1, r5
 8008280:	bf08      	it	eq
 8008282:	4631      	moveq	r1, r6
  netif->input = input;
 8008284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif->num = netif_num;
 8008286:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  netif->input = input;
 800828a:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800828c:	45ae      	cmp	lr, r5
 800828e:	bf14      	ite	ne
 8008290:	4673      	movne	r3, lr
 8008292:	4633      	moveq	r3, r6
  ip_addr_set_zero_ip4(&netif->gw);
 8008294:	60c5      	str	r5, [r0, #12]
 8008296:	4646      	mov	r6, r8
  netif->mtu = 0;
 8008298:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
 800829a:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800829e:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 80082a0:	61c5      	str	r5, [r0, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 80082a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80082a6:	f7ff ff95 	bl	80081d4 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80082aa:	4620      	mov	r0, r4
 80082ac:	47b8      	blx	r7
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d13e      	bne.n	8008330 <netif_add+0x104>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80082b2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008358 <netif_add+0x12c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80082b6:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8008334 <netif_add+0x108>
 80082ba:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 80082bc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      num_netifs = 0;
 80082c0:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80082c2:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 80082c6:	2bff      	cmp	r3, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 80082c8:	f8df b070 	ldr.w	fp, [pc, #112]	; 800833c <netif_add+0x110>
        netif->num = 0;
 80082cc:	bf04      	itt	eq
 80082ce:	2300      	moveq	r3, #0
 80082d0:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80082d4:	b955      	cbnz	r5, 80082ec <netif_add+0xc0>
  if (netif->num == 254) {
 80082d6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80082da:	2bfe      	cmp	r3, #254	; 0xfe
 80082dc:	d125      	bne.n	800832a <netif_add+0xfe>
    netif_num = 0;
 80082de:	7035      	strb	r5, [r6, #0]
  netif->next = netif_list;
 80082e0:	f8d8 3000 	ldr.w	r3, [r8]
 80082e4:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 80082e6:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 80082ea:	e7ac      	b.n	8008246 <netif_add+0x1a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80082ec:	42a5      	cmp	r5, r4
 80082ee:	d106      	bne.n	80082fe <netif_add+0xd2>
 80082f0:	4653      	mov	r3, sl
 80082f2:	f240 128b 	movw	r2, #395	; 0x18b
 80082f6:	4914      	ldr	r1, [pc, #80]	; (8008348 <netif_add+0x11c>)
 80082f8:	4658      	mov	r0, fp
 80082fa:	f004 f9e7 	bl	800c6cc <iprintf>
        num_netifs++;
 80082fe:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008300:	2fff      	cmp	r7, #255	; 0xff
 8008302:	dd06      	ble.n	8008312 <netif_add+0xe6>
 8008304:	4653      	mov	r3, sl
 8008306:	f240 128d 	movw	r2, #397	; 0x18d
 800830a:	4910      	ldr	r1, [pc, #64]	; (800834c <netif_add+0x120>)
 800830c:	4658      	mov	r0, fp
 800830e:	f004 f9dd 	bl	800c6cc <iprintf>
        if (netif2->num == netif->num) {
 8008312:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8008316:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800831a:	4293      	cmp	r3, r2
 800831c:	d103      	bne.n	8008326 <netif_add+0xfa>
          netif->num++;
 800831e:	3301      	adds	r3, #1
 8008320:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008324:	e7ca      	b.n	80082bc <netif_add+0x90>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008326:	682d      	ldr	r5, [r5, #0]
 8008328:	e7d4      	b.n	80082d4 <netif_add+0xa8>
    netif_num = (u8_t)(netif->num + 1);
 800832a:	3301      	adds	r3, #1
 800832c:	7033      	strb	r3, [r6, #0]
 800832e:	e7d7      	b.n	80082e0 <netif_add+0xb4>
    return NULL;
 8008330:	462c      	mov	r4, r5
 8008332:	e788      	b.n	8008246 <netif_add+0x1a>
 8008334:	0801218f 	.word	0x0801218f
 8008338:	080122a8 	.word	0x080122a8
 800833c:	0801153a 	.word	0x0801153a
 8008340:	080122c1 	.word	0x080122c1
 8008344:	08011328 	.word	0x08011328
 8008348:	080122e3 	.word	0x080122e3
 800834c:	080122f7 	.word	0x080122f7
 8008350:	08008125 	.word	0x08008125
 8008354:	20000588 	.word	0x20000588
 8008358:	2000879c 	.word	0x2000879c

0800835c <netif_set_default>:
  netif_default = netif;
 800835c:	4b01      	ldr	r3, [pc, #4]	; (8008364 <netif_set_default+0x8>)
 800835e:	6018      	str	r0, [r3, #0]
}
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	200087a0 	.word	0x200087a0

08008368 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008368:	b930      	cbnz	r0, 8008378 <netif_set_up+0x10>
 800836a:	4b09      	ldr	r3, [pc, #36]	; (8008390 <netif_set_up+0x28>)
 800836c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008370:	4908      	ldr	r1, [pc, #32]	; (8008394 <netif_set_up+0x2c>)
 8008372:	4809      	ldr	r0, [pc, #36]	; (8008398 <netif_set_up+0x30>)
 8008374:	f004 b9aa 	b.w	800c6cc <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008378:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800837c:	07d9      	lsls	r1, r3, #31
 800837e:	d406      	bmi.n	800838e <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008380:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008384:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008386:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800838a:	f7ff becf 	b.w	800812c <netif_issue_reports>
}
 800838e:	4770      	bx	lr
 8008390:	0801218f 	.word	0x0801218f
 8008394:	08012325 	.word	0x08012325
 8008398:	0801153a 	.word	0x0801153a

0800839c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800839c:	b930      	cbnz	r0, 80083ac <netif_set_down+0x10>
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <netif_set_down+0x2c>)
 80083a0:	f240 329b 	movw	r2, #923	; 0x39b
 80083a4:	4909      	ldr	r1, [pc, #36]	; (80083cc <netif_set_down+0x30>)
 80083a6:	480a      	ldr	r0, [pc, #40]	; (80083d0 <netif_set_down+0x34>)
 80083a8:	f004 b990 	b.w	800c6cc <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 80083ac:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80083b0:	07d9      	lsls	r1, r3, #31
 80083b2:	d507      	bpl.n	80083c4 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80083b4:	f023 0101 	bic.w	r1, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80083b8:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80083ba:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80083be:	d501      	bpl.n	80083c4 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 80083c0:	f7fe ba78 	b.w	80068b4 <etharp_cleanup_netif>
}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	0801218f 	.word	0x0801218f
 80083cc:	08012341 	.word	0x08012341
 80083d0:	0801153a 	.word	0x0801153a

080083d4 <netif_set_link_up>:
{
 80083d4:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80083d6:	4604      	mov	r4, r0
 80083d8:	b940      	cbnz	r0, 80083ec <netif_set_link_up+0x18>
 80083da:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <netif_set_link_up+0x44>)
 80083dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80083e0:	490e      	ldr	r1, [pc, #56]	; (800841c <netif_set_link_up+0x48>)
 80083e2:	480f      	ldr	r0, [pc, #60]	; (8008420 <netif_set_link_up+0x4c>)
}
 80083e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80083e8:	f004 b970 	b.w	800c6cc <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80083ec:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80083f0:	075a      	lsls	r2, r3, #29
 80083f2:	d40f      	bmi.n	8008414 <netif_set_link_up+0x40>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80083f4:	f043 0304 	orr.w	r3, r3, #4
 80083f8:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    dhcp_network_changed(netif);
 80083fc:	f7fd fe8e 	bl	800611c <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008400:	2103      	movs	r1, #3
 8008402:	4620      	mov	r0, r4
 8008404:	f7ff fe92 	bl	800812c <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8008408:	69e3      	ldr	r3, [r4, #28]
 800840a:	b11b      	cbz	r3, 8008414 <netif_set_link_up+0x40>
 800840c:	4620      	mov	r0, r4
}
 800840e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8008412:	4718      	bx	r3
}
 8008414:	bd10      	pop	{r4, pc}
 8008416:	bf00      	nop
 8008418:	0801218f 	.word	0x0801218f
 800841c:	0801235f 	.word	0x0801235f
 8008420:	0801153a 	.word	0x0801153a

08008424 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008424:	b930      	cbnz	r0, 8008434 <netif_set_link_down+0x10>
 8008426:	4b09      	ldr	r3, [pc, #36]	; (800844c <netif_set_link_down+0x28>)
 8008428:	f240 4206 	movw	r2, #1030	; 0x406
 800842c:	4908      	ldr	r1, [pc, #32]	; (8008450 <netif_set_link_down+0x2c>)
 800842e:	4809      	ldr	r0, [pc, #36]	; (8008454 <netif_set_link_down+0x30>)
 8008430:	f004 b94c 	b.w	800c6cc <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008434:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008438:	0759      	lsls	r1, r3, #29
 800843a:	d506      	bpl.n	800844a <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800843c:	f023 0304 	bic.w	r3, r3, #4
 8008440:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008444:	69c3      	ldr	r3, [r0, #28]
 8008446:	b103      	cbz	r3, 800844a <netif_set_link_down+0x26>
 8008448:	4718      	bx	r3
}
 800844a:	4770      	bx	lr
 800844c:	0801218f 	.word	0x0801218f
 8008450:	08012380 	.word	0x08012380
 8008454:	0801153a 	.word	0x0801153a

08008458 <netif_set_link_callback>:
  if (netif) {
 8008458:	b100      	cbz	r0, 800845c <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800845a:	61c1      	str	r1, [r0, #28]
}
 800845c:	4770      	bx	lr
	...

08008460 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008460:	b150      	cbz	r0, 8008478 <netif_get_by_index+0x18>
    NETIF_FOREACH(netif) {
 8008462:	4b06      	ldr	r3, [pc, #24]	; (800847c <netif_get_by_index+0x1c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	b12b      	cbz	r3, 8008474 <netif_get_by_index+0x14>
      if (idx == netif_get_index(netif)) {
 8008468:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800846c:	3201      	adds	r2, #1
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	4282      	cmp	r2, r0
 8008472:	d1f7      	bne.n	8008464 <netif_get_by_index+0x4>
      }
    }
  }

  return NULL;
}
 8008474:	4618      	mov	r0, r3
 8008476:	4770      	bx	lr
  return NULL;
 8008478:	4603      	mov	r3, r0
 800847a:	e7fb      	b.n	8008474 <netif_get_by_index+0x14>
 800847c:	2000879c 	.word	0x2000879c

08008480 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008480:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008482:	b968      	cbnz	r0, 80084a0 <pbuf_add_header_impl+0x20>
 8008484:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <pbuf_add_header_impl+0x58>)
 8008486:	f240 12df 	movw	r2, #479	; 0x1df
 800848a:	4914      	ldr	r1, [pc, #80]	; (80084dc <pbuf_add_header_impl+0x5c>)
 800848c:	4814      	ldr	r0, [pc, #80]	; (80084e0 <pbuf_add_header_impl+0x60>)
 800848e:	f004 f91d 	bl	800c6cc <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 8008492:	2001      	movs	r0, #1
 8008494:	e01e      	b.n	80084d4 <pbuf_add_header_impl+0x54>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008496:	2a00      	cmp	r2, #0
 8008498:	d0fb      	beq.n	8008492 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800849a:	6842      	ldr	r2, [r0, #4]
 800849c:	1a51      	subs	r1, r2, r1
 800849e:	e013      	b.n	80084c8 <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80084a0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80084a4:	d2f5      	bcs.n	8008492 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 80084a6:	b1a1      	cbz	r1, 80084d2 <pbuf_add_header_impl+0x52>
  increment_magnitude = (u16_t)header_size_increment;
 80084a8:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80084aa:	8903      	ldrh	r3, [r0, #8]
 80084ac:	4423      	add	r3, r4
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	429c      	cmp	r4, r3
 80084b2:	d8ee      	bhi.n	8008492 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80084b4:	f990 500c 	ldrsb.w	r5, [r0, #12]
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	daec      	bge.n	8008496 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 80084bc:	6842      	ldr	r2, [r0, #4]
 80084be:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80084c0:	f100 0210 	add.w	r2, r0, #16
 80084c4:	4291      	cmp	r1, r2
 80084c6:	d3e4      	bcc.n	8008492 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 80084c8:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 80084ca:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80084cc:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80084ce:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80084d0:	8144      	strh	r4, [r0, #10]


  return 0;
 80084d2:	2000      	movs	r0, #0
}
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
 80084d6:	bf00      	nop
 80084d8:	080123a3 	.word	0x080123a3
 80084dc:	08012498 	.word	0x08012498
 80084e0:	0801153a 	.word	0x0801153a

080084e4 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80084e4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80084e8:	2b01      	cmp	r3, #1
{
 80084ea:	b570      	push	{r4, r5, r6, lr}
 80084ec:	4606      	mov	r6, r0
 80084ee:	460d      	mov	r5, r1
 80084f0:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80084f2:	d006      	beq.n	8008502 <pbuf_alloc_reference+0x1e>
 80084f4:	4b0a      	ldr	r3, [pc, #40]	; (8008520 <pbuf_alloc_reference+0x3c>)
 80084f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80084fa:	490a      	ldr	r1, [pc, #40]	; (8008524 <pbuf_alloc_reference+0x40>)
 80084fc:	480a      	ldr	r0, [pc, #40]	; (8008528 <pbuf_alloc_reference+0x44>)
 80084fe:	f004 f8e5 	bl	800c6cc <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008502:	2007      	movs	r0, #7
 8008504:	f7ff fdd8 	bl	80080b8 <memp_malloc>
  if (p == NULL) {
 8008508:	b148      	cbz	r0, 800851e <pbuf_alloc_reference+0x3a>
  p->next = NULL;
 800850a:	2300      	movs	r3, #0
  p->ref = 1;
 800850c:	2201      	movs	r2, #1
  p->tot_len = tot_len;
 800850e:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8008510:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8008512:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8008514:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8008516:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008518:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 800851a:	e9c0 3600 	strd	r3, r6, [r0]
}
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	080123a3 	.word	0x080123a3
 8008524:	080123f6 	.word	0x080123f6
 8008528:	0801153a 	.word	0x0801153a

0800852c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800852c:	3003      	adds	r0, #3
 800852e:	f020 0003 	bic.w	r0, r0, #3
{
 8008532:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008534:	180e      	adds	r6, r1, r0
 8008536:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800853a:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800853c:	42ae      	cmp	r6, r5
 800853e:	d80e      	bhi.n	800855e <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8008540:	b104      	cbz	r4, 8008544 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008542:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008544:	4618      	mov	r0, r3
  p->next = NULL;
 8008546:	2300      	movs	r3, #0
  p->type_internal = (u8_t)type;
 8008548:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800854a:	2202      	movs	r2, #2
  p->tot_len = tot_len;
 800854c:	8101      	strh	r1, [r0, #8]
  p->flags = flags;
 800854e:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8008550:	2201      	movs	r2, #1
  p->len = len;
 8008552:	8141      	strh	r1, [r0, #10]
  p->ref = 1;
 8008554:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008556:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 8008558:	e9c0 3400 	strd	r3, r4, [r0]
}
 800855c:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800855e:	2000      	movs	r0, #0
 8008560:	e7fc      	b.n	800855c <pbuf_alloced_custom+0x30>

08008562 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008562:	2200      	movs	r2, #0
 8008564:	f7ff bf8c 	b.w	8008480 <pbuf_add_header_impl>

08008568 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008568:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800856a:	b990      	cbnz	r0, 8008592 <pbuf_remove_header+0x2a>
 800856c:	4b10      	ldr	r3, [pc, #64]	; (80085b0 <pbuf_remove_header+0x48>)
 800856e:	f240 224b 	movw	r2, #587	; 0x24b
 8008572:	4910      	ldr	r1, [pc, #64]	; (80085b4 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008574:	4810      	ldr	r0, [pc, #64]	; (80085b8 <pbuf_remove_header+0x50>)
 8008576:	f004 f8a9 	bl	800c6cc <iprintf>
    return 1;
 800857a:	2001      	movs	r0, #1
 800857c:	e008      	b.n	8008590 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800857e:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008580:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8008582:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008584:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008586:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008588:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800858a:	1a9b      	subs	r3, r3, r2
 800858c:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800858e:	2000      	movs	r0, #0
}
 8008590:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008592:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008596:	d2f0      	bcs.n	800857a <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8008598:	2900      	cmp	r1, #0
 800859a:	d0f8      	beq.n	800858e <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 800859c:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800859e:	8943      	ldrh	r3, [r0, #10]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d2ec      	bcs.n	800857e <pbuf_remove_header+0x16>
 80085a4:	4b02      	ldr	r3, [pc, #8]	; (80085b0 <pbuf_remove_header+0x48>)
 80085a6:	f240 2255 	movw	r2, #597	; 0x255
 80085aa:	4904      	ldr	r1, [pc, #16]	; (80085bc <pbuf_remove_header+0x54>)
 80085ac:	e7e2      	b.n	8008574 <pbuf_remove_header+0xc>
 80085ae:	bf00      	nop
 80085b0:	080123a3 	.word	0x080123a3
 80085b4:	08012498 	.word	0x08012498
 80085b8:	0801153a 	.word	0x0801153a
 80085bc:	08012408 	.word	0x08012408

080085c0 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 80085c0:	1e0b      	subs	r3, r1, #0
 80085c2:	da02      	bge.n	80085ca <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80085c4:	4259      	negs	r1, r3
 80085c6:	f7ff bfcf 	b.w	8008568 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80085ca:	2201      	movs	r2, #1
 80085cc:	f7ff bf58 	b.w	8008480 <pbuf_add_header_impl>

080085d0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80085d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80085d4:	4604      	mov	r4, r0
 80085d6:	b950      	cbnz	r0, 80085ee <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80085d8:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 80085da:	4b28      	ldr	r3, [pc, #160]	; (800867c <pbuf_free+0xac>)
 80085dc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80085e0:	4927      	ldr	r1, [pc, #156]	; (8008680 <pbuf_free+0xb0>)
 80085e2:	4828      	ldr	r0, [pc, #160]	; (8008684 <pbuf_free+0xb4>)
 80085e4:	f004 f872 	bl	800c6cc <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80085e8:	4628      	mov	r0, r5
 80085ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  count = 0;
 80085ee:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80085f0:	4e22      	ldr	r6, [pc, #136]	; (800867c <pbuf_free+0xac>)
 80085f2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8008690 <pbuf_free+0xc0>
 80085f6:	4f23      	ldr	r7, [pc, #140]	; (8008684 <pbuf_free+0xb4>)
 80085f8:	7ba3      	ldrb	r3, [r4, #14]
 80085fa:	b933      	cbnz	r3, 800860a <pbuf_free+0x3a>
 80085fc:	4633      	mov	r3, r6
 80085fe:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008602:	4641      	mov	r1, r8
 8008604:	4638      	mov	r0, r7
 8008606:	f004 f861 	bl	800c6cc <iprintf>
    ref = --(p->ref);
 800860a:	7ba3      	ldrb	r3, [r4, #14]
 800860c:	3b01      	subs	r3, #1
 800860e:	b2db      	uxtb	r3, r3
 8008610:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e8      	bne.n	80085e8 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008616:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8008618:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800861c:	079b      	lsls	r3, r3, #30
 800861e:	d511      	bpl.n	8008644 <pbuf_free+0x74>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	b933      	cbnz	r3, 8008632 <pbuf_free+0x62>
 8008624:	4633      	mov	r3, r6
 8008626:	f240 22ff 	movw	r2, #767	; 0x2ff
 800862a:	4917      	ldr	r1, [pc, #92]	; (8008688 <pbuf_free+0xb8>)
 800862c:	4638      	mov	r0, r7
 800862e:	f004 f84d 	bl	800c6cc <iprintf>
        pc->custom_free_function(p);
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	4620      	mov	r0, r4
 8008636:	4798      	blx	r3
      count++;
 8008638:	3501      	adds	r5, #1
  while (p != NULL) {
 800863a:	464c      	mov	r4, r9
      count++;
 800863c:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800863e:	2c00      	cmp	r4, #0
 8008640:	d1da      	bne.n	80085f8 <pbuf_free+0x28>
 8008642:	e7d1      	b.n	80085e8 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 8008644:	7b23      	ldrb	r3, [r4, #12]
 8008646:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800864a:	2b02      	cmp	r3, #2
 800864c:	d104      	bne.n	8008658 <pbuf_free+0x88>
          memp_free(MEMP_PBUF_POOL, p);
 800864e:	4621      	mov	r1, r4
 8008650:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 8008652:	f7ff fd4d 	bl	80080f0 <memp_free>
 8008656:	e7ef      	b.n	8008638 <pbuf_free+0x68>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008658:	2b01      	cmp	r3, #1
 800865a:	d102      	bne.n	8008662 <pbuf_free+0x92>
          memp_free(MEMP_PBUF, p);
 800865c:	4621      	mov	r1, r4
 800865e:	2007      	movs	r0, #7
 8008660:	e7f7      	b.n	8008652 <pbuf_free+0x82>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008662:	b91b      	cbnz	r3, 800866c <pbuf_free+0x9c>
          mem_free(p);
 8008664:	4620      	mov	r0, r4
 8008666:	f7ff faf3 	bl	8007c50 <mem_free>
 800866a:	e7e5      	b.n	8008638 <pbuf_free+0x68>
          LWIP_ASSERT("invalid pbuf type", 0);
 800866c:	4633      	mov	r3, r6
 800866e:	f240 320f 	movw	r2, #783	; 0x30f
 8008672:	4906      	ldr	r1, [pc, #24]	; (800868c <pbuf_free+0xbc>)
 8008674:	4638      	mov	r0, r7
 8008676:	f004 f829 	bl	800c6cc <iprintf>
 800867a:	e7dd      	b.n	8008638 <pbuf_free+0x68>
 800867c:	080123a3 	.word	0x080123a3
 8008680:	08012498 	.word	0x08012498
 8008684:	0801153a 	.word	0x0801153a
 8008688:	0801243c 	.word	0x0801243c
 800868c:	0801245d 	.word	0x0801245d
 8008690:	08012426 	.word	0x08012426

08008694 <pbuf_alloc>:
  switch (type) {
 8008694:	2a41      	cmp	r2, #65	; 0x41
{
 8008696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869a:	4607      	mov	r7, r0
 800869c:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 800869e:	b284      	uxth	r4, r0
  switch (type) {
 80086a0:	d030      	beq.n	8008704 <pbuf_alloc+0x70>
 80086a2:	d809      	bhi.n	80086b8 <pbuf_alloc+0x24>
 80086a4:	2a01      	cmp	r2, #1
 80086a6:	d02d      	beq.n	8008704 <pbuf_alloc+0x70>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80086a8:	4b33      	ldr	r3, [pc, #204]	; (8008778 <pbuf_alloc+0xe4>)
 80086aa:	f240 1227 	movw	r2, #295	; 0x127
 80086ae:	4933      	ldr	r1, [pc, #204]	; (800877c <pbuf_alloc+0xe8>)
 80086b0:	4833      	ldr	r0, [pc, #204]	; (8008780 <pbuf_alloc+0xec>)
 80086b2:	f004 f80b 	bl	800c6cc <iprintf>
 80086b6:	e037      	b.n	8008728 <pbuf_alloc+0x94>
  switch (type) {
 80086b8:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 80086bc:	d028      	beq.n	8008710 <pbuf_alloc+0x7c>
 80086be:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80086c2:	d1f1      	bne.n	80086a8 <pbuf_alloc+0x14>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80086c4:	3403      	adds	r4, #3
 80086c6:	1ccb      	adds	r3, r1, #3
 80086c8:	f024 0403 	bic.w	r4, r4, #3
 80086cc:	f023 0303 	bic.w	r3, r3, #3
 80086d0:	441c      	add	r4, r3
 80086d2:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80086d4:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80086d8:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80086da:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80086dc:	d324      	bcc.n	8008728 <pbuf_alloc+0x94>
 80086de:	4283      	cmp	r3, r0
 80086e0:	d822      	bhi.n	8008728 <pbuf_alloc+0x94>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80086e2:	f7ff fbfb 	bl	8007edc <mem_malloc>
      if (p == NULL) {
 80086e6:	4605      	mov	r5, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d040      	beq.n	800876e <pbuf_alloc+0xda>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80086ec:	4407      	add	r7, r0
  p->next = NULL;
 80086ee:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 80086f0:	8106      	strh	r6, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80086f2:	3713      	adds	r7, #19
  p->next = NULL;
 80086f4:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 80086f6:	4b23      	ldr	r3, [pc, #140]	; (8008784 <pbuf_alloc+0xf0>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80086f8:	f027 0703 	bic.w	r7, r7, #3
  p->len = len;
 80086fc:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 80086fe:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 8008700:	6047      	str	r7, [r0, #4]
 8008702:	e034      	b.n	800876e <pbuf_alloc+0xda>
      p = pbuf_alloc_reference(NULL, length, type);
 8008704:	4631      	mov	r1, r6
 8008706:	2000      	movs	r0, #0
}
 8008708:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800870c:	f7ff beea 	b.w	80084e4 <pbuf_alloc_reference>
      last = NULL;
 8008710:	f04f 0a00 	mov.w	sl, #0
  p->type_internal = (u8_t)type;
 8008714:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008788 <pbuf_alloc+0xf4>
      p = NULL;
 8008718:	4655      	mov	r5, sl
  p->next = NULL;
 800871a:	46d0      	mov	r8, sl
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800871c:	2008      	movs	r0, #8
 800871e:	f7ff fccb 	bl	80080b8 <memp_malloc>
        if (q == NULL) {
 8008722:	4607      	mov	r7, r0
 8008724:	b930      	cbnz	r0, 8008734 <pbuf_alloc+0xa0>
          if (p) {
 8008726:	b90d      	cbnz	r5, 800872c <pbuf_alloc+0x98>
      return NULL;
 8008728:	2500      	movs	r5, #0
 800872a:	e020      	b.n	800876e <pbuf_alloc+0xda>
            pbuf_free(p);
 800872c:	4628      	mov	r0, r5
 800872e:	f7ff ff4f 	bl	80085d0 <pbuf_free>
 8008732:	e7f9      	b.n	8008728 <pbuf_alloc+0x94>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008734:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008736:	4404      	add	r4, r0
  p->next = NULL;
 8008738:	f8c0 8000 	str.w	r8, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800873c:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008740:	3413      	adds	r4, #19
  p->tot_len = tot_len;
 8008742:	8106      	strh	r6, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008744:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008748:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 800874c:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008750:	b29b      	uxth	r3, r3
  p->payload = payload;
 8008752:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008754:	42b3      	cmp	r3, r6
 8008756:	bf28      	it	cs
 8008758:	4633      	movcs	r3, r6
  p->len = len;
 800875a:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800875c:	b155      	cbz	r5, 8008774 <pbuf_alloc+0xe0>
          last->next = q;
 800875e:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8008762:	1af3      	subs	r3, r6, r3
        offset = 0;
 8008764:	2400      	movs	r4, #0
 8008766:	46ba      	mov	sl, r7
        rem_len = (u16_t)(rem_len - qlen);
 8008768:	b29e      	uxth	r6, r3
      } while (rem_len > 0);
 800876a:	2e00      	cmp	r6, #0
 800876c:	d1d6      	bne.n	800871c <pbuf_alloc+0x88>
}
 800876e:	4628      	mov	r0, r5
 8008770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008774:	4605      	mov	r5, r0
 8008776:	e7f4      	b.n	8008762 <pbuf_alloc+0xce>
 8008778:	080123a3 	.word	0x080123a3
 800877c:	0801246f 	.word	0x0801246f
 8008780:	0801153a 	.word	0x0801153a
 8008784:	00010080 	.word	0x00010080
 8008788:	00010082 	.word	0x00010082

0800878c <pbuf_realloc>:
{
 800878c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008790:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008792:	4604      	mov	r4, r0
 8008794:	b930      	cbnz	r0, 80087a4 <pbuf_realloc+0x18>
 8008796:	4b24      	ldr	r3, [pc, #144]	; (8008828 <pbuf_realloc+0x9c>)
 8008798:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800879c:	4923      	ldr	r1, [pc, #140]	; (800882c <pbuf_realloc+0xa0>)
 800879e:	4824      	ldr	r0, [pc, #144]	; (8008830 <pbuf_realloc+0xa4>)
 80087a0:	f003 ff94 	bl	800c6cc <iprintf>
  if (new_len >= p->tot_len) {
 80087a4:	8923      	ldrh	r3, [r4, #8]
 80087a6:	42ab      	cmp	r3, r5
 80087a8:	d93b      	bls.n	8008822 <pbuf_realloc+0x96>
  shrink = (u16_t)(p->tot_len - new_len);
 80087aa:	1b5b      	subs	r3, r3, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80087ac:	4f1e      	ldr	r7, [pc, #120]	; (8008828 <pbuf_realloc+0x9c>)
 80087ae:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8008838 <pbuf_realloc+0xac>
  shrink = (u16_t)(p->tot_len - new_len);
 80087b2:	b29e      	uxth	r6, r3
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80087b4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008830 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 80087b8:	8963      	ldrh	r3, [r4, #10]
 80087ba:	42ab      	cmp	r3, r5
 80087bc:	d319      	bcc.n	80087f2 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80087be:	7b22      	ldrb	r2, [r4, #12]
 80087c0:	0712      	lsls	r2, r2, #28
 80087c2:	d126      	bne.n	8008812 <pbuf_realloc+0x86>
 80087c4:	42ab      	cmp	r3, r5
 80087c6:	d024      	beq.n	8008812 <pbuf_realloc+0x86>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80087c8:	7b63      	ldrb	r3, [r4, #13]
 80087ca:	079b      	lsls	r3, r3, #30
 80087cc:	d421      	bmi.n	8008812 <pbuf_realloc+0x86>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80087ce:	6861      	ldr	r1, [r4, #4]
 80087d0:	4620      	mov	r0, r4
 80087d2:	1b09      	subs	r1, r1, r4
 80087d4:	4429      	add	r1, r5
 80087d6:	b289      	uxth	r1, r1
 80087d8:	f7ff faec 	bl	8007db4 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80087dc:	4604      	mov	r4, r0
 80087de:	b9c0      	cbnz	r0, 8008812 <pbuf_realloc+0x86>
 80087e0:	4b11      	ldr	r3, [pc, #68]	; (8008828 <pbuf_realloc+0x9c>)
 80087e2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80087e6:	4913      	ldr	r1, [pc, #76]	; (8008834 <pbuf_realloc+0xa8>)
 80087e8:	4811      	ldr	r0, [pc, #68]	; (8008830 <pbuf_realloc+0xa4>)
 80087ea:	f003 ff6f 	bl	800c6cc <iprintf>
  q->len = rem_len;
 80087ee:	8164      	strh	r4, [r4, #10]
 80087f0:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 80087f2:	1aed      	subs	r5, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80087f4:	8923      	ldrh	r3, [r4, #8]
 80087f6:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 80087f8:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80087fa:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80087fc:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80087fe:	2c00      	cmp	r4, #0
 8008800:	d1da      	bne.n	80087b8 <pbuf_realloc+0x2c>
 8008802:	463b      	mov	r3, r7
 8008804:	f240 12af 	movw	r2, #431	; 0x1af
 8008808:	4641      	mov	r1, r8
 800880a:	4648      	mov	r0, r9
 800880c:	f003 ff5e 	bl	800c6cc <iprintf>
 8008810:	e7d2      	b.n	80087b8 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8008812:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8008814:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8008816:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008818:	b108      	cbz	r0, 800881e <pbuf_realloc+0x92>
    pbuf_free(q->next);
 800881a:	f7ff fed9 	bl	80085d0 <pbuf_free>
  q->next = NULL;
 800881e:	2300      	movs	r3, #0
 8008820:	6023      	str	r3, [r4, #0]
}
 8008822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008826:	bf00      	nop
 8008828:	080123a3 	.word	0x080123a3
 800882c:	0801248a 	.word	0x0801248a
 8008830:	0801153a 	.word	0x0801153a
 8008834:	080124ba 	.word	0x080124ba
 8008838:	080124a2 	.word	0x080124a2

0800883c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800883c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800883e:	2200      	movs	r2, #0
 8008840:	b290      	uxth	r0, r2
 8008842:	3201      	adds	r2, #1
 8008844:	b903      	cbnz	r3, 8008848 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8008846:	4770      	bx	lr
    p = p->next;
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	e7f9      	b.n	8008840 <pbuf_clen+0x4>

0800884c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800884c:	b158      	cbz	r0, 8008866 <pbuf_ref+0x1a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800884e:	7b83      	ldrb	r3, [r0, #14]
 8008850:	3301      	adds	r3, #1
 8008852:	b2db      	uxtb	r3, r3
 8008854:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008856:	b933      	cbnz	r3, 8008866 <pbuf_ref+0x1a>
 8008858:	4b03      	ldr	r3, [pc, #12]	; (8008868 <pbuf_ref+0x1c>)
 800885a:	f240 3242 	movw	r2, #834	; 0x342
 800885e:	4903      	ldr	r1, [pc, #12]	; (800886c <pbuf_ref+0x20>)
 8008860:	4803      	ldr	r0, [pc, #12]	; (8008870 <pbuf_ref+0x24>)
 8008862:	f003 bf33 	b.w	800c6cc <iprintf>
  }
}
 8008866:	4770      	bx	lr
 8008868:	080123a3 	.word	0x080123a3
 800886c:	080124d6 	.word	0x080124d6
 8008870:	0801153a 	.word	0x0801153a

08008874 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008878:	4604      	mov	r4, r0
 800887a:	b100      	cbz	r0, 800887e <pbuf_cat+0xa>
 800887c:	b961      	cbnz	r1, 8008898 <pbuf_cat+0x24>
 800887e:	4b15      	ldr	r3, [pc, #84]	; (80088d4 <pbuf_cat+0x60>)
 8008880:	f240 325a 	movw	r2, #858	; 0x35a
 8008884:	4914      	ldr	r1, [pc, #80]	; (80088d8 <pbuf_cat+0x64>)
 8008886:	4815      	ldr	r0, [pc, #84]	; (80088dc <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800888c:	f003 bf1e 	b.w	800c6cc <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008890:	8929      	ldrh	r1, [r5, #8]
 8008892:	440b      	add	r3, r1
 8008894:	8123      	strh	r3, [r4, #8]
 8008896:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	8923      	ldrh	r3, [r4, #8]
 800889c:	2a00      	cmp	r2, #0
 800889e:	d1f7      	bne.n	8008890 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80088a0:	8962      	ldrh	r2, [r4, #10]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d006      	beq.n	80088b4 <pbuf_cat+0x40>
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <pbuf_cat+0x60>)
 80088a8:	f240 3262 	movw	r2, #866	; 0x362
 80088ac:	490c      	ldr	r1, [pc, #48]	; (80088e0 <pbuf_cat+0x6c>)
 80088ae:	480b      	ldr	r0, [pc, #44]	; (80088dc <pbuf_cat+0x68>)
 80088b0:	f003 ff0c 	bl	800c6cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	b133      	cbz	r3, 80088c6 <pbuf_cat+0x52>
 80088b8:	4b06      	ldr	r3, [pc, #24]	; (80088d4 <pbuf_cat+0x60>)
 80088ba:	f240 3263 	movw	r2, #867	; 0x363
 80088be:	4909      	ldr	r1, [pc, #36]	; (80088e4 <pbuf_cat+0x70>)
 80088c0:	4806      	ldr	r0, [pc, #24]	; (80088dc <pbuf_cat+0x68>)
 80088c2:	f003 ff03 	bl	800c6cc <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80088c6:	892a      	ldrh	r2, [r5, #8]
 80088c8:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80088ca:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80088cc:	4413      	add	r3, r2
 80088ce:	8123      	strh	r3, [r4, #8]
}
 80088d0:	bd70      	pop	{r4, r5, r6, pc}
 80088d2:	bf00      	nop
 80088d4:	080123a3 	.word	0x080123a3
 80088d8:	080124e8 	.word	0x080124e8
 80088dc:	0801153a 	.word	0x0801153a
 80088e0:	0801251d 	.word	0x0801251d
 80088e4:	0801254a 	.word	0x0801254a

080088e8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80088e8:	b510      	push	{r4, lr}
 80088ea:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 80088ec:	f7ff ffc2 	bl	8008874 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80088f0:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80088f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 80088f6:	f7ff bfa9 	b.w	800884c <pbuf_ref>
	...

080088fc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80088fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008902:	4605      	mov	r5, r0
 8008904:	b120      	cbz	r0, 8008910 <pbuf_copy+0x14>
 8008906:	b119      	cbz	r1, 8008910 <pbuf_copy+0x14>
 8008908:	8902      	ldrh	r2, [r0, #8]
 800890a:	890b      	ldrh	r3, [r1, #8]
 800890c:	429a      	cmp	r2, r3
 800890e:	d20a      	bcs.n	8008926 <pbuf_copy+0x2a>
 8008910:	4b34      	ldr	r3, [pc, #208]	; (80089e4 <pbuf_copy+0xe8>)
 8008912:	f240 32ca 	movw	r2, #970	; 0x3ca
 8008916:	4934      	ldr	r1, [pc, #208]	; (80089e8 <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008918:	4834      	ldr	r0, [pc, #208]	; (80089ec <pbuf_copy+0xf0>)
 800891a:	f003 fed7 	bl	800c6cc <iprintf>
 800891e:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8008922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 8008926:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008928:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80089e4 <pbuf_copy+0xe8>
 800892c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80089fc <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 8008930:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008932:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80089ec <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008936:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800893a:	8963      	ldrh	r3, [r4, #10]
 800893c:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008940:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008942:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008944:	6861      	ldr	r1, [r4, #4]
 8008946:	4438      	add	r0, r7
 8008948:	4598      	cmp	r8, r3
 800894a:	4431      	add	r1, r6
 800894c:	bf28      	it	cs
 800894e:	4698      	movcs	r8, r3
 8008950:	4642      	mov	r2, r8
    offset_to += len;
 8008952:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008954:	f003 fea7 	bl	800c6a6 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008958:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800895a:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800895c:	429f      	cmp	r7, r3
 800895e:	d906      	bls.n	800896e <pbuf_copy+0x72>
 8008960:	464b      	mov	r3, r9
 8008962:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008966:	4659      	mov	r1, fp
 8008968:	4650      	mov	r0, sl
 800896a:	f003 feaf 	bl	800c6cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800896e:	8963      	ldrh	r3, [r4, #10]
 8008970:	429e      	cmp	r6, r3
 8008972:	d906      	bls.n	8008982 <pbuf_copy+0x86>
 8008974:	464b      	mov	r3, r9
 8008976:	f240 32da 	movw	r2, #986	; 0x3da
 800897a:	491d      	ldr	r1, [pc, #116]	; (80089f0 <pbuf_copy+0xf4>)
 800897c:	4650      	mov	r0, sl
 800897e:	f003 fea5 	bl	800c6cc <iprintf>
    if (offset_from >= p_from->len) {
 8008982:	8963      	ldrh	r3, [r4, #10]
 8008984:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 8008986:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8008988:	bf24      	itt	cs
 800898a:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 800898c:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800898e:	429f      	cmp	r7, r3
 8008990:	d108      	bne.n	80089a4 <pbuf_copy+0xa8>
      p_to = p_to->next;
 8008992:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008994:	b92d      	cbnz	r5, 80089a2 <pbuf_copy+0xa6>
 8008996:	b314      	cbz	r4, 80089de <pbuf_copy+0xe2>
 8008998:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <pbuf_copy+0xe8>)
 800899a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800899e:	4915      	ldr	r1, [pc, #84]	; (80089f4 <pbuf_copy+0xf8>)
 80089a0:	e7ba      	b.n	8008918 <pbuf_copy+0x1c>
      offset_to = 0;
 80089a2:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80089a4:	b17c      	cbz	r4, 80089c6 <pbuf_copy+0xca>
 80089a6:	8962      	ldrh	r2, [r4, #10]
 80089a8:	8923      	ldrh	r3, [r4, #8]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d10b      	bne.n	80089c6 <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	b14b      	cbz	r3, 80089c6 <pbuf_copy+0xca>
 80089b2:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <pbuf_copy+0xe8>)
 80089b4:	f240 32ea 	movw	r2, #1002	; 0x3ea
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80089b8:	490f      	ldr	r1, [pc, #60]	; (80089f8 <pbuf_copy+0xfc>)
 80089ba:	480c      	ldr	r0, [pc, #48]	; (80089ec <pbuf_copy+0xf0>)
 80089bc:	f003 fe86 	bl	800c6cc <iprintf>
 80089c0:	f06f 0005 	mvn.w	r0, #5
 80089c4:	e7ad      	b.n	8008922 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80089c6:	896a      	ldrh	r2, [r5, #10]
 80089c8:	892b      	ldrh	r3, [r5, #8]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d105      	bne.n	80089da <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80089ce:	682b      	ldr	r3, [r5, #0]
 80089d0:	b11b      	cbz	r3, 80089da <pbuf_copy+0xde>
 80089d2:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <pbuf_copy+0xe8>)
 80089d4:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80089d8:	e7ee      	b.n	80089b8 <pbuf_copy+0xbc>
  } while (p_from);
 80089da:	2c00      	cmp	r4, #0
 80089dc:	d1ab      	bne.n	8008936 <pbuf_copy+0x3a>
  return ERR_OK;
 80089de:	4620      	mov	r0, r4
 80089e0:	e79f      	b.n	8008922 <pbuf_copy+0x26>
 80089e2:	bf00      	nop
 80089e4:	080123a3 	.word	0x080123a3
 80089e8:	08012591 	.word	0x08012591
 80089ec:	0801153a 	.word	0x0801153a
 80089f0:	080125d8 	.word	0x080125d8
 80089f4:	080125f3 	.word	0x080125f3
 80089f8:	08012600 	.word	0x08012600
 80089fc:	080125c1 	.word	0x080125c1

08008a00 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a04:	460f      	mov	r7, r1
 8008a06:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008a08:	4606      	mov	r6, r0
 8008a0a:	b950      	cbnz	r0, 8008a22 <pbuf_copy_partial+0x22>
 8008a0c:	4635      	mov	r5, r6
 8008a0e:	4b1b      	ldr	r3, [pc, #108]	; (8008a7c <pbuf_copy_partial+0x7c>)
 8008a10:	f240 420a 	movw	r2, #1034	; 0x40a
 8008a14:	491a      	ldr	r1, [pc, #104]	; (8008a80 <pbuf_copy_partial+0x80>)
 8008a16:	481b      	ldr	r0, [pc, #108]	; (8008a84 <pbuf_copy_partial+0x84>)
 8008a18:	f003 fe58 	bl	800c6cc <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008a22:	bb41      	cbnz	r1, 8008a76 <pbuf_copy_partial+0x76>
 8008a24:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <pbuf_copy_partial+0x7c>)
 8008a26:	f240 420b 	movw	r2, #1035	; 0x40b
 8008a2a:	4917      	ldr	r1, [pc, #92]	; (8008a88 <pbuf_copy_partial+0x88>)
 8008a2c:	463d      	mov	r5, r7
 8008a2e:	4815      	ldr	r0, [pc, #84]	; (8008a84 <pbuf_copy_partial+0x84>)
 8008a30:	f003 fe4c 	bl	800c6cc <iprintf>
 8008a34:	e7f2      	b.n	8008a1c <pbuf_copy_partial+0x1c>
 8008a36:	8972      	ldrh	r2, [r6, #10]
    if ((offset != 0) && (offset >= p->len)) {
 8008a38:	b153      	cbz	r3, 8008a50 <pbuf_copy_partial+0x50>
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d308      	bcc.n	8008a50 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008a42:	6836      	ldr	r6, [r6, #0]
 8008a44:	f1b8 0f00 	cmp.w	r8, #0
 8008a48:	d0e8      	beq.n	8008a1c <pbuf_copy_partial+0x1c>
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	d1f3      	bne.n	8008a36 <pbuf_copy_partial+0x36>
 8008a4e:	e7e5      	b.n	8008a1c <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8008a50:	1ad2      	subs	r2, r2, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008a52:	6871      	ldr	r1, [r6, #4]
 8008a54:	1978      	adds	r0, r7, r5
      buf_copy_len = (u16_t)(p->len - offset);
 8008a56:	b294      	uxth	r4, r2
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008a58:	4419      	add	r1, r3
 8008a5a:	4544      	cmp	r4, r8
 8008a5c:	bf28      	it	cs
 8008a5e:	4644      	movcs	r4, r8
 8008a60:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008a62:	4425      	add	r5, r4
      len = (u16_t)(len - buf_copy_len);
 8008a64:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008a68:	f003 fe1d 	bl	800c6a6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008a6c:	b2ad      	uxth	r5, r5
      offset = 0;
 8008a6e:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8008a70:	fa1f f884 	uxth.w	r8, r4
 8008a74:	e7e5      	b.n	8008a42 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 8008a76:	2500      	movs	r5, #0
 8008a78:	e7e4      	b.n	8008a44 <pbuf_copy_partial+0x44>
 8008a7a:	bf00      	nop
 8008a7c:	080123a3 	.word	0x080123a3
 8008a80:	0801262a 	.word	0x0801262a
 8008a84:	0801153a 	.word	0x0801153a
 8008a88:	08012649 	.word	0x08012649

08008a8c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008a90:	460a      	mov	r2, r1
 8008a92:	8921      	ldrh	r1, [r4, #8]
 8008a94:	f7ff fdfe 	bl	8008694 <pbuf_alloc>
  if (q == NULL) {
 8008a98:	4605      	mov	r5, r0
 8008a9a:	b150      	cbz	r0, 8008ab2 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	f7ff ff2d 	bl	80088fc <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008aa2:	b130      	cbz	r0, 8008ab2 <pbuf_clone+0x26>
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <pbuf_clone+0x2c>)
 8008aa6:	f240 5224 	movw	r2, #1316	; 0x524
 8008aaa:	4904      	ldr	r1, [pc, #16]	; (8008abc <pbuf_clone+0x30>)
 8008aac:	4804      	ldr	r0, [pc, #16]	; (8008ac0 <pbuf_clone+0x34>)
 8008aae:	f003 fe0d 	bl	800c6cc <iprintf>
  return q;
}
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	bd38      	pop	{r3, r4, r5, pc}
 8008ab6:	bf00      	nop
 8008ab8:	080123a3 	.word	0x080123a3
 8008abc:	08012749 	.word	0x08012749
 8008ac0:	0801153a 	.word	0x0801153a

08008ac4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008ac4:	4a11      	ldr	r2, [pc, #68]	; (8008b0c <tcp_new_port+0x48>)
 8008ac6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008acc:	8811      	ldrh	r1, [r2, #0]
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008ace:	f64f 76ff 	movw	r6, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008ad2:	4f0f      	ldr	r7, [pc, #60]	; (8008b10 <tcp_new_port+0x4c>)
  tcp_port++;
 8008ad4:	1c48      	adds	r0, r1, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008ad6:	2400      	movs	r4, #0
  tcp_port++;
 8008ad8:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008ada:	42b0      	cmp	r0, r6
 8008adc:	bf08      	it	eq
 8008ade:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008ae2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8008ae6:	680d      	ldr	r5, [r1, #0]
 8008ae8:	b925      	cbnz	r5, 8008af4 <tcp_new_port+0x30>
 8008aea:	3401      	adds	r4, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008aec:	2c04      	cmp	r4, #4
 8008aee:	d1f8      	bne.n	8008ae2 <tcp_new_port+0x1e>
 8008af0:	8010      	strh	r0, [r2, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008af2:	e008      	b.n	8008b06 <tcp_new_port+0x42>
      if (pcb->local_port == tcp_port) {
 8008af4:	8ae9      	ldrh	r1, [r5, #22]
 8008af6:	4281      	cmp	r1, r0
 8008af8:	d106      	bne.n	8008b08 <tcp_new_port+0x44>
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b29b      	uxth	r3, r3
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e8      	bne.n	8008ad4 <tcp_new_port+0x10>
 8008b02:	8010      	strh	r0, [r2, #0]
          return 0;
 8008b04:	4618      	mov	r0, r3
}
 8008b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008b08:	68ed      	ldr	r5, [r5, #12]
 8008b0a:	e7ed      	b.n	8008ae8 <tcp_new_port+0x24>
 8008b0c:	2000012c 	.word	0x2000012c
 8008b10:	080113bc 	.word	0x080113bc

08008b14 <tcp_close_shutdown_fin>:
{
 8008b14:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008b16:	4604      	mov	r4, r0
 8008b18:	b930      	cbnz	r0, 8008b28 <tcp_close_shutdown_fin+0x14>
 8008b1a:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <tcp_close_shutdown_fin+0x54>)
 8008b1c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008b20:	4912      	ldr	r1, [pc, #72]	; (8008b6c <tcp_close_shutdown_fin+0x58>)
 8008b22:	4813      	ldr	r0, [pc, #76]	; (8008b70 <tcp_close_shutdown_fin+0x5c>)
 8008b24:	f003 fdd2 	bl	800c6cc <iprintf>
  switch (pcb->state) {
 8008b28:	7d23      	ldrb	r3, [r4, #20]
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d003      	beq.n	8008b36 <tcp_close_shutdown_fin+0x22>
 8008b2e:	2b07      	cmp	r3, #7
 8008b30:	d00c      	beq.n	8008b4c <tcp_close_shutdown_fin+0x38>
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d108      	bne.n	8008b48 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8008b36:	4620      	mov	r0, r4
 8008b38:	f002 fd8c 	bl	800b654 <tcp_send_fin>
      if (err == ERR_OK) {
 8008b3c:	b960      	cbnz	r0, 8008b58 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 8008b3e:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 8008b40:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8008b42:	4620      	mov	r0, r4
 8008b44:	f002 feea 	bl	800b91c <tcp_output>
      return ERR_OK;
 8008b48:	2000      	movs	r0, #0
}
 8008b4a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f002 fd81 	bl	800b654 <tcp_send_fin>
      if (err == ERR_OK) {
 8008b52:	b908      	cbnz	r0, 8008b58 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 8008b54:	2309      	movs	r3, #9
 8008b56:	e7f3      	b.n	8008b40 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d1f6      	bne.n	8008b4a <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008b5c:	8b63      	ldrh	r3, [r4, #26]
 8008b5e:	f043 0308 	orr.w	r3, r3, #8
 8008b62:	8363      	strh	r3, [r4, #26]
 8008b64:	e7f0      	b.n	8008b48 <tcp_close_shutdown_fin+0x34>
 8008b66:	bf00      	nop
 8008b68:	0801275a 	.word	0x0801275a
 8008b6c:	080127ac 	.word	0x080127ac
 8008b70:	0801153a 	.word	0x0801153a

08008b74 <tcp_init>:
{
 8008b74:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008b76:	f003 fe25 	bl	800c7c4 <rand>
 8008b7a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008b7e:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <tcp_init+0x14>)
 8008b80:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008b84:	8018      	strh	r0, [r3, #0]
}
 8008b86:	bd08      	pop	{r3, pc}
 8008b88:	2000012c 	.word	0x2000012c

08008b8c <tcp_free>:
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008b8c:	7d03      	ldrb	r3, [r0, #20]
 8008b8e:	2b01      	cmp	r3, #1
{
 8008b90:	b510      	push	{r4, lr}
 8008b92:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008b94:	d105      	bne.n	8008ba2 <tcp_free+0x16>
 8008b96:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <tcp_free+0x24>)
 8008b98:	22d4      	movs	r2, #212	; 0xd4
 8008b9a:	4906      	ldr	r1, [pc, #24]	; (8008bb4 <tcp_free+0x28>)
 8008b9c:	4806      	ldr	r0, [pc, #24]	; (8008bb8 <tcp_free+0x2c>)
 8008b9e:	f003 fd95 	bl	800c6cc <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	2001      	movs	r0, #1
}
 8008ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8008baa:	f7ff baa1 	b.w	80080f0 <memp_free>
 8008bae:	bf00      	nop
 8008bb0:	0801275a 	.word	0x0801275a
 8008bb4:	080127b8 	.word	0x080127b8
 8008bb8:	0801153a 	.word	0x0801153a

08008bbc <tcp_bind>:
{
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8008bbe:	4d23      	ldr	r5, [pc, #140]	; (8008c4c <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008bc0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8008bc2:	2900      	cmp	r1, #0
 8008bc4:	bf18      	it	ne
 8008bc6:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008bc8:	b948      	cbnz	r0, 8008bde <tcp_bind+0x22>
 8008bca:	4b21      	ldr	r3, [pc, #132]	; (8008c50 <tcp_bind+0x94>)
 8008bcc:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008bd0:	4920      	ldr	r1, [pc, #128]	; (8008c54 <tcp_bind+0x98>)
 8008bd2:	4821      	ldr	r0, [pc, #132]	; (8008c58 <tcp_bind+0x9c>)
 8008bd4:	f003 fd7a 	bl	800c6cc <iprintf>
 8008bd8:	f06f 000f 	mvn.w	r0, #15
}
 8008bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008bde:	7d03      	ldrb	r3, [r0, #20]
 8008be0:	b14b      	cbz	r3, 8008bf6 <tcp_bind+0x3a>
 8008be2:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <tcp_bind+0x94>)
 8008be4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008be8:	491c      	ldr	r1, [pc, #112]	; (8008c5c <tcp_bind+0xa0>)
 8008bea:	481b      	ldr	r0, [pc, #108]	; (8008c58 <tcp_bind+0x9c>)
 8008bec:	f003 fd6e 	bl	800c6cc <iprintf>
 8008bf0:	f06f 0005 	mvn.w	r0, #5
 8008bf4:	e7f2      	b.n	8008bdc <tcp_bind+0x20>
  if (port == 0) {
 8008bf6:	b932      	cbnz	r2, 8008c06 <tcp_bind+0x4a>
    port = tcp_new_port();
 8008bf8:	f7ff ff64 	bl	8008ac4 <tcp_new_port>
    if (port == 0) {
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	b950      	cbnz	r0, 8008c16 <tcp_bind+0x5a>
      return ERR_BUF;
 8008c00:	f06f 0001 	mvn.w	r0, #1
 8008c04:	e7ea      	b.n	8008bdc <tcp_bind+0x20>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008c06:	4f16      	ldr	r7, [pc, #88]	; (8008c60 <tcp_bind+0xa4>)
 8008c08:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8008c0c:	6808      	ldr	r0, [r1, #0]
 8008c0e:	b970      	cbnz	r0, 8008c2e <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 8008c10:	3301      	adds	r3, #1
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d1f8      	bne.n	8008c08 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	b103      	cbz	r3, 8008c1c <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008c1a:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008c1c:	4b11      	ldr	r3, [pc, #68]	; (8008c64 <tcp_bind+0xa8>)
  pcb->local_port = port;
 8008c1e:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	601c      	str	r4, [r3, #0]
 8008c24:	60e2      	str	r2, [r4, #12]
 8008c26:	f003 f94f 	bl	800bec8 <tcp_timer_needed>
  return ERR_OK;
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	e7d6      	b.n	8008bdc <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 8008c2e:	8ac1      	ldrh	r1, [r0, #22]
 8008c30:	4291      	cmp	r1, r2
 8008c32:	d105      	bne.n	8008c40 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008c34:	6806      	ldr	r6, [r0, #0]
 8008c36:	b12e      	cbz	r6, 8008c44 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 8008c38:	6829      	ldr	r1, [r5, #0]
 8008c3a:	b119      	cbz	r1, 8008c44 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008c3c:	428e      	cmp	r6, r1
 8008c3e:	d001      	beq.n	8008c44 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008c40:	68c0      	ldr	r0, [r0, #12]
 8008c42:	e7e4      	b.n	8008c0e <tcp_bind+0x52>
              return ERR_USE;
 8008c44:	f06f 0007 	mvn.w	r0, #7
 8008c48:	e7c8      	b.n	8008bdc <tcp_bind+0x20>
 8008c4a:	bf00      	nop
 8008c4c:	08011328 	.word	0x08011328
 8008c50:	0801275a 	.word	0x0801275a
 8008c54:	080127c9 	.word	0x080127c9
 8008c58:	0801153a 	.word	0x0801153a
 8008c5c:	080127df 	.word	0x080127df
 8008c60:	080113bc 	.word	0x080113bc
 8008c64:	200087b4 	.word	0x200087b4

08008c68 <tcp_listen_with_backlog_and_err>:
{
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	b968      	cbnz	r0, 8008c8c <tcp_listen_with_backlog_and_err+0x24>
 8008c70:	4b29      	ldr	r3, [pc, #164]	; (8008d18 <tcp_listen_with_backlog_and_err+0xb0>)
 8008c72:	f240 3259 	movw	r2, #857	; 0x359
 8008c76:	4929      	ldr	r1, [pc, #164]	; (8008d1c <tcp_listen_with_backlog_and_err+0xb4>)
 8008c78:	4829      	ldr	r0, [pc, #164]	; (8008d20 <tcp_listen_with_backlog_and_err+0xb8>)
 8008c7a:	f003 fd27 	bl	800c6cc <iprintf>
 8008c7e:	f06f 030f 	mvn.w	r3, #15
  struct tcp_pcb_listen *lpcb = NULL;
 8008c82:	2400      	movs	r4, #0
  if (err != NULL) {
 8008c84:	b106      	cbz	r6, 8008c88 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 8008c86:	7033      	strb	r3, [r6, #0]
}
 8008c88:	4620      	mov	r0, r4
 8008c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008c8c:	7d07      	ldrb	r7, [r0, #20]
 8008c8e:	b14f      	cbz	r7, 8008ca4 <tcp_listen_with_backlog_and_err+0x3c>
 8008c90:	4b21      	ldr	r3, [pc, #132]	; (8008d18 <tcp_listen_with_backlog_and_err+0xb0>)
 8008c92:	f240 325a 	movw	r2, #858	; 0x35a
 8008c96:	4923      	ldr	r1, [pc, #140]	; (8008d24 <tcp_listen_with_backlog_and_err+0xbc>)
 8008c98:	4821      	ldr	r0, [pc, #132]	; (8008d20 <tcp_listen_with_backlog_and_err+0xb8>)
 8008c9a:	f003 fd17 	bl	800c6cc <iprintf>
 8008c9e:	f06f 030e 	mvn.w	r3, #14
 8008ca2:	e7ee      	b.n	8008c82 <tcp_listen_with_backlog_and_err+0x1a>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008ca4:	2002      	movs	r0, #2
 8008ca6:	f7ff fa07 	bl	80080b8 <memp_malloc>
  if (lpcb == NULL) {
 8008caa:	4604      	mov	r4, r0
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d02f      	beq.n	8008d10 <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 8008cb0:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 8008cb2:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8008cb4:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008cb6:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 8008cb8:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8008cba:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8008cbc:	7d6a      	ldrb	r2, [r5, #21]
 8008cbe:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008cc0:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008cc2:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8008cc4:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8008cc6:	7aea      	ldrb	r2, [r5, #11]
 8008cc8:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8008cca:	7aaa      	ldrb	r2, [r5, #10]
 8008ccc:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008cce:	682a      	ldr	r2, [r5, #0]
 8008cd0:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8008cd2:	b13b      	cbz	r3, 8008ce4 <tcp_listen_with_backlog_and_err+0x7c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008cd4:	4a14      	ldr	r2, [pc, #80]	; (8008d28 <tcp_listen_with_backlog_and_err+0xc0>)
 8008cd6:	6813      	ldr	r3, [r2, #0]
 8008cd8:	42ab      	cmp	r3, r5
 8008cda:	d111      	bne.n	8008d00 <tcp_listen_with_backlog_and_err+0x98>
 8008cdc:	68eb      	ldr	r3, [r5, #12]
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	f7ff ff51 	bl	8008b8c <tcp_free>
  lpcb->accept = tcp_accept_null;
 8008cea:	4b10      	ldr	r3, [pc, #64]	; (8008d2c <tcp_listen_with_backlog_and_err+0xc4>)
 8008cec:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008cee:	4b10      	ldr	r3, [pc, #64]	; (8008d30 <tcp_listen_with_backlog_and_err+0xc8>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	601c      	str	r4, [r3, #0]
 8008cf4:	60e2      	str	r2, [r4, #12]
 8008cf6:	f003 f8e7 	bl	800bec8 <tcp_timer_needed>
  res = ERR_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e7c2      	b.n	8008c84 <tcp_listen_with_backlog_and_err+0x1c>
 8008cfe:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0ed      	beq.n	8008ce0 <tcp_listen_with_backlog_and_err+0x78>
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	42aa      	cmp	r2, r5
 8008d08:	d1f9      	bne.n	8008cfe <tcp_listen_with_backlog_and_err+0x96>
 8008d0a:	68ea      	ldr	r2, [r5, #12]
 8008d0c:	60da      	str	r2, [r3, #12]
 8008d0e:	e7e7      	b.n	8008ce0 <tcp_listen_with_backlog_and_err+0x78>
    res = ERR_MEM;
 8008d10:	f04f 33ff 	mov.w	r3, #4294967295
 8008d14:	e7b6      	b.n	8008c84 <tcp_listen_with_backlog_and_err+0x1c>
 8008d16:	bf00      	nop
 8008d18:	0801275a 	.word	0x0801275a
 8008d1c:	08012807 	.word	0x08012807
 8008d20:	0801153a 	.word	0x0801153a
 8008d24:	08012834 	.word	0x08012834
 8008d28:	200087b4 	.word	0x200087b4
 8008d2c:	080098b1 	.word	0x080098b1
 8008d30:	200087b0 	.word	0x200087b0

08008d34 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008d34:	2200      	movs	r2, #0
 8008d36:	f7ff bf97 	b.w	8008c68 <tcp_listen_with_backlog_and_err>
	...

08008d3c <tcp_update_rcv_ann_wnd>:
{
 8008d3c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008d3e:	4604      	mov	r4, r0
 8008d40:	b930      	cbnz	r0, 8008d50 <tcp_update_rcv_ann_wnd+0x14>
 8008d42:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <tcp_update_rcv_ann_wnd+0x5c>)
 8008d44:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008d48:	4914      	ldr	r1, [pc, #80]	; (8008d9c <tcp_update_rcv_ann_wnd+0x60>)
 8008d4a:	4815      	ldr	r0, [pc, #84]	; (8008da0 <tcp_update_rcv_ann_wnd+0x64>)
 8008d4c:	f003 fcbe 	bl	800c6cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008d50:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008d52:	f240 56b4 	movw	r6, #1460	; 0x5b4
 8008d56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d58:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008d5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d5c:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008d5e:	42b2      	cmp	r2, r6
 8008d60:	4428      	add	r0, r5
 8008d62:	bf94      	ite	ls
 8008d64:	1a82      	subls	r2, r0, r2
 8008d66:	1b82      	subhi	r2, r0, r6
 8008d68:	2a00      	cmp	r2, #0
 8008d6a:	db01      	blt.n	8008d70 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008d6c:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008d70:	1aea      	subs	r2, r5, r3
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	dd02      	ble.n	8008d7c <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 8008d76:	2000      	movs	r0, #0
 8008d78:	8560      	strh	r0, [r4, #42]	; 0x2a
 8008d7a:	e7f8      	b.n	8008d6e <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008d7c:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008d7e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008d82:	d306      	bcc.n	8008d92 <tcp_update_rcv_ann_wnd+0x56>
 8008d84:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <tcp_update_rcv_ann_wnd+0x5c>)
 8008d86:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008d8a:	4906      	ldr	r1, [pc, #24]	; (8008da4 <tcp_update_rcv_ann_wnd+0x68>)
 8008d8c:	4804      	ldr	r0, [pc, #16]	; (8008da0 <tcp_update_rcv_ann_wnd+0x64>)
 8008d8e:	f003 fc9d 	bl	800c6cc <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008d92:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8008d94:	2000      	movs	r0, #0
 8008d96:	e7ea      	b.n	8008d6e <tcp_update_rcv_ann_wnd+0x32>
 8008d98:	0801275a 	.word	0x0801275a
 8008d9c:	0801286b 	.word	0x0801286b
 8008da0:	0801153a 	.word	0x0801153a
 8008da4:	0801288f 	.word	0x0801288f

08008da8 <tcp_recved>:
{
 8008da8:	b570      	push	{r4, r5, r6, lr}
 8008daa:	460d      	mov	r5, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008dac:	4604      	mov	r4, r0
 8008dae:	b940      	cbnz	r0, 8008dc2 <tcp_recved+0x1a>
 8008db0:	4b17      	ldr	r3, [pc, #92]	; (8008e10 <tcp_recved+0x68>)
 8008db2:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008db6:	4917      	ldr	r1, [pc, #92]	; (8008e14 <tcp_recved+0x6c>)
 8008db8:	4817      	ldr	r0, [pc, #92]	; (8008e18 <tcp_recved+0x70>)
}
 8008dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008dbe:	f003 bc85 	b.w	800c6cc <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008dc2:	7d03      	ldrb	r3, [r0, #20]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d106      	bne.n	8008dd6 <tcp_recved+0x2e>
 8008dc8:	4b11      	ldr	r3, [pc, #68]	; (8008e10 <tcp_recved+0x68>)
 8008dca:	f240 32d3 	movw	r2, #979	; 0x3d3
 8008dce:	4913      	ldr	r1, [pc, #76]	; (8008e1c <tcp_recved+0x74>)
 8008dd0:	4811      	ldr	r0, [pc, #68]	; (8008e18 <tcp_recved+0x70>)
 8008dd2:	f003 fc7b 	bl	800c6cc <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008dd6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008dd8:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008ddc:	1951      	adds	r1, r2, r5
 8008dde:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008de0:	4299      	cmp	r1, r3
 8008de2:	d801      	bhi.n	8008de8 <tcp_recved+0x40>
 8008de4:	428a      	cmp	r2, r1
 8008de6:	d910      	bls.n	8008e0a <tcp_recved+0x62>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008de8:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008dea:	4620      	mov	r0, r4
 8008dec:	f7ff ffa6 	bl	8008d3c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008df0:	f240 23d9 	movw	r3, #729	; 0x2d9
 8008df4:	4298      	cmp	r0, r3
 8008df6:	d90a      	bls.n	8008e0e <tcp_recved+0x66>
    tcp_ack_now(pcb);
 8008df8:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 8008dfa:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8008dfc:	f043 0302 	orr.w	r3, r3, #2
 8008e00:	8363      	strh	r3, [r4, #26]
}
 8008e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8008e06:	f002 bd89 	b.w	800b91c <tcp_output>
    pcb->rcv_wnd = rcv_wnd;
 8008e0a:	8521      	strh	r1, [r4, #40]	; 0x28
 8008e0c:	e7ed      	b.n	8008dea <tcp_recved+0x42>
}
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	0801275a 	.word	0x0801275a
 8008e14:	080128a9 	.word	0x080128a9
 8008e18:	0801153a 	.word	0x0801153a
 8008e1c:	080128c1 	.word	0x080128c1

08008e20 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008e20:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8008e22:	4604      	mov	r4, r0
 8008e24:	b148      	cbz	r0, 8008e3a <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8008e26:	6840      	ldr	r0, [r0, #4]
 8008e28:	b108      	cbz	r0, 8008e2e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008e2a:	f7ff fbd1 	bl	80085d0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008e2e:	4621      	mov	r1, r4
 8008e30:	2003      	movs	r0, #3
  }
}
 8008e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8008e36:	f7ff b95b 	b.w	80080f0 <memp_free>
}
 8008e3a:	bd10      	pop	{r4, pc}

08008e3c <tcp_segs_free>:
{
 8008e3c:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8008e3e:	b900      	cbnz	r0, 8008e42 <tcp_segs_free+0x6>
}
 8008e40:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8008e42:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8008e44:	f7ff ffec 	bl	8008e20 <tcp_seg_free>
    seg = next;
 8008e48:	4620      	mov	r0, r4
 8008e4a:	e7f8      	b.n	8008e3e <tcp_segs_free+0x2>

08008e4c <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008e4c:	b930      	cbnz	r0, 8008e5c <tcp_setprio+0x10>
 8008e4e:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <tcp_setprio+0x14>)
 8008e50:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8008e54:	4903      	ldr	r1, [pc, #12]	; (8008e64 <tcp_setprio+0x18>)
 8008e56:	4804      	ldr	r0, [pc, #16]	; (8008e68 <tcp_setprio+0x1c>)
 8008e58:	f003 bc38 	b.w	800c6cc <iprintf>

  pcb->prio = prio;
 8008e5c:	7541      	strb	r1, [r0, #21]
}
 8008e5e:	4770      	bx	lr
 8008e60:	0801275a 	.word	0x0801275a
 8008e64:	080128e7 	.word	0x080128e7
 8008e68:	0801153a 	.word	0x0801153a

08008e6c <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008e6c:	b100      	cbz	r0, 8008e70 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8008e6e:	6101      	str	r1, [r0, #16]
  }
}
 8008e70:	4770      	bx	lr
	...

08008e74 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008e78:	4604      	mov	r4, r0
 8008e7a:	b158      	cbz	r0, 8008e94 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008e7c:	7d03      	ldrb	r3, [r0, #20]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d106      	bne.n	8008e90 <tcp_recv+0x1c>
 8008e82:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <tcp_recv+0x24>)
 8008e84:	f240 72df 	movw	r2, #2015	; 0x7df
 8008e88:	4904      	ldr	r1, [pc, #16]	; (8008e9c <tcp_recv+0x28>)
 8008e8a:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <tcp_recv+0x2c>)
 8008e8c:	f003 fc1e 	bl	800c6cc <iprintf>
    pcb->recv = recv;
 8008e90:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 8008e94:	bd38      	pop	{r3, r4, r5, pc}
 8008e96:	bf00      	nop
 8008e98:	0801275a 	.word	0x0801275a
 8008e9c:	08012900 	.word	0x08012900
 8008ea0:	0801153a 	.word	0x0801153a

08008ea4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	b150      	cbz	r0, 8008ec2 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008eac:	7d03      	ldrb	r3, [r0, #20]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d106      	bne.n	8008ec0 <tcp_sent+0x1c>
 8008eb2:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <tcp_sent+0x20>)
 8008eb4:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008eb8:	4903      	ldr	r1, [pc, #12]	; (8008ec8 <tcp_sent+0x24>)
 8008eba:	4804      	ldr	r0, [pc, #16]	; (8008ecc <tcp_sent+0x28>)
 8008ebc:	f003 fc06 	bl	800c6cc <iprintf>
    pcb->sent = sent;
 8008ec0:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	0801275a 	.word	0x0801275a
 8008ec8:	08012927 	.word	0x08012927
 8008ecc:	0801153a 	.word	0x0801153a

08008ed0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	b158      	cbz	r0, 8008ef0 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008ed8:	7d03      	ldrb	r3, [r0, #20]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d106      	bne.n	8008eec <tcp_err+0x1c>
 8008ede:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <tcp_err+0x24>)
 8008ee0:	f640 020d 	movw	r2, #2061	; 0x80d
 8008ee4:	4904      	ldr	r1, [pc, #16]	; (8008ef8 <tcp_err+0x28>)
 8008ee6:	4805      	ldr	r0, [pc, #20]	; (8008efc <tcp_err+0x2c>)
 8008ee8:	f003 fbf0 	bl	800c6cc <iprintf>
    pcb->errf = err;
 8008eec:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 8008ef0:	bd38      	pop	{r3, r4, r5, pc}
 8008ef2:	bf00      	nop
 8008ef4:	0801275a 	.word	0x0801275a
 8008ef8:	0801294e 	.word	0x0801294e
 8008efc:	0801153a 	.word	0x0801153a

08008f00 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008f00:	b118      	cbz	r0, 8008f0a <tcp_accept+0xa>
 8008f02:	7d03      	ldrb	r3, [r0, #20]
 8008f04:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8008f06:	bf08      	it	eq
 8008f08:	6181      	streq	r1, [r0, #24]
  }
}
 8008f0a:	4770      	bx	lr

08008f0c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	460e      	mov	r6, r1
 8008f10:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008f12:	4604      	mov	r4, r0
 8008f14:	b940      	cbnz	r0, 8008f28 <tcp_poll+0x1c>
 8008f16:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <tcp_poll+0x38>)
 8008f18:	f640 023d 	movw	r2, #2109	; 0x83d
 8008f1c:	490a      	ldr	r1, [pc, #40]	; (8008f48 <tcp_poll+0x3c>)
 8008f1e:	480b      	ldr	r0, [pc, #44]	; (8008f4c <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8008f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008f24:	f003 bbd2 	b.w	800c6cc <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008f28:	7d03      	ldrb	r3, [r0, #20]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d106      	bne.n	8008f3c <tcp_poll+0x30>
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <tcp_poll+0x38>)
 8008f30:	f640 023e 	movw	r2, #2110	; 0x83e
 8008f34:	4906      	ldr	r1, [pc, #24]	; (8008f50 <tcp_poll+0x44>)
 8008f36:	4805      	ldr	r0, [pc, #20]	; (8008f4c <tcp_poll+0x40>)
 8008f38:	f003 fbc8 	bl	800c6cc <iprintf>
  pcb->poll = poll;
 8008f3c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8008f40:	7765      	strb	r5, [r4, #29]
}
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	0801275a 	.word	0x0801275a
 8008f48:	08012974 	.word	0x08012974
 8008f4c:	0801153a 	.word	0x0801153a
 8008f50:	0801298a 	.word	0x0801298a

08008f54 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008f54:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008f56:	4604      	mov	r4, r0
 8008f58:	b940      	cbnz	r0, 8008f6c <tcp_pcb_purge+0x18>
 8008f5a:	4b11      	ldr	r3, [pc, #68]	; (8008fa0 <tcp_pcb_purge+0x4c>)
 8008f5c:	f640 0251 	movw	r2, #2129	; 0x851
 8008f60:	4910      	ldr	r1, [pc, #64]	; (8008fa4 <tcp_pcb_purge+0x50>)
 8008f62:	4811      	ldr	r0, [pc, #68]	; (8008fa8 <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 8008f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008f68:	f003 bbb0 	b.w	800c6cc <iprintf>
  if (pcb->state != CLOSED &&
 8008f6c:	7d03      	ldrb	r3, [r0, #20]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d915      	bls.n	8008f9e <tcp_pcb_purge+0x4a>
 8008f72:	2b0a      	cmp	r3, #10
 8008f74:	d013      	beq.n	8008f9e <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 8008f76:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008f78:	b118      	cbz	r0, 8008f82 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 8008f7a:	f7ff fb29 	bl	80085d0 <pbuf_free>
      pcb->refused_data = NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 8008f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8008f86:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 8008f88:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8008f8a:	f7ff ff57 	bl	8008e3c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008f8e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008f90:	f7ff ff54 	bl	8008e3c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 8008f9a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8008f9e:	bd10      	pop	{r4, pc}
 8008fa0:	0801275a 	.word	0x0801275a
 8008fa4:	080129a8 	.word	0x080129a8
 8008fa8:	0801153a 	.word	0x0801153a

08008fac <tcp_slowtmr>:
{
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8008fb0:	4eb5      	ldr	r6, [pc, #724]	; (8009288 <tcp_slowtmr+0x2dc>)
{
 8008fb2:	b087      	sub	sp, #28
      tcp_active_pcbs_changed = 0;
 8008fb4:	f8df a304 	ldr.w	sl, [pc, #772]	; 80092bc <tcp_slowtmr+0x310>
  ++tcp_ticks;
 8008fb8:	6833      	ldr	r3, [r6, #0]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8008fbe:	4bb3      	ldr	r3, [pc, #716]	; (800928c <tcp_slowtmr+0x2e0>)
 8008fc0:	781a      	ldrb	r2, [r3, #0]
 8008fc2:	9304      	str	r3, [sp, #16]
 8008fc4:	3201      	adds	r2, #1
 8008fc6:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 8008fc8:	4bb1      	ldr	r3, [pc, #708]	; (8009290 <tcp_slowtmr+0x2e4>)
  prev = NULL;
 8008fca:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008fce:	4fb1      	ldr	r7, [pc, #708]	; (8009294 <tcp_slowtmr+0x2e8>)
  pcb = tcp_active_pcbs;
 8008fd0:	681c      	ldr	r4, [r3, #0]
 8008fd2:	4698      	mov	r8, r3
  while (pcb != NULL) {
 8008fd4:	b96c      	cbnz	r4, 8008ff2 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8008fd6:	4fb0      	ldr	r7, [pc, #704]	; (8009298 <tcp_slowtmr+0x2ec>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fd8:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8009294 <tcp_slowtmr+0x2e8>
  pcb = tcp_tw_pcbs;
 8008fdc:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fde:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 80092c0 <tcp_slowtmr+0x314>
 8008fe2:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 80092a0 <tcp_slowtmr+0x2f4>
  while (pcb != NULL) {
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	f040 81b6 	bne.w	8009358 <tcp_slowtmr+0x3ac>
}
 8008fec:	b007      	add	sp, #28
 8008fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008ff2:	7d23      	ldrb	r3, [r4, #20]
 8008ff4:	b933      	cbnz	r3, 8009004 <tcp_slowtmr+0x58>
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	f240 42be 	movw	r2, #1214	; 0x4be
 8008ffc:	49a7      	ldr	r1, [pc, #668]	; (800929c <tcp_slowtmr+0x2f0>)
 8008ffe:	48a8      	ldr	r0, [pc, #672]	; (80092a0 <tcp_slowtmr+0x2f4>)
 8009000:	f003 fb64 	bl	800c6cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009004:	7d23      	ldrb	r3, [r4, #20]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d106      	bne.n	8009018 <tcp_slowtmr+0x6c>
 800900a:	463b      	mov	r3, r7
 800900c:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009010:	49a4      	ldr	r1, [pc, #656]	; (80092a4 <tcp_slowtmr+0x2f8>)
 8009012:	48a3      	ldr	r0, [pc, #652]	; (80092a0 <tcp_slowtmr+0x2f4>)
 8009014:	f003 fb5a 	bl	800c6cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009018:	7d23      	ldrb	r3, [r4, #20]
 800901a:	2b0a      	cmp	r3, #10
 800901c:	d106      	bne.n	800902c <tcp_slowtmr+0x80>
 800901e:	463b      	mov	r3, r7
 8009020:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009024:	49a0      	ldr	r1, [pc, #640]	; (80092a8 <tcp_slowtmr+0x2fc>)
 8009026:	489e      	ldr	r0, [pc, #632]	; (80092a0 <tcp_slowtmr+0x2f4>)
 8009028:	f003 fb50 	bl	800c6cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800902c:	9b04      	ldr	r3, [sp, #16]
 800902e:	7fa2      	ldrb	r2, [r4, #30]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d103      	bne.n	800903e <tcp_slowtmr+0x92>
      pcb = pcb->next;
 8009036:	68e5      	ldr	r5, [r4, #12]
 8009038:	46a1      	mov	r9, r4
 800903a:	462c      	mov	r4, r5
 800903c:	e7ca      	b.n	8008fd4 <tcp_slowtmr+0x28>
    pcb->last_timer = tcp_timer_ctr;
 800903e:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009040:	7d23      	ldrb	r3, [r4, #20]
 8009042:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8009046:	2b02      	cmp	r3, #2
 8009048:	d131      	bne.n	80090ae <tcp_slowtmr+0x102>
 800904a:	2a05      	cmp	r2, #5
 800904c:	f200 81ba 	bhi.w	80093c4 <tcp_slowtmr+0x418>
      if (pcb->persist_backoff > 0) {
 8009050:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8009054:	f1bb 0f00 	cmp.w	fp, #0
 8009058:	f000 80c4 	beq.w	80091e4 <tcp_slowtmr+0x238>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800905c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800905e:	b133      	cbz	r3, 800906e <tcp_slowtmr+0xc2>
 8009060:	463b      	mov	r3, r7
 8009062:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009066:	4991      	ldr	r1, [pc, #580]	; (80092ac <tcp_slowtmr+0x300>)
 8009068:	488d      	ldr	r0, [pc, #564]	; (80092a0 <tcp_slowtmr+0x2f4>)
 800906a:	f003 fb2f 	bl	800c6cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800906e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009070:	b933      	cbnz	r3, 8009080 <tcp_slowtmr+0xd4>
 8009072:	463b      	mov	r3, r7
 8009074:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009078:	498d      	ldr	r1, [pc, #564]	; (80092b0 <tcp_slowtmr+0x304>)
 800907a:	4889      	ldr	r0, [pc, #548]	; (80092a0 <tcp_slowtmr+0x2f4>)
 800907c:	f003 fb26 	bl	800c6cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009080:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8009084:	2b0b      	cmp	r3, #11
 8009086:	d814      	bhi.n	80090b2 <tcp_slowtmr+0x106>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009088:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800908c:	4b89      	ldr	r3, [pc, #548]	; (80092b4 <tcp_slowtmr+0x308>)
 800908e:	4413      	add	r3, r2
 8009090:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 8009092:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8009096:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 8009098:	bf3c      	itt	cc
 800909a:	3301      	addcc	r3, #1
 800909c:	f884 3094 	strbcc.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 80090a0:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d27c      	bcs.n	80091a2 <tcp_slowtmr+0x1f6>
    pcb_remove = 0;
 80090a8:	f04f 0b00 	mov.w	fp, #0
 80090ac:	e003      	b.n	80090b6 <tcp_slowtmr+0x10a>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80090ae:	2a0b      	cmp	r2, #11
 80090b0:	d9ce      	bls.n	8009050 <tcp_slowtmr+0xa4>
      ++pcb_remove;
 80090b2:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 80090b6:	7d23      	ldrb	r3, [r4, #20]
 80090b8:	2b06      	cmp	r3, #6
 80090ba:	d10b      	bne.n	80090d4 <tcp_slowtmr+0x128>
      if (pcb->flags & TF_RXCLOSED) {
 80090bc:	8b62      	ldrh	r2, [r4, #26]
 80090be:	06d2      	lsls	r2, r2, #27
 80090c0:	d508      	bpl.n	80090d4 <tcp_slowtmr+0x128>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090c2:	6832      	ldr	r2, [r6, #0]
 80090c4:	6a21      	ldr	r1, [r4, #32]
 80090c6:	1a52      	subs	r2, r2, r1
 80090c8:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80090ca:	bf84      	itt	hi
 80090cc:	f10b 0b01 	addhi.w	fp, fp, #1
 80090d0:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80090d4:	7a65      	ldrb	r5, [r4, #9]
 80090d6:	f015 0508 	ands.w	r5, r5, #8
 80090da:	d019      	beq.n	8009110 <tcp_slowtmr+0x164>
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d002      	beq.n	80090e6 <tcp_slowtmr+0x13a>
        ((pcb->state == ESTABLISHED) ||
 80090e0:	2b07      	cmp	r3, #7
 80090e2:	f040 8101 	bne.w	80092e8 <tcp_slowtmr+0x33c>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80090e6:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 80090ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090ee:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80090f0:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090f4:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80090f6:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090fa:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80090fc:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009100:	4291      	cmp	r1, r2
 8009102:	f240 80df 	bls.w	80092c4 <tcp_slowtmr+0x318>
        ++pcb_remove;
 8009106:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800910a:	2501      	movs	r5, #1
        ++pcb_remove;
 800910c:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->state == SYN_RCVD) {
 8009110:	7d23      	ldrb	r3, [r4, #20]
 8009112:	2b03      	cmp	r3, #3
 8009114:	f040 80ea 	bne.w	80092ec <tcp_slowtmr+0x340>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009118:	6833      	ldr	r3, [r6, #0]
 800911a:	6a22      	ldr	r2, [r4, #32]
 800911c:	1a9b      	subs	r3, r3, r2
 800911e:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009120:	d803      	bhi.n	800912a <tcp_slowtmr+0x17e>
    if (pcb_remove) {
 8009122:	f1bb 0f00 	cmp.w	fp, #0
 8009126:	f000 80f6 	beq.w	8009316 <tcp_slowtmr+0x36a>
      tcp_pcb_purge(pcb);
 800912a:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800912c:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8009130:	f7ff ff10 	bl	8008f54 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009134:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 8009138:	f1b9 0f00 	cmp.w	r9, #0
 800913c:	f000 80de 	beq.w	80092fc <tcp_slowtmr+0x350>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009140:	42a3      	cmp	r3, r4
 8009142:	d106      	bne.n	8009152 <tcp_slowtmr+0x1a6>
 8009144:	463b      	mov	r3, r7
 8009146:	f240 526d 	movw	r2, #1389	; 0x56d
 800914a:	495b      	ldr	r1, [pc, #364]	; (80092b8 <tcp_slowtmr+0x30c>)
 800914c:	4854      	ldr	r0, [pc, #336]	; (80092a0 <tcp_slowtmr+0x2f4>)
 800914e:	f003 fabd 	bl	800c6cc <iprintf>
        prev->next = pcb->next;
 8009152:	68e3      	ldr	r3, [r4, #12]
 8009154:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 8009158:	b15d      	cbz	r5, 8009172 <tcp_slowtmr+0x1c6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800915a:	8b23      	ldrh	r3, [r4, #24]
 800915c:	4620      	mov	r0, r4
 800915e:	9302      	str	r3, [sp, #8]
 8009160:	8ae3      	ldrh	r3, [r4, #22]
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	1d23      	adds	r3, r4, #4
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4623      	mov	r3, r4
 800916a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800916c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800916e:	f002 fb5f 	bl	800b830 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009172:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 8009174:	4620      	mov	r0, r4
      pcb = pcb->next;
 8009176:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 8009178:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800917a:	f7ff fd07 	bl	8008b8c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800917e:	2200      	movs	r2, #0
 8009180:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009184:	f1bb 0f00 	cmp.w	fp, #0
 8009188:	d004      	beq.n	8009194 <tcp_slowtmr+0x1e8>
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	f06f 010c 	mvn.w	r1, #12
 8009190:	4618      	mov	r0, r3
 8009192:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8009194:	f89a 3000 	ldrb.w	r3, [sl]
 8009198:	2b00      	cmp	r3, #0
 800919a:	f47f af15 	bne.w	8008fc8 <tcp_slowtmr+0x1c>
 800919e:	464c      	mov	r4, r9
 80091a0:	e74a      	b.n	8009038 <tcp_slowtmr+0x8c>
            if (pcb->snd_wnd == 0) {
 80091a2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80091a6:	4620      	mov	r0, r4
            if (pcb->snd_wnd == 0) {
 80091a8:	b989      	cbnz	r1, 80091ce <tcp_slowtmr+0x222>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80091aa:	f002 fdbf 	bl	800bd2c <tcp_zero_window_probe>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	f47f af7a 	bne.w	80090a8 <tcp_slowtmr+0xfc>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80091b4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 80091b8:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80091bc:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 80091be:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80091c2:	f63f af71 	bhi.w	80090a8 <tcp_slowtmr+0xfc>
                pcb->persist_backoff++;
 80091c6:	3301      	adds	r3, #1
 80091c8:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80091cc:	e773      	b.n	80090b6 <tcp_slowtmr+0x10a>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80091ce:	f002 f8e7 	bl	800b3a0 <tcp_split_unsent_seg>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1ee      	bne.n	80091b4 <tcp_slowtmr+0x208>
                if (tcp_output(pcb) == ERR_OK) {
 80091d6:	4620      	mov	r0, r4
 80091d8:	f002 fba0 	bl	800b91c <tcp_output>
 80091dc:	2800      	cmp	r0, #0
 80091de:	f43f af63 	beq.w	80090a8 <tcp_slowtmr+0xfc>
 80091e2:	e7e7      	b.n	80091b4 <tcp_slowtmr+0x208>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80091e4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	db05      	blt.n	80091f8 <tcp_slowtmr+0x24c>
 80091ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80091f0:	4293      	cmp	r3, r2
          ++pcb->rtime;
 80091f2:	bf1c      	itt	ne
 80091f4:	3301      	addne	r3, #1
 80091f6:	8623      	strhne	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 80091f8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80091fc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009200:	429a      	cmp	r2, r3
 8009202:	f6ff af51 	blt.w	80090a8 <tcp_slowtmr+0xfc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009206:	4620      	mov	r0, r4
 8009208:	f002 fa56 	bl	800b6b8 <tcp_rexmit_rto_prepare>
 800920c:	b138      	cbz	r0, 800921e <tcp_slowtmr+0x272>
 800920e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009210:	2b00      	cmp	r3, #0
 8009212:	f47f af49 	bne.w	80090a8 <tcp_slowtmr+0xfc>
 8009216:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009218:	2b00      	cmp	r3, #0
 800921a:	f43f af45 	beq.w	80090a8 <tcp_slowtmr+0xfc>
            if (pcb->state != SYN_SENT) {
 800921e:	7d23      	ldrb	r3, [r4, #20]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d015      	beq.n	8009250 <tcp_slowtmr+0x2a4>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009224:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009228:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800922c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009230:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8009234:	4a1f      	ldr	r2, [pc, #124]	; (80092b4 <tcp_slowtmr+0x308>)
 8009236:	290c      	cmp	r1, #12
 8009238:	bf94      	ite	ls
 800923a:	1852      	addls	r2, r2, r1
 800923c:	320c      	addhi	r2, #12
 800923e:	7dd2      	ldrb	r2, [r2, #23]
 8009240:	4093      	lsls	r3, r2
 8009242:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009246:	4293      	cmp	r3, r2
 8009248:	bfa8      	it	ge
 800924a:	4613      	movge	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800924c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009250:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
            pcb->rtime = 0;
 8009254:	2100      	movs	r1, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009256:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800925a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800925c:	4293      	cmp	r3, r2
            pcb->rtime = 0;
 800925e:	8621      	strh	r1, [r4, #48]	; 0x30
            pcb->cwnd = pcb->mss;
 8009260:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8009264:	bf28      	it	cs
 8009266:	4613      	movcs	r3, r2
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009268:	0042      	lsls	r2, r0, #1
            pcb->bytes_acked = 0;
 800926a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800926e:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 8009270:	085b      	lsrs	r3, r3, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009272:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 8009274:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009278:	4293      	cmp	r3, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800927a:	bf38      	it	cc
 800927c:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 8009280:	f002 fcf6 	bl	800bc70 <tcp_rexmit_rto_commit>
 8009284:	e717      	b.n	80090b6 <tcp_slowtmr+0x10a>
 8009286:	bf00      	nop
 8009288:	200087ac 	.word	0x200087ac
 800928c:	20000589 	.word	0x20000589
 8009290:	200087a8 	.word	0x200087a8
 8009294:	0801275a 	.word	0x0801275a
 8009298:	200087b8 	.word	0x200087b8
 800929c:	080129c3 	.word	0x080129c3
 80092a0:	0801153a 	.word	0x0801153a
 80092a4:	080129ed 	.word	0x080129ed
 80092a8:	08012a17 	.word	0x08012a17
 80092ac:	08012a44 	.word	0x08012a44
 80092b0:	08012a76 	.word	0x08012a76
 80092b4:	080113bc 	.word	0x080113bc
 80092b8:	08012aab 	.word	0x08012aab
 80092bc:	200087a4 	.word	0x200087a4
 80092c0:	08012b00 	.word	0x08012b00
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80092c4:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 80092c8:	4a40      	ldr	r2, [pc, #256]	; (80093cc <tcp_slowtmr+0x420>)
 80092ca:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 80092ce:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80092d2:	4299      	cmp	r1, r3
 80092d4:	d908      	bls.n	80092e8 <tcp_slowtmr+0x33c>
        err = tcp_keepalive(pcb);
 80092d6:	4620      	mov	r0, r4
 80092d8:	f002 fd00 	bl	800bcdc <tcp_keepalive>
        if (err == ERR_OK) {
 80092dc:	b920      	cbnz	r0, 80092e8 <tcp_slowtmr+0x33c>
          pcb->keep_cnt_sent++;
 80092de:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 80092e2:	3301      	adds	r3, #1
 80092e4:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 80092e8:	2500      	movs	r5, #0
 80092ea:	e711      	b.n	8009110 <tcp_slowtmr+0x164>
    if (pcb->state == LAST_ACK) {
 80092ec:	2b09      	cmp	r3, #9
 80092ee:	f47f af18 	bne.w	8009122 <tcp_slowtmr+0x176>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80092f2:	6833      	ldr	r3, [r6, #0]
 80092f4:	6a22      	ldr	r2, [r4, #32]
 80092f6:	1a9b      	subs	r3, r3, r2
 80092f8:	2bf0      	cmp	r3, #240	; 0xf0
 80092fa:	e711      	b.n	8009120 <tcp_slowtmr+0x174>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	d006      	beq.n	800930e <tcp_slowtmr+0x362>
 8009300:	463b      	mov	r3, r7
 8009302:	f240 5271 	movw	r2, #1393	; 0x571
 8009306:	4932      	ldr	r1, [pc, #200]	; (80093d0 <tcp_slowtmr+0x424>)
 8009308:	4832      	ldr	r0, [pc, #200]	; (80093d4 <tcp_slowtmr+0x428>)
 800930a:	f003 f9df 	bl	800c6cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800930e:	68e3      	ldr	r3, [r4, #12]
 8009310:	f8c8 3000 	str.w	r3, [r8]
 8009314:	e720      	b.n	8009158 <tcp_slowtmr+0x1ac>
      ++prev->polltmr;
 8009316:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009318:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800931a:	3301      	adds	r3, #1
      pcb = pcb->next;
 800931c:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800931e:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8009320:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8009322:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009324:	f63f ae88 	bhi.w	8009038 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 8009328:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800932c:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8009330:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8009334:	b173      	cbz	r3, 8009354 <tcp_slowtmr+0x3a8>
 8009336:	4621      	mov	r1, r4
 8009338:	6920      	ldr	r0, [r4, #16]
 800933a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800933c:	f89a 3000 	ldrb.w	r3, [sl]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f47f ae41 	bne.w	8008fc8 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8009346:	2800      	cmp	r0, #0
 8009348:	f47f ae76 	bne.w	8009038 <tcp_slowtmr+0x8c>
          tcp_output(prev);
 800934c:	4620      	mov	r0, r4
 800934e:	f002 fae5 	bl	800b91c <tcp_output>
 8009352:	e671      	b.n	8009038 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 8009354:	4658      	mov	r0, fp
 8009356:	e7f1      	b.n	800933c <tcp_slowtmr+0x390>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009358:	7d2b      	ldrb	r3, [r5, #20]
 800935a:	2b0a      	cmp	r3, #10
 800935c:	d006      	beq.n	800936c <tcp_slowtmr+0x3c0>
 800935e:	4643      	mov	r3, r8
 8009360:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009364:	4651      	mov	r1, sl
 8009366:	4648      	mov	r0, r9
 8009368:	f003 f9b0 	bl	800c6cc <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800936c:	6833      	ldr	r3, [r6, #0]
 800936e:	6a2a      	ldr	r2, [r5, #32]
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	2bf0      	cmp	r3, #240	; 0xf0
 8009374:	d910      	bls.n	8009398 <tcp_slowtmr+0x3ec>
      tcp_pcb_purge(pcb);
 8009376:	4628      	mov	r0, r5
 8009378:	f7ff fdec 	bl	8008f54 <tcp_pcb_purge>
      if (prev != NULL) {
 800937c:	b97c      	cbnz	r4, 800939e <tcp_slowtmr+0x3f2>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	42ab      	cmp	r3, r5
 8009382:	d006      	beq.n	8009392 <tcp_slowtmr+0x3e6>
 8009384:	4643      	mov	r3, r8
 8009386:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800938a:	4913      	ldr	r1, [pc, #76]	; (80093d8 <tcp_slowtmr+0x42c>)
 800938c:	4648      	mov	r0, r9
 800938e:	f003 f99d 	bl	800c6cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009392:	68eb      	ldr	r3, [r5, #12]
 8009394:	603b      	str	r3, [r7, #0]
 8009396:	e00e      	b.n	80093b6 <tcp_slowtmr+0x40a>
      pcb = pcb->next;
 8009398:	462c      	mov	r4, r5
 800939a:	68ed      	ldr	r5, [r5, #12]
 800939c:	e623      	b.n	8008fe6 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	42ab      	cmp	r3, r5
 80093a2:	d106      	bne.n	80093b2 <tcp_slowtmr+0x406>
 80093a4:	4643      	mov	r3, r8
 80093a6:	f240 52af 	movw	r2, #1455	; 0x5af
 80093aa:	490c      	ldr	r1, [pc, #48]	; (80093dc <tcp_slowtmr+0x430>)
 80093ac:	4648      	mov	r0, r9
 80093ae:	f003 f98d 	bl	800c6cc <iprintf>
        prev->next = pcb->next;
 80093b2:	68eb      	ldr	r3, [r5, #12]
 80093b4:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80093b6:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 80093ba:	4628      	mov	r0, r5
 80093bc:	f7ff fbe6 	bl	8008b8c <tcp_free>
      pcb = pcb->next;
 80093c0:	465d      	mov	r5, fp
 80093c2:	e610      	b.n	8008fe6 <tcp_slowtmr+0x3a>
      ++pcb_remove;
 80093c4:	f04f 0b01 	mov.w	fp, #1
 80093c8:	e684      	b.n	80090d4 <tcp_slowtmr+0x128>
 80093ca:	bf00      	nop
 80093cc:	000124f8 	.word	0x000124f8
 80093d0:	08012ad6 	.word	0x08012ad6
 80093d4:	0801153a 	.word	0x0801153a
 80093d8:	08012b56 	.word	0x08012b56
 80093dc:	08012b2f 	.word	0x08012b2f

080093e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80093e4:	460c      	mov	r4, r1
 80093e6:	b931      	cbnz	r1, 80093f6 <tcp_pcb_remove+0x16>
 80093e8:	4b24      	ldr	r3, [pc, #144]	; (800947c <tcp_pcb_remove+0x9c>)
 80093ea:	f640 0283 	movw	r2, #2179	; 0x883
 80093ee:	4924      	ldr	r1, [pc, #144]	; (8009480 <tcp_pcb_remove+0xa0>)
 80093f0:	4824      	ldr	r0, [pc, #144]	; (8009484 <tcp_pcb_remove+0xa4>)
 80093f2:	f003 f96b 	bl	800c6cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80093f6:	b935      	cbnz	r5, 8009406 <tcp_pcb_remove+0x26>
 80093f8:	4b20      	ldr	r3, [pc, #128]	; (800947c <tcp_pcb_remove+0x9c>)
 80093fa:	f640 0284 	movw	r2, #2180	; 0x884
 80093fe:	4922      	ldr	r1, [pc, #136]	; (8009488 <tcp_pcb_remove+0xa8>)
 8009400:	4820      	ldr	r0, [pc, #128]	; (8009484 <tcp_pcb_remove+0xa4>)
 8009402:	f003 f963 	bl	800c6cc <iprintf>

  TCP_RMV(pcblist, pcb);
 8009406:	682b      	ldr	r3, [r5, #0]
 8009408:	42a3      	cmp	r3, r4
 800940a:	d12e      	bne.n	800946a <tcp_pcb_remove+0x8a>
 800940c:	68e3      	ldr	r3, [r4, #12]
 800940e:	602b      	str	r3, [r5, #0]
 8009410:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 8009412:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8009414:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8009416:	f7ff fd9d 	bl	8008f54 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800941a:	7d23      	ldrb	r3, [r4, #20]
 800941c:	2b0a      	cmp	r3, #10
 800941e:	d00a      	beq.n	8009436 <tcp_pcb_remove+0x56>
 8009420:	2b01      	cmp	r3, #1
 8009422:	d008      	beq.n	8009436 <tcp_pcb_remove+0x56>
      (pcb->state != LISTEN) &&
      (pcb->flags & TF_ACK_DELAY)) {
 8009424:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8009426:	07da      	lsls	r2, r3, #31
 8009428:	d505      	bpl.n	8009436 <tcp_pcb_remove+0x56>
    tcp_ack_now(pcb);
 800942a:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800942e:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8009430:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8009432:	f002 fa73 	bl	800b91c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009436:	7d23      	ldrb	r3, [r4, #20]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d011      	beq.n	8009460 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800943c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800943e:	b133      	cbz	r3, 800944e <tcp_pcb_remove+0x6e>
 8009440:	4b0e      	ldr	r3, [pc, #56]	; (800947c <tcp_pcb_remove+0x9c>)
 8009442:	f640 0293 	movw	r2, #2195	; 0x893
 8009446:	4911      	ldr	r1, [pc, #68]	; (800948c <tcp_pcb_remove+0xac>)
 8009448:	480e      	ldr	r0, [pc, #56]	; (8009484 <tcp_pcb_remove+0xa4>)
 800944a:	f003 f93f 	bl	800c6cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800944e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009450:	b133      	cbz	r3, 8009460 <tcp_pcb_remove+0x80>
 8009452:	4b0a      	ldr	r3, [pc, #40]	; (800947c <tcp_pcb_remove+0x9c>)
 8009454:	f640 0294 	movw	r2, #2196	; 0x894
 8009458:	490d      	ldr	r1, [pc, #52]	; (8009490 <tcp_pcb_remove+0xb0>)
 800945a:	480a      	ldr	r0, [pc, #40]	; (8009484 <tcp_pcb_remove+0xa4>)
 800945c:	f003 f936 	bl	800c6cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009460:	2300      	movs	r3, #0
 8009462:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009464:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0d0      	beq.n	8009410 <tcp_pcb_remove+0x30>
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	42a2      	cmp	r2, r4
 8009472:	d1f9      	bne.n	8009468 <tcp_pcb_remove+0x88>
 8009474:	68e2      	ldr	r2, [r4, #12]
 8009476:	60da      	str	r2, [r3, #12]
 8009478:	e7ca      	b.n	8009410 <tcp_pcb_remove+0x30>
 800947a:	bf00      	nop
 800947c:	0801275a 	.word	0x0801275a
 8009480:	08012b7c 	.word	0x08012b7c
 8009484:	0801153a 	.word	0x0801153a
 8009488:	08012b98 	.word	0x08012b98
 800948c:	08012bb8 	.word	0x08012bb8
 8009490:	08012bd0 	.word	0x08012bd0

08009494 <tcp_close_shutdown>:
{
 8009494:	b530      	push	{r4, r5, lr}
 8009496:	460d      	mov	r5, r1
 8009498:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800949a:	4604      	mov	r4, r0
 800949c:	b930      	cbnz	r0, 80094ac <tcp_close_shutdown+0x18>
 800949e:	4b4b      	ldr	r3, [pc, #300]	; (80095cc <tcp_close_shutdown+0x138>)
 80094a0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80094a4:	494a      	ldr	r1, [pc, #296]	; (80095d0 <tcp_close_shutdown+0x13c>)
 80094a6:	484b      	ldr	r0, [pc, #300]	; (80095d4 <tcp_close_shutdown+0x140>)
 80094a8:	f003 f910 	bl	800c6cc <iprintf>
 80094ac:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80094ae:	2d00      	cmp	r5, #0
 80094b0:	d040      	beq.n	8009534 <tcp_close_shutdown+0xa0>
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d001      	beq.n	80094ba <tcp_close_shutdown+0x26>
 80094b6:	2b07      	cmp	r3, #7
 80094b8:	d13c      	bne.n	8009534 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80094ba:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80094bc:	b922      	cbnz	r2, 80094c8 <tcp_close_shutdown+0x34>
 80094be:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80094c0:	f640 3268 	movw	r2, #2920	; 0xb68
 80094c4:	4291      	cmp	r1, r2
 80094c6:	d035      	beq.n	8009534 <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80094c8:	8b63      	ldrh	r3, [r4, #26]
 80094ca:	06db      	lsls	r3, r3, #27
 80094cc:	d406      	bmi.n	80094dc <tcp_close_shutdown+0x48>
 80094ce:	4b3f      	ldr	r3, [pc, #252]	; (80095cc <tcp_close_shutdown+0x138>)
 80094d0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80094d4:	4940      	ldr	r1, [pc, #256]	; (80095d8 <tcp_close_shutdown+0x144>)
 80094d6:	483f      	ldr	r0, [pc, #252]	; (80095d4 <tcp_close_shutdown+0x140>)
 80094d8:	f003 f8f8 	bl	800c6cc <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80094dc:	8b23      	ldrh	r3, [r4, #24]
 80094de:	4620      	mov	r0, r4
 80094e0:	9302      	str	r3, [sp, #8]
 80094e2:	8ae3      	ldrh	r3, [r4, #22]
 80094e4:	9301      	str	r3, [sp, #4]
 80094e6:	1d23      	adds	r3, r4, #4
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	4623      	mov	r3, r4
 80094ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80094ee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80094f0:	f002 f99e 	bl	800b830 <tcp_rst>
      tcp_pcb_purge(pcb);
 80094f4:	4620      	mov	r0, r4
 80094f6:	f7ff fd2d 	bl	8008f54 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80094fa:	4a38      	ldr	r2, [pc, #224]	; (80095dc <tcp_close_shutdown+0x148>)
 80094fc:	6813      	ldr	r3, [r2, #0]
 80094fe:	42a3      	cmp	r3, r4
 8009500:	d110      	bne.n	8009524 <tcp_close_shutdown+0x90>
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	2300      	movs	r3, #0
 8009508:	2201      	movs	r2, #1
 800950a:	60e3      	str	r3, [r4, #12]
 800950c:	4b34      	ldr	r3, [pc, #208]	; (80095e0 <tcp_close_shutdown+0x14c>)
 800950e:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8009510:	4b34      	ldr	r3, [pc, #208]	; (80095e4 <tcp_close_shutdown+0x150>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	42a3      	cmp	r3, r4
 8009516:	d122      	bne.n	800955e <tcp_close_shutdown+0xca>
        tcp_trigger_input_pcb_close();
 8009518:	f001 fb1e 	bl	800ab58 <tcp_trigger_input_pcb_close>
}
 800951c:	2000      	movs	r0, #0
 800951e:	b005      	add	sp, #20
 8009520:	bd30      	pop	{r4, r5, pc}
 8009522:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8009524:	2b00      	cmp	r3, #0
 8009526:	d0ee      	beq.n	8009506 <tcp_close_shutdown+0x72>
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	42a2      	cmp	r2, r4
 800952c:	d1f9      	bne.n	8009522 <tcp_close_shutdown+0x8e>
 800952e:	68e2      	ldr	r2, [r4, #12]
 8009530:	60da      	str	r2, [r3, #12]
 8009532:	e7e8      	b.n	8009506 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 8009534:	2b01      	cmp	r3, #1
 8009536:	d01f      	beq.n	8009578 <tcp_close_shutdown+0xe4>
 8009538:	d307      	bcc.n	800954a <tcp_close_shutdown+0xb6>
 800953a:	2b02      	cmp	r3, #2
 800953c:	d03d      	beq.n	80095ba <tcp_close_shutdown+0x126>
      return tcp_close_shutdown_fin(pcb);
 800953e:	4620      	mov	r0, r4
}
 8009540:	b005      	add	sp, #20
 8009542:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8009546:	f7ff bae5 	b.w	8008b14 <tcp_close_shutdown_fin>
      if (pcb->local_port != 0) {
 800954a:	8ae3      	ldrh	r3, [r4, #22]
 800954c:	b13b      	cbz	r3, 800955e <tcp_close_shutdown+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800954e:	4a26      	ldr	r2, [pc, #152]	; (80095e8 <tcp_close_shutdown+0x154>)
 8009550:	6813      	ldr	r3, [r2, #0]
 8009552:	42a3      	cmp	r3, r4
 8009554:	d108      	bne.n	8009568 <tcp_close_shutdown+0xd4>
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	2300      	movs	r3, #0
 800955c:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800955e:	4620      	mov	r0, r4
 8009560:	f7ff fb14 	bl	8008b8c <tcp_free>
      break;
 8009564:	e7da      	b.n	800951c <tcp_close_shutdown+0x88>
 8009566:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0f6      	beq.n	800955a <tcp_close_shutdown+0xc6>
 800956c:	68da      	ldr	r2, [r3, #12]
 800956e:	42a2      	cmp	r2, r4
 8009570:	d1f9      	bne.n	8009566 <tcp_close_shutdown+0xd2>
 8009572:	68e2      	ldr	r2, [r4, #12]
 8009574:	60da      	str	r2, [r3, #12]
 8009576:	e7f0      	b.n	800955a <tcp_close_shutdown+0xc6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009578:	491c      	ldr	r1, [pc, #112]	; (80095ec <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 800957a:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800957c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8009580:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009582:	b9a2      	cbnz	r2, 80095ae <tcp_close_shutdown+0x11a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009584:	3301      	adds	r3, #1
 8009586:	2b04      	cmp	r3, #4
 8009588:	d1f8      	bne.n	800957c <tcp_close_shutdown+0xe8>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800958a:	4621      	mov	r1, r4
 800958c:	4818      	ldr	r0, [pc, #96]	; (80095f0 <tcp_close_shutdown+0x15c>)
 800958e:	f7ff ff27 	bl	80093e0 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009592:	7d23      	ldrb	r3, [r4, #20]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d105      	bne.n	80095a4 <tcp_close_shutdown+0x110>
 8009598:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <tcp_close_shutdown+0x138>)
 800959a:	22df      	movs	r2, #223	; 0xdf
 800959c:	4915      	ldr	r1, [pc, #84]	; (80095f4 <tcp_close_shutdown+0x160>)
 800959e:	480d      	ldr	r0, [pc, #52]	; (80095d4 <tcp_close_shutdown+0x140>)
 80095a0:	f003 f894 	bl	800c6cc <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80095a4:	4621      	mov	r1, r4
 80095a6:	2002      	movs	r0, #2
 80095a8:	f7fe fda2 	bl	80080f0 <memp_free>
 80095ac:	e7b6      	b.n	800951c <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 80095ae:	6f95      	ldr	r5, [r2, #120]	; 0x78
 80095b0:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 80095b2:	bf08      	it	eq
 80095b4:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80095b6:	68d2      	ldr	r2, [r2, #12]
 80095b8:	e7e3      	b.n	8009582 <tcp_close_shutdown+0xee>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80095ba:	4621      	mov	r1, r4
 80095bc:	4807      	ldr	r0, [pc, #28]	; (80095dc <tcp_close_shutdown+0x148>)
 80095be:	f7ff ff0f 	bl	80093e0 <tcp_pcb_remove>
 80095c2:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <tcp_close_shutdown+0x14c>)
 80095c4:	2201      	movs	r2, #1
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	e7c9      	b.n	800955e <tcp_close_shutdown+0xca>
 80095ca:	bf00      	nop
 80095cc:	0801275a 	.word	0x0801275a
 80095d0:	08012be9 	.word	0x08012be9
 80095d4:	0801153a 	.word	0x0801153a
 80095d8:	08012c09 	.word	0x08012c09
 80095dc:	200087a8 	.word	0x200087a8
 80095e0:	200087a4 	.word	0x200087a4
 80095e4:	200087bc 	.word	0x200087bc
 80095e8:	200087b4 	.word	0x200087b4
 80095ec:	080113bc 	.word	0x080113bc
 80095f0:	200087b0 	.word	0x200087b0
 80095f4:	08012c22 	.word	0x08012c22

080095f8 <tcp_close>:
{
 80095f8:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80095fa:	b158      	cbz	r0, 8009614 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 80095fc:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 80095fe:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8009600:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009602:	bf1e      	ittt	ne
 8009604:	8b43      	ldrhne	r3, [r0, #26]
 8009606:	f043 0310 	orrne.w	r3, r3, #16
 800960a:	8343      	strhne	r3, [r0, #26]
}
 800960c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8009610:	f7ff bf40 	b.w	8009494 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009614:	4b04      	ldr	r3, [pc, #16]	; (8009628 <tcp_close+0x30>)
 8009616:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800961a:	4904      	ldr	r1, [pc, #16]	; (800962c <tcp_close+0x34>)
 800961c:	4804      	ldr	r0, [pc, #16]	; (8009630 <tcp_close+0x38>)
 800961e:	f003 f855 	bl	800c6cc <iprintf>
}
 8009622:	f06f 000f 	mvn.w	r0, #15
 8009626:	bd08      	pop	{r3, pc}
 8009628:	0801275a 	.word	0x0801275a
 800962c:	08012c3b 	.word	0x08012c3b
 8009630:	0801153a 	.word	0x0801153a

08009634 <tcp_recv_null>:
{
 8009634:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009636:	4608      	mov	r0, r1
{
 8009638:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800963a:	b949      	cbnz	r1, 8009650 <tcp_recv_null+0x1c>
 800963c:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <tcp_recv_null+0x3c>)
 800963e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009642:	490c      	ldr	r1, [pc, #48]	; (8009674 <tcp_recv_null+0x40>)
 8009644:	480c      	ldr	r0, [pc, #48]	; (8009678 <tcp_recv_null+0x44>)
 8009646:	f003 f841 	bl	800c6cc <iprintf>
 800964a:	f06f 000f 	mvn.w	r0, #15
}
 800964e:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8009650:	b13a      	cbz	r2, 8009662 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8009652:	8911      	ldrh	r1, [r2, #8]
 8009654:	f7ff fba8 	bl	8008da8 <tcp_recved>
    pbuf_free(p);
 8009658:	4620      	mov	r0, r4
 800965a:	f7fe ffb9 	bl	80085d0 <pbuf_free>
  return ERR_OK;
 800965e:	2000      	movs	r0, #0
 8009660:	e7f5      	b.n	800964e <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 8009662:	b91b      	cbnz	r3, 800966c <tcp_recv_null+0x38>
}
 8009664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8009668:	f7ff bfc6 	b.w	80095f8 <tcp_close>
  return ERR_OK;
 800966c:	4610      	mov	r0, r2
 800966e:	e7ee      	b.n	800964e <tcp_recv_null+0x1a>
 8009670:	0801275a 	.word	0x0801275a
 8009674:	08012c52 	.word	0x08012c52
 8009678:	0801153a 	.word	0x0801153a

0800967c <tcp_process_refused_data>:
{
 800967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800967e:	4604      	mov	r4, r0
 8009680:	b950      	cbnz	r0, 8009698 <tcp_process_refused_data+0x1c>
 8009682:	f06f 050f 	mvn.w	r5, #15
 8009686:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <tcp_process_refused_data+0x80>)
 8009688:	f240 6209 	movw	r2, #1545	; 0x609
 800968c:	491c      	ldr	r1, [pc, #112]	; (8009700 <tcp_process_refused_data+0x84>)
 800968e:	481d      	ldr	r0, [pc, #116]	; (8009704 <tcp_process_refused_data+0x88>)
 8009690:	f003 f81c 	bl	800c6cc <iprintf>
}
 8009694:	4628      	mov	r0, r5
 8009696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 8009698:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800969a:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800969c:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 80096a0:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80096a2:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80096a4:	b1e5      	cbz	r5, 80096e0 <tcp_process_refused_data+0x64>
 80096a6:	4601      	mov	r1, r0
 80096a8:	4632      	mov	r2, r6
 80096aa:	6900      	ldr	r0, [r0, #16]
 80096ac:	47a8      	blx	r5
 80096ae:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80096b0:	b9e8      	cbnz	r0, 80096ee <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80096b2:	06bb      	lsls	r3, r7, #26
 80096b4:	d5ee      	bpl.n	8009694 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80096b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80096b8:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 80096bc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80096c0:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 80096c2:	bf1c      	itt	ne
 80096c4:	3301      	addne	r3, #1
 80096c6:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80096c8:	2e00      	cmp	r6, #0
 80096ca:	d0e3      	beq.n	8009694 <tcp_process_refused_data+0x18>
 80096cc:	2300      	movs	r3, #0
 80096ce:	4621      	mov	r1, r4
 80096d0:	6920      	ldr	r0, [r4, #16]
 80096d2:	461a      	mov	r2, r3
 80096d4:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80096d6:	300d      	adds	r0, #13
 80096d8:	d1dc      	bne.n	8009694 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 80096da:	f06f 050c 	mvn.w	r5, #12
 80096de:	e7d9      	b.n	8009694 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80096e0:	4601      	mov	r1, r0
 80096e2:	462b      	mov	r3, r5
 80096e4:	4632      	mov	r2, r6
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7ff ffa4 	bl	8009634 <tcp_recv_null>
 80096ec:	e7df      	b.n	80096ae <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 80096ee:	f110 050d 	adds.w	r5, r0, #13
 80096f2:	d0f2      	beq.n	80096da <tcp_process_refused_data+0x5e>
      pcb->refused_data = refused_data;
 80096f4:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80096f6:	f06f 0504 	mvn.w	r5, #4
 80096fa:	e7cb      	b.n	8009694 <tcp_process_refused_data+0x18>
 80096fc:	0801275a 	.word	0x0801275a
 8009700:	08012c6d 	.word	0x08012c6d
 8009704:	0801153a 	.word	0x0801153a

08009708 <tcp_fasttmr>:
{
 8009708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800970c:	4d1b      	ldr	r5, [pc, #108]	; (800977c <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800970e:	4f1c      	ldr	r7, [pc, #112]	; (8009780 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8009710:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8009712:	4e1c      	ldr	r6, [pc, #112]	; (8009784 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8009714:	3301      	adds	r3, #1
 8009716:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8009718:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800971a:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800971e:	b90c      	cbnz	r4, 8009724 <tcp_fasttmr+0x1c>
}
 8009720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8009724:	782b      	ldrb	r3, [r5, #0]
 8009726:	7fa2      	ldrb	r2, [r4, #30]
 8009728:	429a      	cmp	r2, r3
 800972a:	d024      	beq.n	8009776 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800972c:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800972e:	8b63      	ldrh	r3, [r4, #26]
 8009730:	07d9      	lsls	r1, r3, #31
 8009732:	d509      	bpl.n	8009748 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8009734:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8009738:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800973a:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800973c:	f002 f8ee 	bl	800b91c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009740:	8b63      	ldrh	r3, [r4, #26]
 8009742:	f023 0303 	bic.w	r3, r3, #3
 8009746:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8009748:	8b63      	ldrh	r3, [r4, #26]
 800974a:	071a      	lsls	r2, r3, #28
 800974c:	d505      	bpl.n	800975a <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800974e:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8009752:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009754:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009756:	f7ff f9dd 	bl	8008b14 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800975a:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800975c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8009760:	b13b      	cbz	r3, 8009772 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8009762:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8009764:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8009768:	f7ff ff88 	bl	800967c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800976c:	7833      	ldrb	r3, [r6, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1d2      	bne.n	8009718 <tcp_fasttmr+0x10>
{
 8009772:	464c      	mov	r4, r9
 8009774:	e7d3      	b.n	800971e <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8009776:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800977a:	e7fa      	b.n	8009772 <tcp_fasttmr+0x6a>
 800977c:	20000589 	.word	0x20000589
 8009780:	200087a8 	.word	0x200087a8
 8009784:	200087a4 	.word	0x200087a4

08009788 <tcp_tmr>:
{
 8009788:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800978a:	f7ff ffbd 	bl	8009708 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800978e:	4a06      	ldr	r2, [pc, #24]	; (80097a8 <tcp_tmr+0x20>)
 8009790:	7853      	ldrb	r3, [r2, #1]
 8009792:	3301      	adds	r3, #1
 8009794:	b2db      	uxtb	r3, r3
 8009796:	7053      	strb	r3, [r2, #1]
 8009798:	07db      	lsls	r3, r3, #31
 800979a:	d503      	bpl.n	80097a4 <tcp_tmr+0x1c>
}
 800979c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80097a0:	f7ff bc04 	b.w	8008fac <tcp_slowtmr>
}
 80097a4:	bd08      	pop	{r3, pc}
 80097a6:	bf00      	nop
 80097a8:	20000589 	.word	0x20000589

080097ac <tcp_abandon>:
{
 80097ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097b0:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80097b2:	4604      	mov	r4, r0
 80097b4:	b948      	cbnz	r0, 80097ca <tcp_abandon+0x1e>
 80097b6:	4b34      	ldr	r3, [pc, #208]	; (8009888 <tcp_abandon+0xdc>)
 80097b8:	f240 223d 	movw	r2, #573	; 0x23d
 80097bc:	4933      	ldr	r1, [pc, #204]	; (800988c <tcp_abandon+0xe0>)
 80097be:	4834      	ldr	r0, [pc, #208]	; (8009890 <tcp_abandon+0xe4>)
}
 80097c0:	b004      	add	sp, #16
 80097c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80097c6:	f002 bf81 	b.w	800c6cc <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80097ca:	7d03      	ldrb	r3, [r0, #20]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d106      	bne.n	80097de <tcp_abandon+0x32>
 80097d0:	4b2d      	ldr	r3, [pc, #180]	; (8009888 <tcp_abandon+0xdc>)
 80097d2:	f240 2241 	movw	r2, #577	; 0x241
 80097d6:	492f      	ldr	r1, [pc, #188]	; (8009894 <tcp_abandon+0xe8>)
 80097d8:	482d      	ldr	r0, [pc, #180]	; (8009890 <tcp_abandon+0xe4>)
 80097da:	f002 ff77 	bl	800c6cc <iprintf>
  if (pcb->state == TIME_WAIT) {
 80097de:	7d23      	ldrb	r3, [r4, #20]
 80097e0:	2b0a      	cmp	r3, #10
 80097e2:	d109      	bne.n	80097f8 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80097e4:	4621      	mov	r1, r4
 80097e6:	482c      	ldr	r0, [pc, #176]	; (8009898 <tcp_abandon+0xec>)
 80097e8:	f7ff fdfa 	bl	80093e0 <tcp_pcb_remove>
    tcp_free(pcb);
 80097ec:	4620      	mov	r0, r4
}
 80097ee:	b004      	add	sp, #16
 80097f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 80097f4:	f7ff b9ca 	b.w	8008b8c <tcp_free>
    seqno = pcb->snd_nxt;
 80097f8:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 80097fc:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8009800:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8009804:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8009808:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800980a:	b99b      	cbnz	r3, 8009834 <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 800980c:	b13d      	cbz	r5, 800981e <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800980e:	4a23      	ldr	r2, [pc, #140]	; (800989c <tcp_abandon+0xf0>)
 8009810:	6813      	ldr	r3, [r2, #0]
 8009812:	42a3      	cmp	r3, r4
 8009814:	d106      	bne.n	8009824 <tcp_abandon+0x78>
 8009816:	68e3      	ldr	r3, [r4, #12]
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	2500      	movs	r5, #0
 800981c:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800981e:	462e      	mov	r6, r5
 8009820:	e00f      	b.n	8009842 <tcp_abandon+0x96>
 8009822:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0f8      	beq.n	800981a <tcp_abandon+0x6e>
 8009828:	68da      	ldr	r2, [r3, #12]
 800982a:	42a2      	cmp	r2, r4
 800982c:	d1f9      	bne.n	8009822 <tcp_abandon+0x76>
 800982e:	68e2      	ldr	r2, [r4, #12]
 8009830:	60da      	str	r2, [r3, #12]
 8009832:	e7f2      	b.n	800981a <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009834:	4621      	mov	r1, r4
 8009836:	481a      	ldr	r0, [pc, #104]	; (80098a0 <tcp_abandon+0xf4>)
 8009838:	f7ff fdd2 	bl	80093e0 <tcp_pcb_remove>
 800983c:	4b19      	ldr	r3, [pc, #100]	; (80098a4 <tcp_abandon+0xf8>)
 800983e:	2201      	movs	r2, #1
 8009840:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009842:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009844:	b108      	cbz	r0, 800984a <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 8009846:	f7ff faf9 	bl	8008e3c <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800984a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800984c:	b108      	cbz	r0, 8009852 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 800984e:	f7ff faf5 	bl	8008e3c <tcp_segs_free>
    if (send_rst) {
 8009852:	b156      	cbz	r6, 800986a <tcp_abandon+0xbe>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009854:	8b23      	ldrh	r3, [r4, #24]
 8009856:	4652      	mov	r2, sl
 8009858:	4649      	mov	r1, r9
 800985a:	4620      	mov	r0, r4
 800985c:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8009860:	1d23      	adds	r3, r4, #4
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	4623      	mov	r3, r4
 8009866:	f001 ffe3 	bl	800b830 <tcp_rst>
    tcp_free(pcb);
 800986a:	4620      	mov	r0, r4
 800986c:	f7ff f98e 	bl	8008b8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009870:	b13f      	cbz	r7, 8009882 <tcp_abandon+0xd6>
 8009872:	f06f 010c 	mvn.w	r1, #12
 8009876:	4640      	mov	r0, r8
 8009878:	463b      	mov	r3, r7
}
 800987a:	b004      	add	sp, #16
 800987c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009880:	4718      	bx	r3
}
 8009882:	b004      	add	sp, #16
 8009884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009888:	0801275a 	.word	0x0801275a
 800988c:	08012cad 	.word	0x08012cad
 8009890:	0801153a 	.word	0x0801153a
 8009894:	08012cc6 	.word	0x08012cc6
 8009898:	200087b8 	.word	0x200087b8
 800989c:	200087b4 	.word	0x200087b4
 80098a0:	200087a8 	.word	0x200087a8
 80098a4:	200087a4 	.word	0x200087a4

080098a8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 80098a8:	2101      	movs	r1, #1
 80098aa:	f7ff bf7f 	b.w	80097ac <tcp_abandon>
	...

080098b0 <tcp_accept_null>:
{
 80098b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80098b2:	460c      	mov	r4, r1
 80098b4:	b931      	cbnz	r1, 80098c4 <tcp_accept_null+0x14>
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <tcp_accept_null+0x20>)
 80098b8:	f240 320f 	movw	r2, #783	; 0x30f
 80098bc:	4905      	ldr	r1, [pc, #20]	; (80098d4 <tcp_accept_null+0x24>)
 80098be:	4806      	ldr	r0, [pc, #24]	; (80098d8 <tcp_accept_null+0x28>)
 80098c0:	f002 ff04 	bl	800c6cc <iprintf>
  tcp_abort(pcb);
 80098c4:	4620      	mov	r0, r4
 80098c6:	f7ff ffef 	bl	80098a8 <tcp_abort>
}
 80098ca:	f06f 000c 	mvn.w	r0, #12
 80098ce:	bd10      	pop	{r4, pc}
 80098d0:	0801275a 	.word	0x0801275a
 80098d4:	08012cf7 	.word	0x08012cf7
 80098d8:	0801153a 	.word	0x0801153a

080098dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80098e0:	4605      	mov	r5, r0
 80098e2:	b930      	cbnz	r0, 80098f2 <tcp_netif_ip_addr_changed_pcblist+0x16>
 80098e4:	4b09      	ldr	r3, [pc, #36]	; (800990c <tcp_netif_ip_addr_changed_pcblist+0x30>)
 80098e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80098ea:	4909      	ldr	r1, [pc, #36]	; (8009910 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 80098ec:	4809      	ldr	r0, [pc, #36]	; (8009914 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 80098ee:	f002 feed 	bl	800c6cc <iprintf>

  while (pcb != NULL) {
 80098f2:	b904      	cbnz	r4, 80098f6 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 80098f4:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80098f6:	6822      	ldr	r2, [r4, #0]
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	68e6      	ldr	r6, [r4, #12]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d102      	bne.n	8009906 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 8009900:	4620      	mov	r0, r4
 8009902:	f7ff ffd1 	bl	80098a8 <tcp_abort>
{
 8009906:	4634      	mov	r4, r6
 8009908:	e7f3      	b.n	80098f2 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800990a:	bf00      	nop
 800990c:	0801275a 	.word	0x0801275a
 8009910:	08012d14 	.word	0x08012d14
 8009914:	0801153a 	.word	0x0801153a

08009918 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009918:	4b0c      	ldr	r3, [pc, #48]	; (800994c <tcp_kill_state+0x34>)
{
 800991a:	b430      	push	{r4, r5}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800991c:	6819      	ldr	r1, [r3, #0]
  inactivity = 0;
 800991e:	2400      	movs	r4, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009920:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <tcp_kill_state+0x38>)
  inactive = NULL;
 8009922:	4622      	mov	r2, r4
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009924:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009926:	b921      	cbnz	r1, 8009932 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8009928:	b172      	cbz	r2, 8009948 <tcp_kill_state+0x30>
    tcp_abandon(inactive, 0);
 800992a:	4610      	mov	r0, r2
}
 800992c:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800992e:	f7ff bf3d 	b.w	80097ac <tcp_abandon>
    if (pcb->state == state) {
 8009932:	7d0b      	ldrb	r3, [r1, #20]
 8009934:	4283      	cmp	r3, r0
 8009936:	d105      	bne.n	8009944 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009938:	6a0b      	ldr	r3, [r1, #32]
 800993a:	1aeb      	subs	r3, r5, r3
 800993c:	42a3      	cmp	r3, r4
 800993e:	bf24      	itt	cs
 8009940:	461c      	movcs	r4, r3
 8009942:	460a      	movcs	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009944:	68c9      	ldr	r1, [r1, #12]
 8009946:	e7ee      	b.n	8009926 <tcp_kill_state+0xe>
}
 8009948:	bc30      	pop	{r4, r5}
 800994a:	4770      	bx	lr
 800994c:	200087a8 	.word	0x200087a8
 8009950:	200087ac 	.word	0x200087ac

08009954 <tcp_alloc>:
{
 8009954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009956:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009958:	2001      	movs	r0, #1
 800995a:	f7fe fbad 	bl	80080b8 <memp_malloc>
  if (pcb == NULL) {
 800995e:	4603      	mov	r3, r0
 8009960:	2800      	cmp	r0, #0
 8009962:	d136      	bne.n	80099d2 <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009964:	4e41      	ldr	r6, [pc, #260]	; (8009a6c <tcp_alloc+0x118>)
 8009966:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 8009968:	2800      	cmp	r0, #0
 800996a:	d15a      	bne.n	8009a22 <tcp_alloc+0xce>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800996c:	4b40      	ldr	r3, [pc, #256]	; (8009a70 <tcp_alloc+0x11c>)
  inactivity = 0;
 800996e:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009970:	4d40      	ldr	r5, [pc, #256]	; (8009a74 <tcp_alloc+0x120>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009972:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009974:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009976:	2b00      	cmp	r3, #0
 8009978:	d15e      	bne.n	8009a38 <tcp_alloc+0xe4>
  if (inactive != NULL) {
 800997a:	b108      	cbz	r0, 8009980 <tcp_alloc+0x2c>
    tcp_abort(inactive);
 800997c:	f7ff ff94 	bl	80098a8 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009980:	2001      	movs	r0, #1
 8009982:	f7fe fb99 	bl	80080b8 <memp_malloc>
    if (pcb == NULL) {
 8009986:	4603      	mov	r3, r0
 8009988:	bb18      	cbnz	r0, 80099d2 <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 800998a:	2009      	movs	r0, #9
 800998c:	f7ff ffc4 	bl	8009918 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009990:	2001      	movs	r0, #1
 8009992:	f7fe fb91 	bl	80080b8 <memp_malloc>
      if (pcb == NULL) {
 8009996:	4603      	mov	r3, r0
 8009998:	b9d8      	cbnz	r0, 80099d2 <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 800999a:	2008      	movs	r0, #8
 800999c:	f7ff ffbc 	bl	8009918 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80099a0:	2001      	movs	r0, #1
 80099a2:	f7fe fb89 	bl	80080b8 <memp_malloc>
        if (pcb == NULL) {
 80099a6:	4603      	mov	r3, r0
 80099a8:	b998      	cbnz	r0, 80099d2 <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80099aa:	0622      	lsls	r2, r4, #24
 80099ac:	d44d      	bmi.n	8009a4a <tcp_alloc+0xf6>
  if (mprio == 0) {
 80099ae:	b15c      	cbz	r4, 80099c8 <tcp_alloc+0x74>
 80099b0:	4621      	mov	r1, r4
  mprio--;
 80099b2:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80099b4:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 80099b6:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80099b8:	682e      	ldr	r6, [r5, #0]
  mprio--;
 80099ba:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80099bc:	2a00      	cmp	r2, #0
 80099be:	d146      	bne.n	8009a4e <tcp_alloc+0xfa>
  if (inactive != NULL) {
 80099c0:	b113      	cbz	r3, 80099c8 <tcp_alloc+0x74>
    tcp_abort(inactive);
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff ff70 	bl	80098a8 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80099c8:	2001      	movs	r0, #1
 80099ca:	f7fe fb75 	bl	80080b8 <memp_malloc>
  if (pcb != NULL) {
 80099ce:	4603      	mov	r3, r0
 80099d0:	b328      	cbz	r0, 8009a1e <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80099d2:	2298      	movs	r2, #152	; 0x98
 80099d4:	2100      	movs	r1, #0
 80099d6:	4618      	mov	r0, r3
 80099d8:	f002 fe70 	bl	800c6bc <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80099dc:	4926      	ldr	r1, [pc, #152]	; (8009a78 <tcp_alloc+0x124>)
    pcb->snd_buf = TCP_SND_BUF;
 80099de:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80099e2:	4603      	mov	r3, r0
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80099e4:	6281      	str	r1, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80099e6:	21ff      	movs	r1, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 80099e8:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->ttl = TCP_TTL;
 80099ec:	72c1      	strb	r1, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80099ee:	2106      	movs	r1, #6
    pcb->ssthresh = TCP_SND_BUF;
 80099f0:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80099f4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80099f8:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 80099fa:	4920      	ldr	r1, [pc, #128]	; (8009a7c <tcp_alloc+0x128>)
    pcb->recv = tcp_recv_null;
 80099fc:	4a20      	ldr	r2, [pc, #128]	; (8009a80 <tcp_alloc+0x12c>)
    pcb->rtime = -1;
 80099fe:	6301      	str	r1, [r0, #48]	; 0x30
    pcb->cwnd = 1;
 8009a00:	2101      	movs	r1, #1
    pcb->recv = tcp_recv_null;
 8009a02:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->cwnd = 1;
 8009a06:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009a0a:	491a      	ldr	r1, [pc, #104]	; (8009a74 <tcp_alloc+0x120>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009a0c:	4a1d      	ldr	r2, [pc, #116]	; (8009a84 <tcp_alloc+0x130>)
    pcb->tmr = tcp_ticks;
 8009a0e:	6809      	ldr	r1, [r1, #0]
    pcb->prio = prio;
 8009a10:	7544      	strb	r4, [r0, #21]
    pcb->tmr = tcp_ticks;
 8009a12:	6201      	str	r1, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009a14:	491c      	ldr	r1, [pc, #112]	; (8009a88 <tcp_alloc+0x134>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009a16:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pcb->last_timer = tcp_timer_ctr;
 8009a1a:	7809      	ldrb	r1, [r1, #0]
 8009a1c:	7781      	strb	r1, [r0, #30]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8009a22:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 8009a24:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8009a26:	0719      	lsls	r1, r3, #28
 8009a28:	d504      	bpl.n	8009a34 <tcp_alloc+0xe0>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009a2a:	f023 0308 	bic.w	r3, r3, #8
 8009a2e:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8009a30:	f7ff f870 	bl	8008b14 <tcp_close_shutdown_fin>
{
 8009a34:	4628      	mov	r0, r5
 8009a36:	e797      	b.n	8009968 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009a38:	6a1a      	ldr	r2, [r3, #32]
 8009a3a:	1aba      	subs	r2, r7, r2
 8009a3c:	428a      	cmp	r2, r1
 8009a3e:	bf34      	ite	cc
 8009a40:	460a      	movcc	r2, r1
 8009a42:	4618      	movcs	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	4611      	mov	r1, r2
 8009a48:	e795      	b.n	8009976 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009a4a:	217f      	movs	r1, #127	; 0x7f
 8009a4c:	e7b1      	b.n	80099b2 <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 8009a4e:	7d57      	ldrb	r7, [r2, #21]
 8009a50:	428f      	cmp	r7, r1
 8009a52:	d304      	bcc.n	8009a5e <tcp_alloc+0x10a>
 8009a54:	d107      	bne.n	8009a66 <tcp_alloc+0x112>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009a56:	6a15      	ldr	r5, [r2, #32]
 8009a58:	1b75      	subs	r5, r6, r5
 8009a5a:	4285      	cmp	r5, r0
 8009a5c:	d303      	bcc.n	8009a66 <tcp_alloc+0x112>
      inactivity = tcp_ticks - pcb->tmr;
 8009a5e:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 8009a60:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 8009a62:	4613      	mov	r3, r2
 8009a64:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a66:	68d2      	ldr	r2, [r2, #12]
 8009a68:	e7a8      	b.n	80099bc <tcp_alloc+0x68>
 8009a6a:	bf00      	nop
 8009a6c:	200087a8 	.word	0x200087a8
 8009a70:	200087b8 	.word	0x200087b8
 8009a74:	200087ac 	.word	0x200087ac
 8009a78:	0b680b68 	.word	0x0b680b68
 8009a7c:	0218ffff 	.word	0x0218ffff
 8009a80:	08009635 	.word	0x08009635
 8009a84:	006ddd00 	.word	0x006ddd00
 8009a88:	20000589 	.word	0x20000589

08009a8c <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8009a8c:	2040      	movs	r0, #64	; 0x40
 8009a8e:	f7ff bf61 	b.w	8009954 <tcp_alloc>
	...

08009a94 <tcp_next_iss>:
{
 8009a94:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009a96:	b930      	cbnz	r0, 8009aa6 <tcp_next_iss+0x12>
 8009a98:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <tcp_next_iss+0x20>)
 8009a9a:	f640 02af 	movw	r2, #2223	; 0x8af
 8009a9e:	4906      	ldr	r1, [pc, #24]	; (8009ab8 <tcp_next_iss+0x24>)
 8009aa0:	4806      	ldr	r0, [pc, #24]	; (8009abc <tcp_next_iss+0x28>)
 8009aa2:	f002 fe13 	bl	800c6cc <iprintf>
  iss += tcp_ticks;       /* XXX */
 8009aa6:	4b06      	ldr	r3, [pc, #24]	; (8009ac0 <tcp_next_iss+0x2c>)
 8009aa8:	4a06      	ldr	r2, [pc, #24]	; (8009ac4 <tcp_next_iss+0x30>)
 8009aaa:	6858      	ldr	r0, [r3, #4]
 8009aac:	6812      	ldr	r2, [r2, #0]
 8009aae:	4410      	add	r0, r2
 8009ab0:	6058      	str	r0, [r3, #4]
}
 8009ab2:	bd08      	pop	{r3, pc}
 8009ab4:	0801275a 	.word	0x0801275a
 8009ab8:	08012d48 	.word	0x08012d48
 8009abc:	0801153a 	.word	0x0801153a
 8009ac0:	2000012c 	.word	0x2000012c
 8009ac4:	200087ac 	.word	0x200087ac

08009ac8 <tcp_eff_send_mss_netif>:
{
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4604      	mov	r4, r0
 8009acc:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009ace:	b932      	cbnz	r2, 8009ade <tcp_eff_send_mss_netif+0x16>
 8009ad0:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <tcp_eff_send_mss_netif+0x30>)
 8009ad2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009ad6:	4909      	ldr	r1, [pc, #36]	; (8009afc <tcp_eff_send_mss_netif+0x34>)
 8009ad8:	4809      	ldr	r0, [pc, #36]	; (8009b00 <tcp_eff_send_mss_netif+0x38>)
 8009ada:	f002 fdf7 	bl	800c6cc <iprintf>
    if (outif == NULL) {
 8009ade:	b14d      	cbz	r5, 8009af4 <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 8009ae0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 8009ae2:	b13b      	cbz	r3, 8009af4 <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009ae4:	2b28      	cmp	r3, #40	; 0x28
 8009ae6:	bf8a      	itet	hi
 8009ae8:	3b28      	subhi	r3, #40	; 0x28
 8009aea:	2300      	movls	r3, #0
 8009aec:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009aee:	429c      	cmp	r4, r3
 8009af0:	bf28      	it	cs
 8009af2:	461c      	movcs	r4, r3
}
 8009af4:	4620      	mov	r0, r4
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	0801275a 	.word	0x0801275a
 8009afc:	08012d62 	.word	0x08012d62
 8009b00:	0801153a 	.word	0x0801153a

08009b04 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009b08:	4604      	mov	r4, r0
 8009b0a:	b180      	cbz	r0, 8009b2e <tcp_netif_ip_addr_changed+0x2a>
 8009b0c:	6803      	ldr	r3, [r0, #0]
 8009b0e:	b173      	cbz	r3, 8009b2e <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009b10:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <tcp_netif_ip_addr_changed+0x3c>)
 8009b12:	6819      	ldr	r1, [r3, #0]
 8009b14:	f7ff fee2 	bl	80098dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009b18:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <tcp_netif_ip_addr_changed+0x40>)
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	6819      	ldr	r1, [r3, #0]
 8009b1e:	f7ff fedd 	bl	80098dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009b22:	b125      	cbz	r5, 8009b2e <tcp_netif_ip_addr_changed+0x2a>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b113      	cbz	r3, 8009b2e <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009b28:	4b07      	ldr	r3, [pc, #28]	; (8009b48 <tcp_netif_ip_addr_changed+0x44>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	b903      	cbnz	r3, 8009b30 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009b30:	6819      	ldr	r1, [r3, #0]
 8009b32:	6822      	ldr	r2, [r4, #0]
 8009b34:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009b36:	bf04      	itt	eq
 8009b38:	682a      	ldreq	r2, [r5, #0]
 8009b3a:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	e7f5      	b.n	8009b2c <tcp_netif_ip_addr_changed+0x28>
 8009b40:	200087a8 	.word	0x200087a8
 8009b44:	200087b4 	.word	0x200087b4
 8009b48:	200087b0 	.word	0x200087b0

08009b4c <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8009b4c:	4a08      	ldr	r2, [pc, #32]	; (8009b70 <tcp_get_next_optbyte+0x24>)
 8009b4e:	8813      	ldrh	r3, [r2, #0]
 8009b50:	4610      	mov	r0, r2
 8009b52:	1c59      	adds	r1, r3, #1
 8009b54:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009b56:	6851      	ldr	r1, [r2, #4]
 8009b58:	b111      	cbz	r1, 8009b60 <tcp_get_next_optbyte+0x14>
 8009b5a:	8912      	ldrh	r2, [r2, #8]
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d203      	bcs.n	8009b68 <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 8009b60:	68c2      	ldr	r2, [r0, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	7d18      	ldrb	r0, [r3, #20]
 8009b66:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009b68:	1a9b      	subs	r3, r3, r2
    return tcphdr_opt2[idx];
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8009b6e:	4770      	bx	lr
 8009b70:	2000058c 	.word	0x2000058c

08009b74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009b78:	4606      	mov	r6, r0
 8009b7a:	b930      	cbnz	r0, 8009b8a <tcp_parseopt+0x16>
 8009b7c:	4b1e      	ldr	r3, [pc, #120]	; (8009bf8 <tcp_parseopt+0x84>)
 8009b7e:	f240 727d 	movw	r2, #1917	; 0x77d
 8009b82:	491e      	ldr	r1, [pc, #120]	; (8009bfc <tcp_parseopt+0x88>)
 8009b84:	481e      	ldr	r0, [pc, #120]	; (8009c00 <tcp_parseopt+0x8c>)
 8009b86:	f002 fda1 	bl	800c6cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009b8a:	4d1e      	ldr	r5, [pc, #120]	; (8009c04 <tcp_parseopt+0x90>)
 8009b8c:	8a2b      	ldrh	r3, [r5, #16]
 8009b8e:	b14b      	cbz	r3, 8009ba4 <tcp_parseopt+0x30>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009b90:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009b92:	f240 57b3 	movw	r7, #1459	; 0x5b3
 8009b96:	f240 58b4 	movw	r8, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009b9a:	802b      	strh	r3, [r5, #0]
 8009b9c:	8a2c      	ldrh	r4, [r5, #16]
 8009b9e:	882b      	ldrh	r3, [r5, #0]
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d301      	bcc.n	8009ba8 <tcp_parseopt+0x34>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 8009ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8_t opt = tcp_get_next_optbyte();
 8009ba8:	f7ff ffd0 	bl	8009b4c <tcp_get_next_optbyte>
      switch (opt) {
 8009bac:	2801      	cmp	r0, #1
 8009bae:	d0f5      	beq.n	8009b9c <tcp_parseopt+0x28>
 8009bb0:	d3f8      	bcc.n	8009ba4 <tcp_parseopt+0x30>
 8009bb2:	2802      	cmp	r0, #2
 8009bb4:	d116      	bne.n	8009be4 <tcp_parseopt+0x70>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009bb6:	f7ff ffc9 	bl	8009b4c <tcp_get_next_optbyte>
 8009bba:	2804      	cmp	r0, #4
 8009bbc:	d1f2      	bne.n	8009ba4 <tcp_parseopt+0x30>
 8009bbe:	882b      	ldrh	r3, [r5, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	42a3      	cmp	r3, r4
 8009bc4:	daee      	bge.n	8009ba4 <tcp_parseopt+0x30>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009bc6:	f7ff ffc1 	bl	8009b4c <tcp_get_next_optbyte>
 8009bca:	0200      	lsls	r0, r0, #8
 8009bcc:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 8009bce:	f7ff ffbd 	bl	8009b4c <tcp_get_next_optbyte>
 8009bd2:	4320      	orrs	r0, r4
 8009bd4:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009bd6:	1e43      	subs	r3, r0, #1
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	42bb      	cmp	r3, r7
 8009bdc:	bf88      	it	hi
 8009bde:	4640      	movhi	r0, r8
 8009be0:	8670      	strh	r0, [r6, #50]	; 0x32
 8009be2:	e7db      	b.n	8009b9c <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 8009be4:	f7ff ffb2 	bl	8009b4c <tcp_get_next_optbyte>
          if (data < 2) {
 8009be8:	2801      	cmp	r0, #1
 8009bea:	d9db      	bls.n	8009ba4 <tcp_parseopt+0x30>
          tcp_optidx += data - 2;
 8009bec:	882b      	ldrh	r3, [r5, #0]
 8009bee:	3b02      	subs	r3, #2
 8009bf0:	4418      	add	r0, r3
 8009bf2:	8028      	strh	r0, [r5, #0]
 8009bf4:	e7d2      	b.n	8009b9c <tcp_parseopt+0x28>
 8009bf6:	bf00      	nop
 8009bf8:	08012e48 	.word	0x08012e48
 8009bfc:	08012e9d 	.word	0x08012e9d
 8009c00:	0801153a 	.word	0x0801153a
 8009c04:	2000058c 	.word	0x2000058c

08009c08 <tcp_input_delayed_close>:
{
 8009c08:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	b930      	cbnz	r0, 8009c1c <tcp_input_delayed_close+0x14>
 8009c0e:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <tcp_input_delayed_close+0x44>)
 8009c10:	f240 225a 	movw	r2, #602	; 0x25a
 8009c14:	490e      	ldr	r1, [pc, #56]	; (8009c50 <tcp_input_delayed_close+0x48>)
 8009c16:	480f      	ldr	r0, [pc, #60]	; (8009c54 <tcp_input_delayed_close+0x4c>)
 8009c18:	f002 fd58 	bl	800c6cc <iprintf>
  if (recv_flags & TF_CLOSED) {
 8009c1c:	4b0e      	ldr	r3, [pc, #56]	; (8009c58 <tcp_input_delayed_close+0x50>)
 8009c1e:	7c98      	ldrb	r0, [r3, #18]
 8009c20:	f010 0010 	ands.w	r0, r0, #16
 8009c24:	d011      	beq.n	8009c4a <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009c26:	8b63      	ldrh	r3, [r4, #26]
 8009c28:	06db      	lsls	r3, r3, #27
 8009c2a:	d406      	bmi.n	8009c3a <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009c2c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c30:	b11b      	cbz	r3, 8009c3a <tcp_input_delayed_close+0x32>
 8009c32:	f06f 010e 	mvn.w	r1, #14
 8009c36:	6920      	ldr	r0, [r4, #16]
 8009c38:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4807      	ldr	r0, [pc, #28]	; (8009c5c <tcp_input_delayed_close+0x54>)
 8009c3e:	f7ff fbcf 	bl	80093e0 <tcp_pcb_remove>
    tcp_free(pcb);
 8009c42:	4620      	mov	r0, r4
 8009c44:	f7fe ffa2 	bl	8008b8c <tcp_free>
 8009c48:	2001      	movs	r0, #1
}
 8009c4a:	bd10      	pop	{r4, pc}
 8009c4c:	08012e48 	.word	0x08012e48
 8009c50:	08012eb7 	.word	0x08012eb7
 8009c54:	0801153a 	.word	0x0801153a
 8009c58:	2000058c 	.word	0x2000058c
 8009c5c:	200087a8 	.word	0x200087a8

08009c60 <tcp_free_acked_segments.isra.2>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8009c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c64:	4606      	mov	r6, r0
 8009c66:	4690      	mov	r8, r2
 8009c68:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009c6a:	4f24      	ldr	r7, [pc, #144]	; (8009cfc <tcp_free_acked_segments.isra.2+0x9c>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009c6c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8009d08 <tcp_free_acked_segments.isra.2+0xa8>
  while (seg_list != NULL &&
 8009c70:	2c00      	cmp	r4, #0
 8009c72:	d034      	beq.n	8009cde <tcp_free_acked_segments.isra.2+0x7e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009c74:	68e3      	ldr	r3, [r4, #12]
 8009c76:	6858      	ldr	r0, [r3, #4]
 8009c78:	f7fd ff6f 	bl	8007b5a <lwip_htonl>
 8009c7c:	68e3      	ldr	r3, [r4, #12]
 8009c7e:	4682      	mov	sl, r0
 8009c80:	8925      	ldrh	r5, [r4, #8]
 8009c82:	8998      	ldrh	r0, [r3, #12]
 8009c84:	f7fd ff66 	bl	8007b54 <lwip_htons>
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	f010 0003 	ands.w	r0, r0, #3
 8009c8e:	eba5 0503 	sub.w	r5, r5, r3
 8009c92:	bf18      	it	ne
 8009c94:	2001      	movne	r0, #1
 8009c96:	4455      	add	r5, sl
 8009c98:	4405      	add	r5, r0
  while (seg_list != NULL &&
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	dc20      	bgt.n	8009ce0 <tcp_free_acked_segments.isra.2+0x80>
    clen = pbuf_clen(next->p);
 8009c9e:	e9d4 5000 	ldrd	r5, r0, [r4]
 8009ca2:	f7fe fdcb 	bl	800883c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009ca6:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 8009ca8:	4682      	mov	sl, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009caa:	4283      	cmp	r3, r0
 8009cac:	d206      	bcs.n	8009cbc <tcp_free_acked_segments.isra.2+0x5c>
 8009cae:	464b      	mov	r3, r9
 8009cb0:	f240 4257 	movw	r2, #1111	; 0x457
 8009cb4:	4912      	ldr	r1, [pc, #72]	; (8009d00 <tcp_free_acked_segments.isra.2+0xa0>)
 8009cb6:	4813      	ldr	r0, [pc, #76]	; (8009d04 <tcp_free_acked_segments.isra.2+0xa4>)
 8009cb8:	f002 fd08 	bl	800c6cc <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009cbc:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009cbe:	8aba      	ldrh	r2, [r7, #20]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009cc0:	eba0 000a 	sub.w	r0, r0, sl
 8009cc4:	8030      	strh	r0, [r6, #0]
    tcp_seg_free(next);
 8009cc6:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009cc8:	8923      	ldrh	r3, [r4, #8]
 8009cca:	4413      	add	r3, r2
 8009ccc:	82bb      	strh	r3, [r7, #20]
    tcp_seg_free(next);
 8009cce:	f7ff f8a7 	bl	8008e20 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8009cd2:	8833      	ldrh	r3, [r6, #0]
 8009cd4:	b17b      	cbz	r3, 8009cf6 <tcp_free_acked_segments.isra.2+0x96>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009cd6:	b975      	cbnz	r5, 8009cf6 <tcp_free_acked_segments.isra.2+0x96>
 8009cd8:	f1b8 0f00 	cmp.w	r8, #0
 8009cdc:	d003      	beq.n	8009ce6 <tcp_free_acked_segments.isra.2+0x86>
    seg_list = seg_list->next;
 8009cde:	2400      	movs	r4, #0
}
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009ce6:	4b08      	ldr	r3, [pc, #32]	; (8009d08 <tcp_free_acked_segments.isra.2+0xa8>)
 8009ce8:	f240 4262 	movw	r2, #1122	; 0x462
 8009cec:	4907      	ldr	r1, [pc, #28]	; (8009d0c <tcp_free_acked_segments.isra.2+0xac>)
 8009cee:	4805      	ldr	r0, [pc, #20]	; (8009d04 <tcp_free_acked_segments.isra.2+0xa4>)
 8009cf0:	f002 fcec 	bl	800c6cc <iprintf>
 8009cf4:	e7f3      	b.n	8009cde <tcp_free_acked_segments.isra.2+0x7e>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8009cf6:	462c      	mov	r4, r5
 8009cf8:	e7ba      	b.n	8009c70 <tcp_free_acked_segments.isra.2+0x10>
 8009cfa:	bf00      	nop
 8009cfc:	2000058c 	.word	0x2000058c
 8009d00:	08012edc 	.word	0x08012edc
 8009d04:	0801153a 	.word	0x0801153a
 8009d08:	08012e48 	.word	0x08012e48
 8009d0c:	08012f04 	.word	0x08012f04

08009d10 <tcp_receive>:
{
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009d12:	4604      	mov	r4, r0
 8009d14:	b930      	cbnz	r0, 8009d24 <tcp_receive+0x14>
 8009d16:	4bb3      	ldr	r3, [pc, #716]	; (8009fe4 <tcp_receive+0x2d4>)
 8009d18:	f240 427b 	movw	r2, #1147	; 0x47b
 8009d1c:	49b2      	ldr	r1, [pc, #712]	; (8009fe8 <tcp_receive+0x2d8>)
 8009d1e:	48b3      	ldr	r0, [pc, #716]	; (8009fec <tcp_receive+0x2dc>)
 8009d20:	f002 fcd4 	bl	800c6cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009d24:	7d23      	ldrb	r3, [r4, #20]
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d806      	bhi.n	8009d38 <tcp_receive+0x28>
 8009d2a:	4bae      	ldr	r3, [pc, #696]	; (8009fe4 <tcp_receive+0x2d4>)
 8009d2c:	f240 427c 	movw	r2, #1148	; 0x47c
 8009d30:	49af      	ldr	r1, [pc, #700]	; (8009ff0 <tcp_receive+0x2e0>)
 8009d32:	48ae      	ldr	r0, [pc, #696]	; (8009fec <tcp_receive+0x2dc>)
 8009d34:	f002 fcca 	bl	800c6cc <iprintf>
  if (flags & TCP_ACK) {
 8009d38:	4dae      	ldr	r5, [pc, #696]	; (8009ff4 <tcp_receive+0x2e4>)
 8009d3a:	7f2b      	ldrb	r3, [r5, #28]
 8009d3c:	06de      	lsls	r6, r3, #27
 8009d3e:	d578      	bpl.n	8009e32 <tcp_receive+0x122>
 8009d40:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009d42:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8009d46:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009d48:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 8009d4c:	1af7      	subs	r7, r6, r3
 8009d4e:	2f00      	cmp	r7, #0
 8009d50:	db0a      	blt.n	8009d68 <tcp_receive+0x58>
 8009d52:	429e      	cmp	r6, r3
 8009d54:	d102      	bne.n	8009d5c <tcp_receive+0x4c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009d56:	1a86      	subs	r6, r0, r2
 8009d58:	2e00      	cmp	r6, #0
 8009d5a:	db05      	blt.n	8009d68 <tcp_receive+0x58>
 8009d5c:	4290      	cmp	r0, r2
 8009d5e:	d10f      	bne.n	8009d80 <tcp_receive+0x70>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009d60:	68ee      	ldr	r6, [r5, #12]
 8009d62:	89f6      	ldrh	r6, [r6, #14]
 8009d64:	428e      	cmp	r6, r1
 8009d66:	d90b      	bls.n	8009d80 <tcp_receive+0x70>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009d68:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009d6a:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009d6e:	89f6      	ldrh	r6, [r6, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009d70:	42b7      	cmp	r7, r6
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009d72:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009d76:	bf38      	it	cc
 8009d78:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
      pcb->snd_wl2 = ackno;
 8009d7c:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009d80:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8009d82:	1b93      	subs	r3, r2, r6
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f300 8143 	bgt.w	800a010 <tcp_receive+0x300>
      if (tcplen == 0) {
 8009d8a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f040 8124 	bne.w	8009fda <tcp_receive+0x2ca>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009d92:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009d96:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009d98:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8009d9a:	443b      	add	r3, r7
 8009d9c:	428b      	cmp	r3, r1
 8009d9e:	f040 811c 	bne.w	8009fda <tcp_receive+0x2ca>
          if (pcb->rtime >= 0) {
 8009da2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f2c0 8117 	blt.w	8009fda <tcp_receive+0x2ca>
            if (pcb->lastack == ackno) {
 8009dac:	4296      	cmp	r6, r2
 8009dae:	f040 8114 	bne.w	8009fda <tcp_receive+0x2ca>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009db2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009db6:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 8009db8:	bf1c      	itt	ne
 8009dba:	3301      	addne	r3, #1
 8009dbc:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8009dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d90e      	bls.n	8009de6 <tcp_receive+0xd6>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009dc8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009dcc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009dce:	4413      	add	r3, r2
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	bf88      	it	hi
 8009dd6:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8009dda:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8009dde:	4620      	mov	r0, r4
 8009de0:	f001 fcee 	bl	800b7c0 <tcp_rexmit_fast>
 8009de4:	e000      	b.n	8009de8 <tcp_receive+0xd8>
              if (pcb->dupacks >= 3) {
 8009de6:	d0fa      	beq.n	8009dde <tcp_receive+0xce>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009de8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009dea:	b312      	cbz	r2, 8009e32 <tcp_receive+0x122>
 8009dec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009dee:	69a9      	ldr	r1, [r5, #24]
 8009df0:	1a5b      	subs	r3, r3, r1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da1d      	bge.n	8009e32 <tcp_receive+0x122>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009df6:	4b80      	ldr	r3, [pc, #512]	; (8009ff8 <tcp_receive+0x2e8>)
      m = (s16_t)(m - (pcb->sa >> 3));
 8009df8:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009dfc:	6819      	ldr	r1, [r3, #0]
 8009dfe:	1a89      	subs	r1, r1, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 8009e00:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = (s16_t)(m - (pcb->sa >> 3));
 8009e04:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 8009e08:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = (s16_t)(m - (pcb->sa >> 3));
 8009e0c:	b289      	uxth	r1, r1
 8009e0e:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8009e10:	4408      	add	r0, r1
      if (m < 0) {
 8009e12:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 8009e14:	b200      	sxth	r0, r0
        m = (s16_t) - m;
 8009e16:	bfb8      	it	lt
 8009e18:	4249      	neglt	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8009e1a:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 8009e1c:	bfb8      	it	lt
 8009e1e:	b20b      	sxthlt	r3, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 8009e20:	4413      	add	r3, r2
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009e26:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8009e2a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009e32:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8009e34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e36:	6a2b      	ldr	r3, [r5, #32]
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	f000 818e 	beq.w	800a15a <tcp_receive+0x44a>
 8009e3e:	7d21      	ldrb	r1, [r4, #20]
 8009e40:	2906      	cmp	r1, #6
 8009e42:	f200 818a 	bhi.w	800a15a <tcp_receive+0x44a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009e46:	1ad7      	subs	r7, r2, r3
 8009e48:	2f01      	cmp	r7, #1
 8009e4a:	f100 8175 	bmi.w	800a138 <tcp_receive+0x428>
 8009e4e:	f1c3 0101 	rsb	r1, r3, #1
 8009e52:	1a09      	subs	r1, r1, r0
 8009e54:	4411      	add	r1, r2
 8009e56:	2900      	cmp	r1, #0
 8009e58:	f300 816e 	bgt.w	800a138 <tcp_receive+0x428>
      struct pbuf *p = inseg.p;
 8009e5c:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009e5e:	b936      	cbnz	r6, 8009e6e <tcp_receive+0x15e>
 8009e60:	4b60      	ldr	r3, [pc, #384]	; (8009fe4 <tcp_receive+0x2d4>)
 8009e62:	f240 5294 	movw	r2, #1428	; 0x594
 8009e66:	4965      	ldr	r1, [pc, #404]	; (8009ffc <tcp_receive+0x2ec>)
 8009e68:	4860      	ldr	r0, [pc, #384]	; (8009fec <tcp_receive+0x2dc>)
 8009e6a:	f002 fc2f 	bl	800c6cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009e6e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009e72:	429f      	cmp	r7, r3
 8009e74:	d906      	bls.n	8009e84 <tcp_receive+0x174>
 8009e76:	4b5b      	ldr	r3, [pc, #364]	; (8009fe4 <tcp_receive+0x2d4>)
 8009e78:	f240 5295 	movw	r2, #1429	; 0x595
 8009e7c:	4960      	ldr	r1, [pc, #384]	; (800a000 <tcp_receive+0x2f0>)
 8009e7e:	485b      	ldr	r0, [pc, #364]	; (8009fec <tcp_receive+0x2dc>)
 8009e80:	f002 fc24 	bl	800c6cc <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009e84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 8009e86:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009e88:	891b      	ldrh	r3, [r3, #8]
 8009e8a:	42bb      	cmp	r3, r7
 8009e8c:	d206      	bcs.n	8009e9c <tcp_receive+0x18c>
 8009e8e:	4b55      	ldr	r3, [pc, #340]	; (8009fe4 <tcp_receive+0x2d4>)
 8009e90:	f240 5297 	movw	r2, #1431	; 0x597
 8009e94:	495b      	ldr	r1, [pc, #364]	; (800a004 <tcp_receive+0x2f4>)
 8009e96:	4855      	ldr	r0, [pc, #340]	; (8009fec <tcp_receive+0x2dc>)
 8009e98:	f002 fc18 	bl	800c6cc <iprintf>
      inseg.len -= off;
 8009e9c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 8009e9e:	2100      	movs	r1, #0
      inseg.len -= off;
 8009ea0:	1bdb      	subs	r3, r3, r7
 8009ea2:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009ea4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009ea6:	891b      	ldrh	r3, [r3, #8]
 8009ea8:	1bdb      	subs	r3, r3, r7
 8009eaa:	b29b      	uxth	r3, r3
      while (p->len < off) {
 8009eac:	8972      	ldrh	r2, [r6, #10]
 8009eae:	42ba      	cmp	r2, r7
 8009eb0:	f0c0 813c 	bcc.w	800a12c <tcp_receive+0x41c>
      pbuf_remove_header(p, off);
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7fe fb56 	bl	8008568 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ebe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009ec0:	622b      	str	r3, [r5, #32]
 8009ec2:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009ec4:	6a29      	ldr	r1, [r5, #32]
 8009ec6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009ec8:	1a8b      	subs	r3, r1, r2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f2c0 8140 	blt.w	800a150 <tcp_receive+0x440>
 8009ed0:	1c4b      	adds	r3, r1, #1
 8009ed2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	1a1b      	subs	r3, r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f300 8139 	bgt.w	800a150 <tcp_receive+0x440>
      if (pcb->rcv_nxt == seqno) {
 8009ede:	4291      	cmp	r1, r2
 8009ee0:	f040 8136 	bne.w	800a150 <tcp_receive+0x440>
        tcplen = TCP_TCPLEN(&inseg);
 8009ee4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009ee6:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 8009ee8:	8998      	ldrh	r0, [r3, #12]
 8009eea:	f7fd fe33 	bl	8007b54 <lwip_htons>
 8009eee:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8009ef2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8009ef4:	bf18      	it	ne
 8009ef6:	2001      	movne	r0, #1
 8009ef8:	4430      	add	r0, r6
 8009efa:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8009efc:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8009efe:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 8009f00:	d23d      	bcs.n	8009f7e <tcp_receive+0x26e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f02:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f04:	8998      	ldrh	r0, [r3, #12]
 8009f06:	f7fd fe25 	bl	8007b54 <lwip_htons>
 8009f0a:	07c6      	lsls	r6, r0, #31
 8009f0c:	d50d      	bpl.n	8009f2a <tcp_receive+0x21a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009f0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f10:	899e      	ldrh	r6, [r3, #12]
 8009f12:	4630      	mov	r0, r6
 8009f14:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8009f18:	f7fd fe1c 	bl	8007b54 <lwip_htons>
 8009f1c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009f20:	f7fd fe18 	bl	8007b54 <lwip_htons>
 8009f24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f26:	4306      	orrs	r6, r0
 8009f28:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009f2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009f2c:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009f2e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f30:	8998      	ldrh	r0, [r3, #12]
 8009f32:	f7fd fe0f 	bl	8007b54 <lwip_htons>
 8009f36:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 8009f38:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 8009f3a:	bf42      	ittt	mi
 8009f3c:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 8009f3e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8009f42:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 8009f44:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8009f46:	f7fe fc21 	bl	800878c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009f4a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f4c:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 8009f4e:	8998      	ldrh	r0, [r3, #12]
 8009f50:	f7fd fe00 	bl	8007b54 <lwip_htons>
 8009f54:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009f58:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 8009f5a:	bf18      	it	ne
 8009f5c:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009f5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8009f60:	4430      	add	r0, r6
 8009f62:	b280      	uxth	r0, r0
 8009f64:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009f66:	4418      	add	r0, r3
 8009f68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009f6a:	4413      	add	r3, r2
 8009f6c:	4298      	cmp	r0, r3
 8009f6e:	d006      	beq.n	8009f7e <tcp_receive+0x26e>
 8009f70:	4b1c      	ldr	r3, [pc, #112]	; (8009fe4 <tcp_receive+0x2d4>)
 8009f72:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8009f76:	4924      	ldr	r1, [pc, #144]	; (800a008 <tcp_receive+0x2f8>)
 8009f78:	481c      	ldr	r0, [pc, #112]	; (8009fec <tcp_receive+0x2dc>)
 8009f7a:	f002 fba7 	bl	800c6cc <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 8009f7e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8009f80:	6a2b      	ldr	r3, [r5, #32]
 8009f82:	4413      	add	r3, r2
 8009f84:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009f86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d206      	bcs.n	8009f9a <tcp_receive+0x28a>
 8009f8c:	4b15      	ldr	r3, [pc, #84]	; (8009fe4 <tcp_receive+0x2d4>)
 8009f8e:	f240 6207 	movw	r2, #1543	; 0x607
 8009f92:	491e      	ldr	r1, [pc, #120]	; (800a00c <tcp_receive+0x2fc>)
 8009f94:	4815      	ldr	r0, [pc, #84]	; (8009fec <tcp_receive+0x2dc>)
 8009f96:	f002 fb99 	bl	800c6cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009f9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009f9c:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8009f9e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009fa4:	f7fe feca 	bl	8008d3c <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8009fa8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009faa:	891a      	ldrh	r2, [r3, #8]
 8009fac:	b112      	cbz	r2, 8009fb4 <tcp_receive+0x2a4>
          recv_data = inseg.p;
 8009fae:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009fb4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009fb6:	8998      	ldrh	r0, [r3, #12]
 8009fb8:	f7fd fdcc 	bl	8007b54 <lwip_htons>
 8009fbc:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 8009fbe:	bf42      	ittt	mi
 8009fc0:	7cab      	ldrbmi	r3, [r5, #18]
 8009fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8009fc6:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 8009fc8:	8b63      	ldrh	r3, [r4, #26]
 8009fca:	07da      	lsls	r2, r3, #31
 8009fcc:	f140 80bc 	bpl.w	800a148 <tcp_receive+0x438>
 8009fd0:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 8009fd4:	f043 0302 	orr.w	r3, r3, #2
 8009fd8:	e0b8      	b.n	800a14c <tcp_receive+0x43c>
        pcb->dupacks = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe0:	e702      	b.n	8009de8 <tcp_receive+0xd8>
 8009fe2:	bf00      	nop
 8009fe4:	08012e48 	.word	0x08012e48
 8009fe8:	08012f24 	.word	0x08012f24
 8009fec:	0801153a 	.word	0x0801153a
 8009ff0:	08012f3d 	.word	0x08012f3d
 8009ff4:	2000058c 	.word	0x2000058c
 8009ff8:	200087ac 	.word	0x200087ac
 8009ffc:	08012f56 	.word	0x08012f56
 800a000:	08012f66 	.word	0x08012f66
 800a004:	08012f75 	.word	0x08012f75
 800a008:	08012f85 	.word	0x08012f85
 800a00c:	08012fbc 	.word	0x08012fbc
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a010:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a012:	1a51      	subs	r1, r2, r1
 800a014:	2900      	cmp	r1, #0
 800a016:	f300 8085 	bgt.w	800a124 <tcp_receive+0x414>
      if (pcb->flags & TF_INFR) {
 800a01a:	8b61      	ldrh	r1, [r4, #26]
 800a01c:	0748      	lsls	r0, r1, #29
 800a01e:	d509      	bpl.n	800a034 <tcp_receive+0x324>
        tcp_clear_flags(pcb, TF_INFR);
 800a020:	f021 0104 	bic.w	r1, r1, #4
 800a024:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800a026:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800a02a:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a02e:	2100      	movs	r1, #0
 800a030:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a034:	f9b4 603c 	ldrsh.w	r6, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 800a038:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a03a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800a03c:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800a03e:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a040:	eb01 01e6 	add.w	r1, r1, r6, asr #3
      pcb->nrtx = 0;
 800a044:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800a048:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a04a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800a04e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800a052:	d91b      	bls.n	800a08c <tcp_receive+0x37c>
        if (pcb->cwnd < pcb->ssthresh) {
 800a054:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a058:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800a05a:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a05e:	428a      	cmp	r2, r1
 800a060:	d93d      	bls.n	800a0de <tcp_receive+0x3ce>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a062:	8b62      	ldrh	r2, [r4, #26]
 800a064:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a068:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a06a:	bf0c      	ite	eq
 800a06c:	2002      	moveq	r0, #2
 800a06e:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a070:	fb12 f200 	smulbb	r2, r2, r0
 800a074:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800a076:	429a      	cmp	r2, r3
 800a078:	bf94      	ite	ls
 800a07a:	188b      	addls	r3, r1, r2
 800a07c:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4299      	cmp	r1, r3
 800a082:	d901      	bls.n	800a088 <tcp_receive+0x378>
          TCP_WND_INC(pcb->cwnd, increase);
 800a084:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a088:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800a08c:	f104 0666 	add.w	r6, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a090:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800a094:	4630      	mov	r0, r6
 800a096:	f7ff fde3 	bl	8009c60 <tcp_free_acked_segments.isra.2>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a09a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a09c:	4602      	mov	r2, r0
 800a09e:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f7ff fddd 	bl	8009c60 <tcp_free_acked_segments.isra.2>
      if (pcb->unacked == NULL) {
 800a0a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a0a8:	66e0      	str	r0, [r4, #108]	; 0x6c
 800a0aa:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 800a0ac:	bb5b      	cbnz	r3, 800a106 <tcp_receive+0x3f6>
        pcb->rtime = -1;
 800a0ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a0b2:	8621      	strh	r1, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800a0b4:	7722      	strb	r2, [r4, #28]
      if (pcb->unsent == NULL) {
 800a0b6:	b908      	cbnz	r0, 800a0bc <tcp_receive+0x3ac>
        pcb->unsent_oversize = 0;
 800a0b8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a0bc:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800a0c0:	8aa9      	ldrh	r1, [r5, #20]
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800a0c8:	8b62      	ldrh	r2, [r4, #26]
 800a0ca:	0517      	lsls	r7, r2, #20
 800a0cc:	f57f ae8c 	bpl.w	8009de8 <tcp_receive+0xd8>
        if (pcb->unacked == NULL) {
 800a0d0:	bb2b      	cbnz	r3, 800a11e <tcp_receive+0x40e>
          if ((pcb->unsent == NULL) ||
 800a0d2:	b9d0      	cbnz	r0, 800a10a <tcp_receive+0x3fa>
          tcp_clear_flags(pcb, TF_RTO);
 800a0d4:	8b63      	ldrh	r3, [r4, #26]
 800a0d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0da:	8363      	strh	r3, [r4, #26]
 800a0dc:	e684      	b.n	8009de8 <tcp_receive+0xd8>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a0de:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a0e2:	4413      	add	r3, r2
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	bf88      	it	hi
 800a0ea:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a0ee:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a0f2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	d8c8      	bhi.n	800a08c <tcp_receive+0x37c>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a0fa:	1a5b      	subs	r3, r3, r1
 800a0fc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a100:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a102:	440b      	add	r3, r1
 800a104:	e7bb      	b.n	800a07e <tcp_receive+0x36e>
        pcb->rtime = 0;
 800a106:	8622      	strh	r2, [r4, #48]	; 0x30
 800a108:	e7d4      	b.n	800a0b4 <tcp_receive+0x3a4>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a10a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800a10c:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a10e:	6858      	ldr	r0, [r3, #4]
 800a110:	f7fd fd23 	bl	8007b5a <lwip_htonl>
 800a114:	1a30      	subs	r0, r6, r0
 800a116:	2800      	cmp	r0, #0
 800a118:	f73f ae66 	bgt.w	8009de8 <tcp_receive+0xd8>
 800a11c:	e7da      	b.n	800a0d4 <tcp_receive+0x3c4>
 800a11e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	e7f4      	b.n	800a10e <tcp_receive+0x3fe>
      tcp_send_empty_ack(pcb);
 800a124:	4620      	mov	r0, r4
 800a126:	f001 fbc7 	bl	800b8b8 <tcp_send_empty_ack>
 800a12a:	e65d      	b.n	8009de8 <tcp_receive+0xd8>
        off -= p->len;
 800a12c:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800a12e:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800a130:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800a132:	b2bf      	uxth	r7, r7
        p = p->next;
 800a134:	6836      	ldr	r6, [r6, #0]
 800a136:	e6b9      	b.n	8009eac <tcp_receive+0x19c>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a138:	1a9b      	subs	r3, r3, r2
 800a13a:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800a13c:	bfbe      	ittt	lt
 800a13e:	8b63      	ldrhlt	r3, [r4, #26]
 800a140:	f043 0302 	orrlt.w	r3, r3, #2
 800a144:	8363      	strhlt	r3, [r4, #26]
 800a146:	e6bd      	b.n	8009ec4 <tcp_receive+0x1b4>
        tcp_ack(pcb);
 800a148:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800a14c:	8363      	strh	r3, [r4, #26]
}
 800a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800a150:	4620      	mov	r0, r4
}
 800a152:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800a156:	f001 bbaf 	b.w	800b8b8 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a15a:	1a99      	subs	r1, r3, r2
 800a15c:	2900      	cmp	r1, #0
 800a15e:	db05      	blt.n	800a16c <tcp_receive+0x45c>
 800a160:	3301      	adds	r3, #1
 800a162:	1a9b      	subs	r3, r3, r2
 800a164:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a166:	1a9b      	subs	r3, r3, r2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	ddf0      	ble.n	800a14e <tcp_receive+0x43e>
      tcp_ack_now(pcb);
 800a16c:	8b63      	ldrh	r3, [r4, #26]
 800a16e:	e731      	b.n	8009fd4 <tcp_receive+0x2c4>

0800a170 <tcp_input>:
{
 800a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a174:	4606      	mov	r6, r0
{
 800a176:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a178:	b928      	cbnz	r0, 800a186 <tcp_input+0x16>
 800a17a:	4b9d      	ldr	r3, [pc, #628]	; (800a3f0 <tcp_input+0x280>)
 800a17c:	2283      	movs	r2, #131	; 0x83
 800a17e:	499d      	ldr	r1, [pc, #628]	; (800a3f4 <tcp_input+0x284>)
 800a180:	489d      	ldr	r0, [pc, #628]	; (800a3f8 <tcp_input+0x288>)
 800a182:	f002 faa3 	bl	800c6cc <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800a186:	6873      	ldr	r3, [r6, #4]
 800a188:	4d9c      	ldr	r5, [pc, #624]	; (800a3fc <tcp_input+0x28c>)
 800a18a:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800a18c:	8973      	ldrh	r3, [r6, #10]
 800a18e:	2b13      	cmp	r3, #19
 800a190:	f240 809d 	bls.w	800a2ce <tcp_input+0x15e>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a194:	4f9a      	ldr	r7, [pc, #616]	; (800a400 <tcp_input+0x290>)
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6978      	ldr	r0, [r7, #20]
 800a19a:	f7fd f8b6 	bl	800730a <ip4_addr_isbroadcast_u32>
 800a19e:	4604      	mov	r4, r0
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	f040 8094 	bne.w	800a2ce <tcp_input+0x15e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a1ac:	2be0      	cmp	r3, #224	; 0xe0
 800a1ae:	f000 808e 	beq.w	800a2ce <tcp_input+0x15e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a1b2:	68eb      	ldr	r3, [r5, #12]
 800a1b4:	8998      	ldrh	r0, [r3, #12]
 800a1b6:	f7fd fccd 	bl	8007b54 <lwip_htons>
 800a1ba:	0a81      	lsrs	r1, r0, #10
 800a1bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a1c0:	2913      	cmp	r1, #19
 800a1c2:	f240 8084 	bls.w	800a2ce <tcp_input+0x15e>
 800a1c6:	b28a      	uxth	r2, r1
 800a1c8:	8933      	ldrh	r3, [r6, #8]
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d37f      	bcc.n	800a2ce <tcp_input+0x15e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a1ce:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800a1d2:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800a1d4:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a1d6:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800a1d8:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a1da:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800a1dc:	d33e      	bcc.n	800a25c <tcp_input+0xec>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a1de:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800a1e0:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a1e2:	f7fe f9c1 	bl	8008568 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a1e6:	68ec      	ldr	r4, [r5, #12]
 800a1e8:	8820      	ldrh	r0, [r4, #0]
 800a1ea:	f7fd fcb3 	bl	8007b54 <lwip_htons>
 800a1ee:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a1f0:	68ec      	ldr	r4, [r5, #12]
 800a1f2:	8860      	ldrh	r0, [r4, #2]
 800a1f4:	f7fd fcae 	bl	8007b54 <lwip_htons>
 800a1f8:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a1fa:	68ec      	ldr	r4, [r5, #12]
 800a1fc:	6860      	ldr	r0, [r4, #4]
 800a1fe:	f7fd fcac 	bl	8007b5a <lwip_htonl>
 800a202:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a204:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a206:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a208:	68a0      	ldr	r0, [r4, #8]
 800a20a:	f7fd fca6 	bl	8007b5a <lwip_htonl>
 800a20e:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a210:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a212:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a214:	89e0      	ldrh	r0, [r4, #14]
 800a216:	f7fd fc9d 	bl	8007b54 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800a21a:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a21c:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a21e:	8998      	ldrh	r0, [r3, #12]
 800a220:	f7fd fc98 	bl	8007b54 <lwip_htons>
  tcplen = p->tot_len;
 800a224:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800a226:	b2c0      	uxtb	r0, r0
 800a228:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800a22c:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a22e:	0783      	lsls	r3, r0, #30
 800a230:	d148      	bne.n	800a2c4 <tcp_input+0x154>
  tcplen = p->tot_len;
 800a232:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a234:	4b73      	ldr	r3, [pc, #460]	; (800a404 <tcp_input+0x294>)
  prev = NULL;
 800a236:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a23a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800a3f0 <tcp_input+0x280>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a23e:	681c      	ldr	r4, [r3, #0]
 800a240:	4698      	mov	r8, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a242:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800a3f8 <tcp_input+0x288>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a246:	2c00      	cmp	r4, #0
 800a248:	d147      	bne.n	800a2da <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a24a:	4b6f      	ldr	r3, [pc, #444]	; (800a408 <tcp_input+0x298>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a24c:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 800a3f0 <tcp_input+0x280>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a250:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a252:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800a430 <tcp_input+0x2c0>
 800a256:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800a3f8 <tcp_input+0x288>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a25a:	e13c      	b.n	800a4d6 <tcp_input+0x366>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a25c:	6833      	ldr	r3, [r6, #0]
 800a25e:	b92b      	cbnz	r3, 800a26c <tcp_input+0xfc>
 800a260:	4b63      	ldr	r3, [pc, #396]	; (800a3f0 <tcp_input+0x280>)
 800a262:	22c2      	movs	r2, #194	; 0xc2
 800a264:	4969      	ldr	r1, [pc, #420]	; (800a40c <tcp_input+0x29c>)
 800a266:	4864      	ldr	r0, [pc, #400]	; (800a3f8 <tcp_input+0x288>)
 800a268:	f002 fa30 	bl	800c6cc <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800a26c:	2114      	movs	r1, #20
 800a26e:	4630      	mov	r0, r6
 800a270:	f7fe f97a 	bl	8008568 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800a274:	8971      	ldrh	r1, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a276:	8a2c      	ldrh	r4, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a278:	4630      	mov	r0, r6
    tcphdr_opt1len = p->len;
 800a27a:	8129      	strh	r1, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a27c:	1a64      	subs	r4, r4, r1
    pbuf_remove_header(p, tcphdr_opt1len);
 800a27e:	f7fe f973 	bl	8008568 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800a282:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a284:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 800a286:	8943      	ldrh	r3, [r0, #10]
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d320      	bcc.n	800a2ce <tcp_input+0x15e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a28c:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800a28e:	4621      	mov	r1, r4
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a290:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800a292:	f7fe f969 	bl	8008568 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a296:	8933      	ldrh	r3, [r6, #8]
 800a298:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a29a:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a29c:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a29e:	b12b      	cbz	r3, 800a2ac <tcp_input+0x13c>
 800a2a0:	4b53      	ldr	r3, [pc, #332]	; (800a3f0 <tcp_input+0x280>)
 800a2a2:	22df      	movs	r2, #223	; 0xdf
 800a2a4:	495a      	ldr	r1, [pc, #360]	; (800a410 <tcp_input+0x2a0>)
 800a2a6:	4854      	ldr	r0, [pc, #336]	; (800a3f8 <tcp_input+0x288>)
 800a2a8:	f002 fa10 	bl	800c6cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a2ac:	6833      	ldr	r3, [r6, #0]
 800a2ae:	8932      	ldrh	r2, [r6, #8]
 800a2b0:	891b      	ldrh	r3, [r3, #8]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d097      	beq.n	800a1e6 <tcp_input+0x76>
 800a2b6:	4b4e      	ldr	r3, [pc, #312]	; (800a3f0 <tcp_input+0x280>)
 800a2b8:	22e0      	movs	r2, #224	; 0xe0
 800a2ba:	4956      	ldr	r1, [pc, #344]	; (800a414 <tcp_input+0x2a4>)
 800a2bc:	484e      	ldr	r0, [pc, #312]	; (800a3f8 <tcp_input+0x288>)
 800a2be:	f002 fa05 	bl	800c6cc <iprintf>
 800a2c2:	e790      	b.n	800a1e6 <tcp_input+0x76>
    tcplen++;
 800a2c4:	1c53      	adds	r3, r2, #1
 800a2c6:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800a2c8:	429a      	cmp	r2, r3
    tcplen++;
 800a2ca:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800a2cc:	d9b2      	bls.n	800a234 <tcp_input+0xc4>
  pbuf_free(p);
 800a2ce:	4630      	mov	r0, r6
}
 800a2d0:	b005      	add	sp, #20
 800a2d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a2d6:	f7fe b97b 	b.w	80085d0 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a2da:	7d23      	ldrb	r3, [r4, #20]
 800a2dc:	b92b      	cbnz	r3, 800a2ea <tcp_input+0x17a>
 800a2de:	4653      	mov	r3, sl
 800a2e0:	22fb      	movs	r2, #251	; 0xfb
 800a2e2:	494d      	ldr	r1, [pc, #308]	; (800a418 <tcp_input+0x2a8>)
 800a2e4:	4658      	mov	r0, fp
 800a2e6:	f002 f9f1 	bl	800c6cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a2ea:	7d23      	ldrb	r3, [r4, #20]
 800a2ec:	2b0a      	cmp	r3, #10
 800a2ee:	d105      	bne.n	800a2fc <tcp_input+0x18c>
 800a2f0:	4653      	mov	r3, sl
 800a2f2:	22fc      	movs	r2, #252	; 0xfc
 800a2f4:	4949      	ldr	r1, [pc, #292]	; (800a41c <tcp_input+0x2ac>)
 800a2f6:	4658      	mov	r0, fp
 800a2f8:	f002 f9e8 	bl	800c6cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a2fc:	7d23      	ldrb	r3, [r4, #20]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d105      	bne.n	800a30e <tcp_input+0x19e>
 800a302:	4653      	mov	r3, sl
 800a304:	22fd      	movs	r2, #253	; 0xfd
 800a306:	4946      	ldr	r1, [pc, #280]	; (800a420 <tcp_input+0x2b0>)
 800a308:	4658      	mov	r0, fp
 800a30a:	f002 f9df 	bl	800c6cc <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a30e:	7a21      	ldrb	r1, [r4, #8]
 800a310:	68e2      	ldr	r2, [r4, #12]
 800a312:	b131      	cbz	r1, 800a322 <tcp_input+0x1b2>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a31a:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	4299      	cmp	r1, r3
 800a320:	d162      	bne.n	800a3e8 <tcp_input+0x278>
    if (pcb->remote_port == tcphdr->src &&
 800a322:	68eb      	ldr	r3, [r5, #12]
 800a324:	8b20      	ldrh	r0, [r4, #24]
 800a326:	8819      	ldrh	r1, [r3, #0]
 800a328:	4288      	cmp	r0, r1
 800a32a:	d15d      	bne.n	800a3e8 <tcp_input+0x278>
 800a32c:	8ae1      	ldrh	r1, [r4, #22]
 800a32e:	885b      	ldrh	r3, [r3, #2]
 800a330:	4299      	cmp	r1, r3
 800a332:	d159      	bne.n	800a3e8 <tcp_input+0x278>
        pcb->local_port == tcphdr->dest &&
 800a334:	6861      	ldr	r1, [r4, #4]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	4299      	cmp	r1, r3
 800a33a:	d155      	bne.n	800a3e8 <tcp_input+0x278>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a33c:	6821      	ldr	r1, [r4, #0]
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	4299      	cmp	r1, r3
 800a342:	d151      	bne.n	800a3e8 <tcp_input+0x278>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a344:	42a2      	cmp	r2, r4
 800a346:	f040 83f9 	bne.w	800ab3c <tcp_input+0x9cc>
 800a34a:	4b29      	ldr	r3, [pc, #164]	; (800a3f0 <tcp_input+0x280>)
 800a34c:	f240 120d 	movw	r2, #269	; 0x10d
 800a350:	4934      	ldr	r1, [pc, #208]	; (800a424 <tcp_input+0x2b4>)
 800a352:	4829      	ldr	r0, [pc, #164]	; (800a3f8 <tcp_input+0x288>)
 800a354:	f002 f9ba 	bl	800c6cc <iprintf>
      if (prev != NULL) {
 800a358:	f1b9 0f00 	cmp.w	r9, #0
 800a35c:	d007      	beq.n	800a36e <tcp_input+0x1fe>
        prev->next = pcb->next;
 800a35e:	68e3      	ldr	r3, [r4, #12]
 800a360:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 800a364:	f8d8 3000 	ldr.w	r3, [r8]
        tcp_active_pcbs = pcb;
 800a368:	f8c8 4000 	str.w	r4, [r8]
        pcb->next = tcp_active_pcbs;
 800a36c:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a36e:	68e3      	ldr	r3, [r4, #12]
 800a370:	42a3      	cmp	r3, r4
 800a372:	d106      	bne.n	800a382 <tcp_input+0x212>
 800a374:	4b1e      	ldr	r3, [pc, #120]	; (800a3f0 <tcp_input+0x280>)
 800a376:	f240 1215 	movw	r2, #277	; 0x115
 800a37a:	492b      	ldr	r1, [pc, #172]	; (800a428 <tcp_input+0x2b8>)
 800a37c:	481e      	ldr	r0, [pc, #120]	; (800a3f8 <tcp_input+0x288>)
 800a37e:	f002 f9a5 	bl	800c6cc <iprintf>
    inseg.len = p->tot_len;
 800a382:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800a384:	2300      	movs	r3, #0
    inseg.p = p;
 800a386:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800a388:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800a38a:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800a38c:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800a38e:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800a390:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800a392:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800a396:	7f2b      	ldrb	r3, [r5, #28]
 800a398:	071a      	lsls	r2, r3, #28
 800a39a:	d503      	bpl.n	800a3a4 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 800a39c:	7b73      	ldrb	r3, [r6, #13]
 800a39e:	f043 0301 	orr.w	r3, r3, #1
 800a3a2:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800a3a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a3a6:	4e21      	ldr	r6, [pc, #132]	; (800a42c <tcp_input+0x2bc>)
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 8137 	beq.w	800a61c <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7ff f964 	bl	800967c <tcp_process_refused_data>
 800a3b4:	300d      	adds	r0, #13
 800a3b6:	d007      	beq.n	800a3c8 <tcp_input+0x258>
 800a3b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f000 812e 	beq.w	800a61c <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3c0:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 812a 	beq.w	800a61c <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800a3c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a3ca:	b913      	cbnz	r3, 800a3d2 <tcp_input+0x262>
          tcp_send_empty_ack(pcb);
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f001 fa73 	bl	800b8b8 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800a3d2:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800a3d4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 800a3d6:	6034      	str	r4, [r6, #0]
    recv_data = NULL;
 800a3d8:	63ac      	str	r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800a3da:	b110      	cbz	r0, 800a3e2 <tcp_input+0x272>
      pbuf_free(inseg.p);
 800a3dc:	f7fe f8f8 	bl	80085d0 <pbuf_free>
      inseg.p = NULL;
 800a3e0:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800a3e2:	b005      	add	sp, #20
 800a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3e8:	46a1      	mov	r9, r4
 800a3ea:	4614      	mov	r4, r2
 800a3ec:	e72b      	b.n	800a246 <tcp_input+0xd6>
 800a3ee:	bf00      	nop
 800a3f0:	08012e48 	.word	0x08012e48
 800a3f4:	08012fdb 	.word	0x08012fdb
 800a3f8:	0801153a 	.word	0x0801153a
 800a3fc:	2000058c 	.word	0x2000058c
 800a400:	200043d0 	.word	0x200043d0
 800a404:	200087a8 	.word	0x200087a8
 800a408:	200087b8 	.word	0x200087b8
 800a40c:	08012ff3 	.word	0x08012ff3
 800a410:	08013003 	.word	0x08013003
 800a414:	0801300f 	.word	0x0801300f
 800a418:	0801302e 	.word	0x0801302e
 800a41c:	08013055 	.word	0x08013055
 800a420:	0801307f 	.word	0x0801307f
 800a424:	080130a6 	.word	0x080130a6
 800a428:	080130d1 	.word	0x080130d1
 800a42c:	200087bc 	.word	0x200087bc
 800a430:	080130fb 	.word	0x080130fb
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a434:	7d23      	ldrb	r3, [r4, #20]
 800a436:	2b0a      	cmp	r3, #10
 800a438:	d006      	beq.n	800a448 <tcp_input+0x2d8>
 800a43a:	465b      	mov	r3, fp
 800a43c:	f240 121f 	movw	r2, #287	; 0x11f
 800a440:	4651      	mov	r1, sl
 800a442:	4648      	mov	r0, r9
 800a444:	f002 f942 	bl	800c6cc <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a448:	7a22      	ldrb	r2, [r4, #8]
 800a44a:	b132      	cbz	r2, 800a45a <tcp_input+0x2ea>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a452:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a454:	b2db      	uxtb	r3, r3
 800a456:	429a      	cmp	r2, r3
 800a458:	d13c      	bne.n	800a4d4 <tcp_input+0x364>
      if (pcb->remote_port == tcphdr->src &&
 800a45a:	68eb      	ldr	r3, [r5, #12]
 800a45c:	8b22      	ldrh	r2, [r4, #24]
 800a45e:	8818      	ldrh	r0, [r3, #0]
 800a460:	4290      	cmp	r0, r2
 800a462:	d137      	bne.n	800a4d4 <tcp_input+0x364>
          pcb->local_port == tcphdr->dest &&
 800a464:	8ae2      	ldrh	r2, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 800a466:	8859      	ldrh	r1, [r3, #2]
 800a468:	4291      	cmp	r1, r2
 800a46a:	d133      	bne.n	800a4d4 <tcp_input+0x364>
          pcb->local_port == tcphdr->dest &&
 800a46c:	6862      	ldr	r2, [r4, #4]
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	429a      	cmp	r2, r3
 800a472:	d12f      	bne.n	800a4d4 <tcp_input+0x364>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a474:	6822      	ldr	r2, [r4, #0]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d12b      	bne.n	800a4d4 <tcp_input+0x364>
  if (flags & TCP_RST) {
 800a47c:	7f2b      	ldrb	r3, [r5, #28]
 800a47e:	075f      	lsls	r7, r3, #29
 800a480:	f53f af25 	bmi.w	800a2ce <tcp_input+0x15e>
  if (flags & TCP_SYN) {
 800a484:	079a      	lsls	r2, r3, #30
 800a486:	8caf      	ldrh	r7, [r5, #36]	; 0x24
 800a488:	d514      	bpl.n	800a4b4 <tcp_input+0x344>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a48a:	6a2a      	ldr	r2, [r5, #32]
 800a48c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	d415      	bmi.n	800a4be <tcp_input+0x34e>
 800a492:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800a496:	eba3 030c 	sub.w	r3, r3, ip
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	dc0f      	bgt.n	800a4be <tcp_input+0x34e>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a49e:	4b8f      	ldr	r3, [pc, #572]	; (800a6dc <tcp_input+0x56c>)
 800a4a0:	443a      	add	r2, r7
 800a4a2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4ae:	f001 f9bf 	bl	800b830 <tcp_rst>
 800a4b2:	e70c      	b.n	800a2ce <tcp_input+0x15e>
  } else if (flags & TCP_FIN) {
 800a4b4:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800a4b6:	bf42      	ittt	mi
 800a4b8:	4b89      	ldrmi	r3, [pc, #548]	; (800a6e0 <tcp_input+0x570>)
 800a4ba:	681b      	ldrmi	r3, [r3, #0]
 800a4bc:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800a4be:	2f00      	cmp	r7, #0
 800a4c0:	f43f af05 	beq.w	800a2ce <tcp_input+0x15e>
    tcp_ack_now(pcb);
 800a4c4:	8b63      	ldrh	r3, [r4, #26]
 800a4c6:	f043 0302 	orr.w	r3, r3, #2
 800a4ca:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f001 fa25 	bl	800b91c <tcp_output>
 800a4d2:	e6fc      	b.n	800a2ce <tcp_input+0x15e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4d4:	68e4      	ldr	r4, [r4, #12]
 800a4d6:	2c00      	cmp	r4, #0
 800a4d8:	d1ac      	bne.n	800a434 <tcp_input+0x2c4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4da:	4a82      	ldr	r2, [pc, #520]	; (800a6e4 <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4dc:	f8d7 e004 	ldr.w	lr, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4e0:	6810      	ldr	r0, [r2, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800a4e2:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a4e4:	f8d7 a014 	ldr.w	sl, [r7, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4e8:	4681      	mov	r9, r0
 800a4ea:	f1b9 0f00 	cmp.w	r9, #0
 800a4ee:	d111      	bne.n	800a514 <tcp_input+0x3a4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a4f0:	8988      	ldrh	r0, [r1, #12]
 800a4f2:	f7fd fb2f 	bl	8007b54 <lwip_htons>
 800a4f6:	0743      	lsls	r3, r0, #29
 800a4f8:	f53f aee9 	bmi.w	800a2ce <tcp_input+0x15e>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4fc:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4fe:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800a500:	8818      	ldrh	r0, [r3, #0]
 800a502:	6a2a      	ldr	r2, [r5, #32]
 800a504:	9002      	str	r0, [sp, #8]
 800a506:	885b      	ldrh	r3, [r3, #2]
 800a508:	440a      	add	r2, r1
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	4b73      	ldr	r3, [pc, #460]	; (800a6dc <tcp_input+0x56c>)
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	3304      	adds	r3, #4
 800a512:	e310      	b.n	800ab36 <tcp_input+0x9c6>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a514:	f899 c008 	ldrb.w	ip, [r9, #8]
 800a518:	f1bc 0f00 	cmp.w	ip, #0
 800a51c:	d005      	beq.n	800a52a <tcp_input+0x3ba>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a51e:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800a522:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a524:	b2db      	uxtb	r3, r3
 800a526:	459c      	cmp	ip, r3
 800a528:	d10c      	bne.n	800a544 <tcp_input+0x3d4>
      if (lpcb->local_port == tcphdr->dest) {
 800a52a:	f8b9 c016 	ldrh.w	ip, [r9, #22]
 800a52e:	884b      	ldrh	r3, [r1, #2]
 800a530:	4563      	cmp	r3, ip
 800a532:	d107      	bne.n	800a544 <tcp_input+0x3d4>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a534:	f8d9 3000 	ldr.w	r3, [r9]
 800a538:	4553      	cmp	r3, sl
 800a53a:	f000 82e3 	beq.w	800ab04 <tcp_input+0x994>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 82e0 	beq.w	800ab04 <tcp_input+0x994>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a544:	464c      	mov	r4, r9
 800a546:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800a54a:	e7ce      	b.n	800a4ea <tcp_input+0x37a>
  } else if (flags & TCP_SYN) {
 800a54c:	079a      	lsls	r2, r3, #30
 800a54e:	f57f aebe 	bpl.w	800a2ce <tcp_input+0x15e>
    npcb = tcp_alloc(pcb->prio);
 800a552:	f899 0015 	ldrb.w	r0, [r9, #21]
 800a556:	f7ff f9fd 	bl	8009954 <tcp_alloc>
    if (npcb == NULL) {
 800a55a:	4604      	mov	r4, r0
 800a55c:	b958      	cbnz	r0, 800a576 <tcp_input+0x406>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a55e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800a562:	2b00      	cmp	r3, #0
 800a564:	f43f aeb3 	beq.w	800a2ce <tcp_input+0x15e>
 800a568:	4601      	mov	r1, r0
 800a56a:	f04f 32ff 	mov.w	r2, #4294967295
 800a56e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a572:	4798      	blx	r3
 800a574:	e6ab      	b.n	800a2ce <tcp_input+0x15e>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a576:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 800a578:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a57a:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800a580:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800a584:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800a586:	7813      	ldrb	r3, [r2, #0]
 800a588:	7852      	ldrb	r2, [r2, #1]
 800a58a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a58e:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800a590:	2303      	movs	r3, #3
 800a592:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800a594:	6a2b      	ldr	r3, [r5, #32]
 800a596:	3301      	adds	r3, #1
 800a598:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a59a:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a59c:	f7ff fa7a 	bl	8009a94 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a5a0:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800a5a2:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a5a4:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800a5a6:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800a5a8:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a5aa:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a5ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 800a5b0:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800a5b2:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800a5b4:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a5b8:	f899 3009 	ldrb.w	r3, [r9, #9]
 800a5bc:	f003 030c 	and.w	r3, r3, #12
 800a5c0:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a5c2:	f899 3008 	ldrb.w	r3, [r9, #8]
 800a5c6:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800a5c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5cc:	f8c8 4000 	str.w	r4, [r8]
 800a5d0:	60e3      	str	r3, [r4, #12]
 800a5d2:	f001 fc79 	bl	800bec8 <tcp_timer_needed>
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	4b43      	ldr	r3, [pc, #268]	; (800a6e8 <tcp_input+0x578>)
    tcp_parseopt(npcb);
 800a5da:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800a5dc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a5de:	f7ff fac9 	bl	8009b74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a5e2:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5e4:	1d25      	adds	r5, r4, #4
 800a5e6:	8e67      	ldrh	r7, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800a5e8:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5ea:	4628      	mov	r0, r5
    npcb->snd_wnd = tcphdr->wnd;
 800a5ec:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a5f0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5f4:	f7fc fd0a 	bl	800700c <ip4_route>
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	f7ff fa63 	bl	8009ac8 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a602:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a604:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a606:	4620      	mov	r0, r4
 800a608:	f000 ff90 	bl	800b52c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f43f af5d 	beq.w	800a4cc <tcp_input+0x35c>
      tcp_abandon(npcb, 0);
 800a612:	4651      	mov	r1, sl
 800a614:	4620      	mov	r0, r4
 800a616:	f7ff f8c9 	bl	80097ac <tcp_abandon>
 800a61a:	e658      	b.n	800a2ce <tcp_input+0x15e>
  if (flags & TCP_RST) {
 800a61c:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800a61e:	6034      	str	r4, [r6, #0]
  if (flags & TCP_RST) {
 800a620:	0753      	lsls	r3, r2, #29
 800a622:	d537      	bpl.n	800a694 <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800a624:	7d21      	ldrb	r1, [r4, #20]
 800a626:	2902      	cmp	r1, #2
 800a628:	d11e      	bne.n	800a668 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800a62a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a62c:	69ab      	ldr	r3, [r5, #24]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d107      	bne.n	800a642 <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800a632:	7cab      	ldrb	r3, [r5, #18]
 800a634:	f043 0308 	orr.w	r3, r3, #8
 800a638:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a63a:	8b63      	ldrh	r3, [r4, #26]
 800a63c:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800a640:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800a642:	7cab      	ldrb	r3, [r5, #18]
 800a644:	0718      	lsls	r0, r3, #28
 800a646:	f140 81fc 	bpl.w	800aa42 <tcp_input+0x8d2>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a64a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a64e:	b11b      	cbz	r3, 800a658 <tcp_input+0x4e8>
 800a650:	f06f 010d 	mvn.w	r1, #13
 800a654:	6920      	ldr	r0, [r4, #16]
 800a656:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a658:	4621      	mov	r1, r4
 800a65a:	4824      	ldr	r0, [pc, #144]	; (800a6ec <tcp_input+0x57c>)
 800a65c:	f7fe fec0 	bl	80093e0 <tcp_pcb_remove>
        tcp_free(pcb);
 800a660:	4620      	mov	r0, r4
 800a662:	f7fe fa93 	bl	8008b8c <tcp_free>
 800a666:	e6b4      	b.n	800a3d2 <tcp_input+0x262>
      if (seqno == pcb->rcv_nxt) {
 800a668:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a66a:	6a2b      	ldr	r3, [r5, #32]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d007      	beq.n	800a680 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a670:	1a9b      	subs	r3, r3, r2
 800a672:	d4e6      	bmi.n	800a642 <tcp_input+0x4d2>
 800a674:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a676:	1a9b      	subs	r3, r3, r2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	dce2      	bgt.n	800a642 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800a67c:	8b63      	ldrh	r3, [r4, #26]
 800a67e:	e010      	b.n	800a6a2 <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a680:	2900      	cmp	r1, #0
 800a682:	d1d6      	bne.n	800a632 <tcp_input+0x4c2>
 800a684:	4b1a      	ldr	r3, [pc, #104]	; (800a6f0 <tcp_input+0x580>)
 800a686:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a68a:	491a      	ldr	r1, [pc, #104]	; (800a6f4 <tcp_input+0x584>)
 800a68c:	481a      	ldr	r0, [pc, #104]	; (800a6f8 <tcp_input+0x588>)
 800a68e:	f002 f81d 	bl	800c6cc <iprintf>
 800a692:	e7ce      	b.n	800a632 <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a694:	0797      	lsls	r7, r2, #30
 800a696:	8b63      	ldrh	r3, [r4, #26]
 800a698:	d506      	bpl.n	800a6a8 <tcp_input+0x538>
 800a69a:	7d22      	ldrb	r2, [r4, #20]
 800a69c:	3a02      	subs	r2, #2
 800a69e:	2a01      	cmp	r2, #1
 800a6a0:	d902      	bls.n	800a6a8 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800a6a2:	f043 0302 	orr.w	r3, r3, #2
 800a6a6:	e7cb      	b.n	800a640 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a6a8:	06d8      	lsls	r0, r3, #27
  tcp_parseopt(pcb);
 800a6aa:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800a6ac:	bf5e      	ittt	pl
 800a6ae:	4b0c      	ldrpl	r3, [pc, #48]	; (800a6e0 <tcp_input+0x570>)
 800a6b0:	681b      	ldrpl	r3, [r3, #0]
 800a6b2:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800a6ba:	f7ff fa5b 	bl	8009b74 <tcp_parseopt>
  switch (pcb->state) {
 800a6be:	7d23      	ldrb	r3, [r4, #20]
 800a6c0:	3b02      	subs	r3, #2
 800a6c2:	2b07      	cmp	r3, #7
 800a6c4:	d8bd      	bhi.n	800a642 <tcp_input+0x4d2>
 800a6c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a6ca:	0019      	.short	0x0019
 800a6cc:	011000a5 	.word	0x011000a5
 800a6d0:	015d0115 	.word	0x015d0115
 800a6d4:	01760110 	.word	0x01760110
 800a6d8:	01a7      	.short	0x01a7
 800a6da:	bf00      	nop
 800a6dc:	200043e0 	.word	0x200043e0
 800a6e0:	200087ac 	.word	0x200087ac
 800a6e4:	200087b0 	.word	0x200087b0
 800a6e8:	200087a4 	.word	0x200087a4
 800a6ec:	200087a8 	.word	0x200087a8
 800a6f0:	08012e48 	.word	0x08012e48
 800a6f4:	08013128 	.word	0x08013128
 800a6f8:	0801153a 	.word	0x0801153a
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a6fc:	7f2b      	ldrb	r3, [r5, #28]
 800a6fe:	f003 0212 	and.w	r2, r3, #18
 800a702:	2a12      	cmp	r2, #18
 800a704:	d169      	bne.n	800a7da <tcp_input+0x66a>
          && (ackno == pcb->lastack + 1)) {
 800a706:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a708:	69a9      	ldr	r1, [r5, #24]
 800a70a:	3201      	adds	r2, #1
 800a70c:	428a      	cmp	r2, r1
 800a70e:	d164      	bne.n	800a7da <tcp_input+0x66a>
        pcb->rcv_nxt = seqno + 1;
 800a710:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800a712:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800a714:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800a716:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a718:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a71a:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800a71e:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a720:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800a722:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a724:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a726:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800a728:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a72c:	18e7      	adds	r7, r4, r3
        pcb->state = ESTABLISHED;
 800a72e:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a730:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a734:	4638      	mov	r0, r7
 800a736:	f7fc fc69 	bl	800700c <ip4_route>
 800a73a:	463a      	mov	r2, r7
 800a73c:	4601      	mov	r1, r0
 800a73e:	4640      	mov	r0, r8
 800a740:	f7ff f9c2 	bl	8009ac8 <tcp_eff_send_mss_netif>
 800a744:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a746:	0042      	lsls	r2, r0, #1
 800a748:	0083      	lsls	r3, r0, #2
 800a74a:	f241 101c 	movw	r0, #4380	; 0x111c
 800a74e:	4611      	mov	r1, r2
 800a750:	4282      	cmp	r2, r0
 800a752:	bf38      	it	cc
 800a754:	4601      	movcc	r1, r0
 800a756:	428b      	cmp	r3, r1
 800a758:	d233      	bcs.n	800a7c2 <tcp_input+0x652>
 800a75a:	b298      	uxth	r0, r3
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a75c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a760:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a764:	b933      	cbnz	r3, 800a774 <tcp_input+0x604>
 800a766:	4ba3      	ldr	r3, [pc, #652]	; (800a9f4 <tcp_input+0x884>)
 800a768:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a76c:	49a2      	ldr	r1, [pc, #648]	; (800a9f8 <tcp_input+0x888>)
 800a76e:	48a3      	ldr	r0, [pc, #652]	; (800a9fc <tcp_input+0x88c>)
 800a770:	f001 ffac 	bl	800c6cc <iprintf>
        --pcb->snd_queuelen;
 800a774:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800a778:	6f27      	ldr	r7, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800a77a:	3b01      	subs	r3, #1
 800a77c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800a780:	bb1f      	cbnz	r7, 800a7ca <tcp_input+0x65a>
          rseg = pcb->unsent;
 800a782:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a784:	b937      	cbnz	r7, 800a794 <tcp_input+0x624>
 800a786:	4b9b      	ldr	r3, [pc, #620]	; (800a9f4 <tcp_input+0x884>)
 800a788:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a78c:	499c      	ldr	r1, [pc, #624]	; (800aa00 <tcp_input+0x890>)
 800a78e:	489b      	ldr	r0, [pc, #620]	; (800a9fc <tcp_input+0x88c>)
 800a790:	f001 ff9c 	bl	800c6cc <iprintf>
          pcb->unsent = rseg->next;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800a798:	4638      	mov	r0, r7
 800a79a:	f7fe fb41 	bl	8008e20 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800a79e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a7a0:	b9b3      	cbnz	r3, 800a7d0 <tcp_input+0x660>
          pcb->rtime = -1;
 800a7a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a7a6:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a7a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f43f af65 	beq.w	800a67c <tcp_input+0x50c>
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	6920      	ldr	r0, [r4, #16]
 800a7b8:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800a7ba:	300d      	adds	r0, #13
 800a7bc:	f47f af5e 	bne.w	800a67c <tcp_input+0x50c>
 800a7c0:	e607      	b.n	800a3d2 <tcp_input+0x262>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a7c2:	4282      	cmp	r2, r0
 800a7c4:	bf88      	it	hi
 800a7c6:	b290      	uxthhi	r0, r2
 800a7c8:	e7c8      	b.n	800a75c <tcp_input+0x5ec>
          pcb->unacked = rseg->next;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	6723      	str	r3, [r4, #112]	; 0x70
 800a7ce:	e7e3      	b.n	800a798 <tcp_input+0x628>
          pcb->rtime = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800a7d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7d8:	e7e6      	b.n	800a7a8 <tcp_input+0x638>
      else if (flags & TCP_ACK) {
 800a7da:	06d9      	lsls	r1, r3, #27
 800a7dc:	f57f af31 	bpl.w	800a642 <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7e0:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7e2:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800a7e4:	8818      	ldrh	r0, [r3, #0]
 800a7e6:	6a2a      	ldr	r2, [r5, #32]
 800a7e8:	9002      	str	r0, [sp, #8]
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	885b      	ldrh	r3, [r3, #2]
 800a7ee:	440a      	add	r2, r1
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	4b84      	ldr	r3, [pc, #528]	; (800aa04 <tcp_input+0x894>)
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	69a9      	ldr	r1, [r5, #24]
 800a7fa:	f001 f819 	bl	800b830 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a7fe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a802:	2b05      	cmp	r3, #5
 800a804:	f63f af1d 	bhi.w	800a642 <tcp_input+0x4d2>
          pcb->rtime = 0;
 800a808:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800a80a:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800a80c:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a80e:	f001 fa4b 	bl	800bca8 <tcp_rexmit_rto>
 800a812:	e716      	b.n	800a642 <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800a814:	7f2b      	ldrb	r3, [r5, #28]
 800a816:	06da      	lsls	r2, r3, #27
 800a818:	d55a      	bpl.n	800a8d0 <tcp_input+0x760>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a81a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a81c:	69a9      	ldr	r1, [r5, #24]
 800a81e:	43db      	mvns	r3, r3
 800a820:	42cb      	cmn	r3, r1
 800a822:	d446      	bmi.n	800a8b2 <tcp_input+0x742>
 800a824:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a826:	1acb      	subs	r3, r1, r3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dc42      	bgt.n	800a8b2 <tcp_input+0x742>
          pcb->state = ESTABLISHED;
 800a82c:	2304      	movs	r3, #4
 800a82e:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800a830:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a832:	b91b      	cbnz	r3, 800a83c <tcp_input+0x6cc>
            tcp_abort(pcb);
 800a834:	4620      	mov	r0, r4
 800a836:	f7ff f837 	bl	80098a8 <tcp_abort>
            goto aborted;
 800a83a:	e5ca      	b.n	800a3d2 <tcp_input+0x262>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	b933      	cbnz	r3, 800a84e <tcp_input+0x6de>
 800a840:	4b6c      	ldr	r3, [pc, #432]	; (800a9f4 <tcp_input+0x884>)
 800a842:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a846:	4970      	ldr	r1, [pc, #448]	; (800aa08 <tcp_input+0x898>)
 800a848:	486c      	ldr	r0, [pc, #432]	; (800a9fc <tcp_input+0x88c>)
 800a84a:	f001 ff3f 	bl	800c6cc <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a84e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0ee      	beq.n	800a834 <tcp_input+0x6c4>
 800a856:	2200      	movs	r2, #0
 800a858:	4621      	mov	r1, r4
 800a85a:	6920      	ldr	r0, [r4, #16]
 800a85c:	4798      	blx	r3
          if (err != ERR_OK) {
 800a85e:	b118      	cbz	r0, 800a868 <tcp_input+0x6f8>
            if (err != ERR_ABRT) {
 800a860:	300d      	adds	r0, #13
 800a862:	f43f adb6 	beq.w	800a3d2 <tcp_input+0x262>
 800a866:	e7e5      	b.n	800a834 <tcp_input+0x6c4>
          tcp_receive(pcb);
 800a868:	4620      	mov	r0, r4
 800a86a:	f7ff fa51 	bl	8009d10 <tcp_receive>
          if (recv_acked != 0) {
 800a86e:	4a67      	ldr	r2, [pc, #412]	; (800aa0c <tcp_input+0x89c>)
 800a870:	8a93      	ldrh	r3, [r2, #20]
 800a872:	b10b      	cbz	r3, 800a878 <tcp_input+0x708>
            recv_acked--;
 800a874:	3b01      	subs	r3, #1
 800a876:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a878:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a87a:	0058      	lsls	r0, r3, #1
 800a87c:	0099      	lsls	r1, r3, #2
 800a87e:	f241 131c 	movw	r3, #4380	; 0x111c
 800a882:	4607      	mov	r7, r0
 800a884:	4298      	cmp	r0, r3
 800a886:	bf38      	it	cc
 800a888:	461f      	movcc	r7, r3
 800a88a:	42b9      	cmp	r1, r7
 800a88c:	d20d      	bcs.n	800a8aa <tcp_input+0x73a>
 800a88e:	b28b      	uxth	r3, r1
 800a890:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800a894:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a896:	0698      	lsls	r0, r3, #26
 800a898:	f57f aed3 	bpl.w	800a642 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800a89c:	8b63      	ldrh	r3, [r4, #26]
 800a89e:	f043 0302 	orr.w	r3, r3, #2
 800a8a2:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800a8a4:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800a8a6:	7523      	strb	r3, [r4, #20]
 800a8a8:	e6cb      	b.n	800a642 <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a8aa:	4298      	cmp	r0, r3
 800a8ac:	bf88      	it	hi
 800a8ae:	b283      	uxthhi	r3, r0
 800a8b0:	e7ee      	b.n	800a890 <tcp_input+0x720>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8b2:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8b4:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800a8b6:	881f      	ldrh	r7, [r3, #0]
 800a8b8:	6a2a      	ldr	r2, [r5, #32]
 800a8ba:	9702      	str	r7, [sp, #8]
 800a8bc:	885b      	ldrh	r3, [r3, #2]
 800a8be:	4402      	add	r2, r0
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	4b4f      	ldr	r3, [pc, #316]	; (800aa04 <tcp_input+0x894>)
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	f000 ffb1 	bl	800b830 <tcp_rst>
 800a8ce:	e6b8      	b.n	800a642 <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a8d0:	079f      	lsls	r7, r3, #30
 800a8d2:	f57f aeb6 	bpl.w	800a642 <tcp_input+0x4d2>
 800a8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8d8:	6a2a      	ldr	r2, [r5, #32]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	f47f aeb0 	bne.w	800a642 <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f000 ff2c 	bl	800b740 <tcp_rexmit>
 800a8e8:	e6ab      	b.n	800a642 <tcp_input+0x4d2>
      tcp_receive(pcb);
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7ff fa10 	bl	8009d10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a8f0:	7cab      	ldrb	r3, [r5, #18]
 800a8f2:	e7d0      	b.n	800a896 <tcp_input+0x726>
      tcp_receive(pcb);
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f7ff fa0b 	bl	8009d10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a8fa:	7cab      	ldrb	r3, [r5, #18]
 800a8fc:	f013 0f20 	tst.w	r3, #32
 800a900:	7f2b      	ldrb	r3, [r5, #28]
 800a902:	d031      	beq.n	800a968 <tcp_input+0x7f8>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a904:	f013 0f10 	tst.w	r3, #16
 800a908:	8b63      	ldrh	r3, [r4, #26]
 800a90a:	d028      	beq.n	800a95e <tcp_input+0x7ee>
 800a90c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a90e:	69aa      	ldr	r2, [r5, #24]
 800a910:	4291      	cmp	r1, r2
 800a912:	d124      	bne.n	800a95e <tcp_input+0x7ee>
 800a914:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a916:	bb12      	cbnz	r2, 800a95e <tcp_input+0x7ee>
          tcp_ack_now(pcb);
 800a918:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800a91c:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800a91e:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800a920:	f7fe fb18 	bl	8008f54 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a924:	f8d8 3000 	ldr.w	r3, [r8]
 800a928:	429c      	cmp	r4, r3
 800a92a:	d10a      	bne.n	800a942 <tcp_input+0x7d2>
        TCP_RMV_ACTIVE(pcb);
 800a92c:	68e3      	ldr	r3, [r4, #12]
 800a92e:	f8c8 3000 	str.w	r3, [r8]
 800a932:	e008      	b.n	800a946 <tcp_input+0x7d6>
          TCP_RMV_ACTIVE(pcb);
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	4294      	cmp	r4, r2
 800a938:	d102      	bne.n	800a940 <tcp_input+0x7d0>
        TCP_RMV_ACTIVE(pcb);
 800a93a:	68e2      	ldr	r2, [r4, #12]
 800a93c:	60da      	str	r2, [r3, #12]
 800a93e:	e002      	b.n	800a946 <tcp_input+0x7d6>
          TCP_RMV_ACTIVE(pcb);
 800a940:	4613      	mov	r3, r2
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1f6      	bne.n	800a934 <tcp_input+0x7c4>
        TCP_RMV_ACTIVE(pcb);
 800a946:	4b32      	ldr	r3, [pc, #200]	; (800aa10 <tcp_input+0x8a0>)
 800a948:	2201      	movs	r2, #1
 800a94a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a94c:	230a      	movs	r3, #10
 800a94e:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a950:	4b30      	ldr	r3, [pc, #192]	; (800aa14 <tcp_input+0x8a4>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	601c      	str	r4, [r3, #0]
 800a956:	60e2      	str	r2, [r4, #12]
 800a958:	f001 fab6 	bl	800bec8 <tcp_timer_needed>
 800a95c:	e671      	b.n	800a642 <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800a95e:	f043 0302 	orr.w	r3, r3, #2
 800a962:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800a964:	2308      	movs	r3, #8
 800a966:	e79e      	b.n	800a8a6 <tcp_input+0x736>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a968:	06d9      	lsls	r1, r3, #27
 800a96a:	f57f ae6a 	bpl.w	800a642 <tcp_input+0x4d2>
 800a96e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a970:	69ab      	ldr	r3, [r5, #24]
 800a972:	429a      	cmp	r2, r3
 800a974:	f47f ae65 	bne.w	800a642 <tcp_input+0x4d2>
 800a978:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f47f ae61 	bne.w	800a642 <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800a980:	2306      	movs	r3, #6
 800a982:	e790      	b.n	800a8a6 <tcp_input+0x736>
      tcp_receive(pcb);
 800a984:	4620      	mov	r0, r4
 800a986:	f7ff f9c3 	bl	8009d10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a98a:	7cab      	ldrb	r3, [r5, #18]
 800a98c:	069a      	lsls	r2, r3, #26
 800a98e:	f57f ae58 	bpl.w	800a642 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800a992:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a994:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800a996:	f043 0302 	orr.w	r3, r3, #2
 800a99a:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a99c:	f7fe fada 	bl	8008f54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a9a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a4:	429c      	cmp	r4, r3
 800a9a6:	d0c1      	beq.n	800a92c <tcp_input+0x7bc>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0cc      	beq.n	800a946 <tcp_input+0x7d6>
 800a9ac:	68da      	ldr	r2, [r3, #12]
 800a9ae:	4294      	cmp	r4, r2
 800a9b0:	d0c3      	beq.n	800a93a <tcp_input+0x7ca>
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	e7f8      	b.n	800a9a8 <tcp_input+0x838>
      tcp_receive(pcb);
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7ff f9aa 	bl	8009d10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a9bc:	7f2b      	ldrb	r3, [r5, #28]
 800a9be:	06db      	lsls	r3, r3, #27
 800a9c0:	f57f ae3f 	bpl.w	800a642 <tcp_input+0x4d2>
 800a9c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9c6:	69ab      	ldr	r3, [r5, #24]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	f47f ae3a 	bne.w	800a642 <tcp_input+0x4d2>
 800a9ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f47f ae36 	bne.w	800a642 <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f7fe fabc 	bl	8008f54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9e0:	429c      	cmp	r4, r3
 800a9e2:	d0a3      	beq.n	800a92c <tcp_input+0x7bc>
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0ae      	beq.n	800a946 <tcp_input+0x7d6>
 800a9e8:	68da      	ldr	r2, [r3, #12]
 800a9ea:	4294      	cmp	r4, r2
 800a9ec:	d0a5      	beq.n	800a93a <tcp_input+0x7ca>
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	e7f8      	b.n	800a9e4 <tcp_input+0x874>
 800a9f2:	bf00      	nop
 800a9f4:	08012e48 	.word	0x08012e48
 800a9f8:	08013148 	.word	0x08013148
 800a9fc:	0801153a 	.word	0x0801153a
 800aa00:	0801315e 	.word	0x0801315e
 800aa04:	200043e0 	.word	0x200043e0
 800aa08:	08013171 	.word	0x08013171
 800aa0c:	2000058c 	.word	0x2000058c
 800aa10:	200087a4 	.word	0x200087a4
 800aa14:	200087b8 	.word	0x200087b8
      tcp_receive(pcb);
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f7ff f979 	bl	8009d10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aa1e:	7f2b      	ldrb	r3, [r5, #28]
 800aa20:	06df      	lsls	r7, r3, #27
 800aa22:	f57f ae0e 	bpl.w	800a642 <tcp_input+0x4d2>
 800aa26:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aa28:	69ab      	ldr	r3, [r5, #24]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	f47f ae09 	bne.w	800a642 <tcp_input+0x4d2>
 800aa30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f47f ae05 	bne.w	800a642 <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800aa38:	7cab      	ldrb	r3, [r5, #18]
 800aa3a:	f043 0310 	orr.w	r3, r3, #16
 800aa3e:	74ab      	strb	r3, [r5, #18]
 800aa40:	e5ff      	b.n	800a642 <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800aa42:	8aaa      	ldrh	r2, [r5, #20]
 800aa44:	b11a      	cbz	r2, 800aa4e <tcp_input+0x8de>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800aa46:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aa48:	b9db      	cbnz	r3, 800aa82 <tcp_input+0x912>
          recv_acked = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7ff f8da 	bl	8009c08 <tcp_input_delayed_close>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	f47f acbc 	bne.w	800a3d2 <tcp_input+0x262>
        if (recv_data != NULL) {
 800aa5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800aa5c:	b323      	cbz	r3, 800aaa8 <tcp_input+0x938>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800aa5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aa60:	b133      	cbz	r3, 800aa70 <tcp_input+0x900>
 800aa62:	4b39      	ldr	r3, [pc, #228]	; (800ab48 <tcp_input+0x9d8>)
 800aa64:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800aa68:	4938      	ldr	r1, [pc, #224]	; (800ab4c <tcp_input+0x9dc>)
 800aa6a:	4839      	ldr	r0, [pc, #228]	; (800ab50 <tcp_input+0x9e0>)
 800aa6c:	f001 fe2e 	bl	800c6cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800aa70:	8b63      	ldrh	r3, [r4, #26]
 800aa72:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800aa74:	f013 0310 	ands.w	r3, r3, #16
 800aa78:	d009      	beq.n	800aa8e <tcp_input+0x91e>
            pbuf_free(recv_data);
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	f7fd fda8 	bl	80085d0 <pbuf_free>
 800aa80:	e6d8      	b.n	800a834 <tcp_input+0x6c4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800aa82:	4621      	mov	r1, r4
 800aa84:	6920      	ldr	r0, [r4, #16]
 800aa86:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800aa88:	300d      	adds	r0, #13
 800aa8a:	d1de      	bne.n	800aa4a <tcp_input+0x8da>
 800aa8c:	e4a1      	b.n	800a3d2 <tcp_input+0x262>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aa8e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800aa92:	b1f7      	cbz	r7, 800aad2 <tcp_input+0x962>
 800aa94:	4621      	mov	r1, r4
 800aa96:	6920      	ldr	r0, [r4, #16]
 800aa98:	47b8      	blx	r7
          if (err == ERR_ABRT) {
 800aa9a:	f110 0f0d 	cmn.w	r0, #13
 800aa9e:	f43f ac98 	beq.w	800a3d2 <tcp_input+0x262>
          if (err != ERR_OK) {
 800aaa2:	b108      	cbz	r0, 800aaa8 <tcp_input+0x938>
            pcb->refused_data = recv_data;
 800aaa4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800aaa6:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800aaa8:	7cab      	ldrb	r3, [r5, #18]
 800aaaa:	0699      	lsls	r1, r3, #26
 800aaac:	d505      	bpl.n	800aaba <tcp_input+0x94a>
          if (pcb->refused_data != NULL) {
 800aaae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aab0:	b1ab      	cbz	r3, 800aade <tcp_input+0x96e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800aab2:	7b5a      	ldrb	r2, [r3, #13]
 800aab4:	f042 0220 	orr.w	r2, r2, #32
 800aab8:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800aaba:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800aabc:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800aabe:	6033      	str	r3, [r6, #0]
        if (tcp_input_delayed_close(pcb)) {
 800aac0:	f7ff f8a2 	bl	8009c08 <tcp_input_delayed_close>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	f47f ac84 	bne.w	800a3d2 <tcp_input+0x262>
        tcp_output(pcb);
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 ff26 	bl	800b91c <tcp_output>
 800aad0:	e47f      	b.n	800a3d2 <tcp_input+0x262>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aad2:	463b      	mov	r3, r7
 800aad4:	4621      	mov	r1, r4
 800aad6:	4638      	mov	r0, r7
 800aad8:	f7fe fdac 	bl	8009634 <tcp_recv_null>
 800aadc:	e7dd      	b.n	800aa9a <tcp_input+0x92a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aade:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aae0:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800aae4:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aae8:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800aaea:	bf1c      	itt	ne
 800aaec:	3301      	addne	r3, #1
 800aaee:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800aaf0:	2f00      	cmp	r7, #0
 800aaf2:	d0e2      	beq.n	800aaba <tcp_input+0x94a>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	6920      	ldr	r0, [r4, #16]
 800aafa:	461a      	mov	r2, r3
 800aafc:	47b8      	blx	r7
            if (err == ERR_ABRT) {
 800aafe:	300d      	adds	r0, #13
 800ab00:	d1db      	bne.n	800aaba <tcp_input+0x94a>
aborted:
 800ab02:	e466      	b.n	800a3d2 <tcp_input+0x262>
      if (prev != NULL) {
 800ab04:	b134      	cbz	r4, 800ab14 <tcp_input+0x9a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ab06:	f8d9 300c 	ldr.w	r3, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ab0a:	f8c2 9000 	str.w	r9, [r2]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ab0e:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ab10:	f8c9 000c 	str.w	r0, [r9, #12]
  if (flags & TCP_RST) {
 800ab14:	7f2b      	ldrb	r3, [r5, #28]
 800ab16:	0758      	lsls	r0, r3, #29
 800ab18:	f53f abd9 	bmi.w	800a2ce <tcp_input+0x15e>
  if (flags & TCP_ACK) {
 800ab1c:	f013 0a10 	ands.w	sl, r3, #16
 800ab20:	f43f ad14 	beq.w	800a54c <tcp_input+0x3dc>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab24:	880b      	ldrh	r3, [r1, #0]
 800ab26:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800ab28:	6a2a      	ldr	r2, [r5, #32]
 800ab2a:	e9cd c301 	strd	ip, r3, [sp, #4]
 800ab2e:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <tcp_input+0x9e4>)
 800ab30:	4402      	add	r2, r0
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	3304      	adds	r3, #4
 800ab36:	69a9      	ldr	r1, [r5, #24]
 800ab38:	4648      	mov	r0, r9
 800ab3a:	e4b8      	b.n	800a4ae <tcp_input+0x33e>
      if (prev != NULL) {
 800ab3c:	f1b9 0f00 	cmp.w	r9, #0
 800ab40:	f47f ac0d 	bne.w	800a35e <tcp_input+0x1ee>
 800ab44:	e41d      	b.n	800a382 <tcp_input+0x212>
 800ab46:	bf00      	nop
 800ab48:	08012e48 	.word	0x08012e48
 800ab4c:	0801318f 	.word	0x0801318f
 800ab50:	0801153a 	.word	0x0801153a
 800ab54:	200043e0 	.word	0x200043e0

0800ab58 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800ab58:	4a02      	ldr	r2, [pc, #8]	; (800ab64 <tcp_trigger_input_pcb_close+0xc>)
 800ab5a:	7c93      	ldrb	r3, [r2, #18]
 800ab5c:	f043 0310 	orr.w	r3, r3, #16
 800ab60:	7493      	strb	r3, [r2, #18]
}
 800ab62:	4770      	bx	lr
 800ab64:	2000058c 	.word	0x2000058c

0800ab68 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ab68:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	b930      	cbnz	r0, 800ab7c <tcp_output_segment_busy+0x14>
 800ab6e:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <tcp_output_segment_busy+0x24>)
 800ab70:	f240 529a 	movw	r2, #1434	; 0x59a
 800ab74:	4906      	ldr	r1, [pc, #24]	; (800ab90 <tcp_output_segment_busy+0x28>)
 800ab76:	4807      	ldr	r0, [pc, #28]	; (800ab94 <tcp_output_segment_busy+0x2c>)
 800ab78:	f001 fda8 	bl	800c6cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ab7c:	6863      	ldr	r3, [r4, #4]
 800ab7e:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800ab80:	f110 30ff 	adds.w	r0, r0, #4294967295
 800ab84:	bf18      	it	ne
 800ab86:	2001      	movne	r0, #1
 800ab88:	bd10      	pop	{r4, pc}
 800ab8a:	bf00      	nop
 800ab8c:	080131a9 	.word	0x080131a9
 800ab90:	080131ff 	.word	0x080131ff
 800ab94:	0801153a 	.word	0x0801153a

0800ab98 <tcp_pbuf_prealloc>:
{
 800ab98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab9c:	9d08      	ldr	r5, [sp, #32]
 800ab9e:	4607      	mov	r7, r0
 800aba0:	460c      	mov	r4, r1
 800aba2:	4690      	mov	r8, r2
 800aba4:	461e      	mov	r6, r3
 800aba6:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800abaa:	b92d      	cbnz	r5, 800abb8 <tcp_pbuf_prealloc+0x20>
 800abac:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <tcp_pbuf_prealloc+0x84>)
 800abae:	22e9      	movs	r2, #233	; 0xe9
 800abb0:	491b      	ldr	r1, [pc, #108]	; (800ac20 <tcp_pbuf_prealloc+0x88>)
 800abb2:	481c      	ldr	r0, [pc, #112]	; (800ac24 <tcp_pbuf_prealloc+0x8c>)
 800abb4:	f001 fd8a 	bl	800c6cc <iprintf>
  if (length < max_length) {
 800abb8:	4544      	cmp	r4, r8
 800abba:	d22d      	bcs.n	800ac18 <tcp_pbuf_prealloc+0x80>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800abbc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800abc0:	079a      	lsls	r2, r3, #30
 800abc2:	d409      	bmi.n	800abd8 <tcp_pbuf_prealloc+0x40>
 800abc4:	8b6b      	ldrh	r3, [r5, #26]
 800abc6:	065b      	lsls	r3, r3, #25
 800abc8:	d426      	bmi.n	800ac18 <tcp_pbuf_prealloc+0x80>
        (!(pcb->flags & TF_NODELAY) &&
 800abca:	f1b9 0f00 	cmp.w	r9, #0
 800abce:	d003      	beq.n	800abd8 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800abd0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800abd2:	b90b      	cbnz	r3, 800abd8 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800abd4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800abd6:	b1fb      	cbz	r3, 800ac18 <tcp_pbuf_prealloc+0x80>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800abd8:	f204 51b7 	addw	r1, r4, #1463	; 0x5b7
 800abdc:	f021 0103 	bic.w	r1, r1, #3
 800abe0:	4541      	cmp	r1, r8
 800abe2:	bf28      	it	cs
 800abe4:	4641      	movcs	r1, r8
 800abe6:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800abe8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800abec:	4638      	mov	r0, r7
 800abee:	f7fd fd51 	bl	8008694 <pbuf_alloc>
  if (p == NULL) {
 800abf2:	4605      	mov	r5, r0
 800abf4:	b168      	cbz	r0, 800ac12 <tcp_pbuf_prealloc+0x7a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800abf6:	6803      	ldr	r3, [r0, #0]
 800abf8:	b133      	cbz	r3, 800ac08 <tcp_pbuf_prealloc+0x70>
 800abfa:	4b08      	ldr	r3, [pc, #32]	; (800ac1c <tcp_pbuf_prealloc+0x84>)
 800abfc:	f240 120b 	movw	r2, #267	; 0x10b
 800ac00:	4909      	ldr	r1, [pc, #36]	; (800ac28 <tcp_pbuf_prealloc+0x90>)
 800ac02:	4808      	ldr	r0, [pc, #32]	; (800ac24 <tcp_pbuf_prealloc+0x8c>)
 800ac04:	f001 fd62 	bl	800c6cc <iprintf>
  *oversize = p->len - length;
 800ac08:	896b      	ldrh	r3, [r5, #10]
 800ac0a:	1b1b      	subs	r3, r3, r4
 800ac0c:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800ac0e:	812c      	strh	r4, [r5, #8]
 800ac10:	816c      	strh	r4, [r5, #10]
}
 800ac12:	4628      	mov	r0, r5
 800ac14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac18:	4621      	mov	r1, r4
 800ac1a:	e7e5      	b.n	800abe8 <tcp_pbuf_prealloc+0x50>
 800ac1c:	080131a9 	.word	0x080131a9
 800ac20:	08013224 	.word	0x08013224
 800ac24:	0801153a 	.word	0x0801153a
 800ac28:	08013243 	.word	0x08013243

0800ac2c <tcp_create_segment>:
{
 800ac2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac30:	460e      	mov	r6, r1
 800ac32:	4690      	mov	r8, r2
 800ac34:	4699      	mov	r9, r3
 800ac36:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ac3a:	4607      	mov	r7, r0
 800ac3c:	b928      	cbnz	r0, 800ac4a <tcp_create_segment+0x1e>
 800ac3e:	4b2e      	ldr	r3, [pc, #184]	; (800acf8 <tcp_create_segment+0xcc>)
 800ac40:	22a3      	movs	r2, #163	; 0xa3
 800ac42:	492e      	ldr	r1, [pc, #184]	; (800acfc <tcp_create_segment+0xd0>)
 800ac44:	482e      	ldr	r0, [pc, #184]	; (800ad00 <tcp_create_segment+0xd4>)
 800ac46:	f001 fd41 	bl	800c6cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ac4a:	b92e      	cbnz	r6, 800ac58 <tcp_create_segment+0x2c>
 800ac4c:	4b2a      	ldr	r3, [pc, #168]	; (800acf8 <tcp_create_segment+0xcc>)
 800ac4e:	22a4      	movs	r2, #164	; 0xa4
 800ac50:	492c      	ldr	r1, [pc, #176]	; (800ad04 <tcp_create_segment+0xd8>)
 800ac52:	482b      	ldr	r0, [pc, #172]	; (800ad00 <tcp_create_segment+0xd4>)
 800ac54:	f001 fd3a 	bl	800c6cc <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac58:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ac5c:	2003      	movs	r0, #3
 800ac5e:	f7fd fa2b 	bl	80080b8 <memp_malloc>
 800ac62:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac64:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ac68:	b928      	cbnz	r0, 800ac76 <tcp_create_segment+0x4a>
    pbuf_free(p);
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7fd fcb0 	bl	80085d0 <pbuf_free>
}
 800ac70:	4620      	mov	r0, r4
 800ac72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800ac76:	2300      	movs	r3, #0
  seg->flags = optflags;
 800ac78:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ac7c:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800ac80:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ac84:	8933      	ldrh	r3, [r6, #8]
 800ac86:	4553      	cmp	r3, sl
 800ac88:	d205      	bcs.n	800ac96 <tcp_create_segment+0x6a>
 800ac8a:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <tcp_create_segment+0xcc>)
 800ac8c:	22b0      	movs	r2, #176	; 0xb0
 800ac8e:	491e      	ldr	r1, [pc, #120]	; (800ad08 <tcp_create_segment+0xdc>)
 800ac90:	481b      	ldr	r0, [pc, #108]	; (800ad00 <tcp_create_segment+0xd4>)
 800ac92:	f001 fd1b 	bl	800c6cc <iprintf>
  seg->len = p->tot_len - optlen;
 800ac96:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ac98:	4630      	mov	r0, r6
 800ac9a:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800ac9c:	eba3 030a 	sub.w	r3, r3, sl
 800aca0:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800aca2:	f7fd fc5e 	bl	8008562 <pbuf_add_header>
 800aca6:	4606      	mov	r6, r0
 800aca8:	b120      	cbz	r0, 800acb4 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800acaa:	4620      	mov	r0, r4
    return NULL;
 800acac:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800acae:	f7fe f8b7 	bl	8008e20 <tcp_seg_free>
    return NULL;
 800acb2:	e7dd      	b.n	800ac70 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800acb4:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800acb6:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800acb8:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800acbc:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800acc0:	f7fc ff48 	bl	8007b54 <lwip_htons>
 800acc4:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800acc8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800accc:	8b38      	ldrh	r0, [r7, #24]
 800acce:	f7fc ff41 	bl	8007b54 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800acd2:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800acd4:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800acd8:	4648      	mov	r0, r9
 800acda:	f7fc ff3e 	bl	8007b5a <lwip_htonl>
 800acde:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ace0:	08a8      	lsrs	r0, r5, #2
 800ace2:	68e7      	ldr	r7, [r4, #12]
 800ace4:	3005      	adds	r0, #5
 800ace6:	ea48 3000 	orr.w	r0, r8, r0, lsl #12
 800acea:	f7fc ff33 	bl	8007b54 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800acee:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800acf0:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800acf2:	749e      	strb	r6, [r3, #18]
 800acf4:	74de      	strb	r6, [r3, #19]
  return seg;
 800acf6:	e7bb      	b.n	800ac70 <tcp_create_segment+0x44>
 800acf8:	080131a9 	.word	0x080131a9
 800acfc:	08013257 	.word	0x08013257
 800ad00:	0801153a 	.word	0x0801153a
 800ad04:	08013277 	.word	0x08013277
 800ad08:	08013298 	.word	0x08013298

0800ad0c <tcp_output_alloc_header_common.constprop.4>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ad0c:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ad0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ad12:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ad14:	4606      	mov	r6, r0
 800ad16:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ad18:	2022      	movs	r0, #34	; 0x22
 800ad1a:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ad1e:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ad20:	f7fd fcb8 	bl	8008694 <pbuf_alloc>
  if (p != NULL) {
 800ad24:	4605      	mov	r5, r0
 800ad26:	b348      	cbz	r0, 800ad7c <tcp_output_alloc_header_common.constprop.4+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ad28:	8943      	ldrh	r3, [r0, #10]
 800ad2a:	2b13      	cmp	r3, #19
 800ad2c:	d806      	bhi.n	800ad3c <tcp_output_alloc_header_common.constprop.4+0x30>
 800ad2e:	4b15      	ldr	r3, [pc, #84]	; (800ad84 <tcp_output_alloc_header_common.constprop.4+0x78>)
 800ad30:	f240 7224 	movw	r2, #1828	; 0x724
 800ad34:	4914      	ldr	r1, [pc, #80]	; (800ad88 <tcp_output_alloc_header_common.constprop.4+0x7c>)
 800ad36:	4815      	ldr	r0, [pc, #84]	; (800ad8c <tcp_output_alloc_header_common.constprop.4+0x80>)
 800ad38:	f001 fcc8 	bl	800c6cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ad3c:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800ad3e:	4640      	mov	r0, r8
 800ad40:	f7fc ff08 	bl	8007b54 <lwip_htons>
 800ad44:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ad46:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ad4a:	f7fc ff03 	bl	8007b54 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800ad4e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800ad50:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800ad52:	4630      	mov	r0, r6
 800ad54:	f7fc ff01 	bl	8007b5a <lwip_htonl>
 800ad58:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ad5a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ad5e:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800ad62:	f7fc fef7 	bl	8007b54 <lwip_htons>
 800ad66:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ad68:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800ad6c:	f7fc fef2 	bl	8007b54 <lwip_htons>
    tcphdr->chksum = 0;
 800ad70:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800ad72:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800ad74:	7423      	strb	r3, [r4, #16]
 800ad76:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800ad78:	74a3      	strb	r3, [r4, #18]
 800ad7a:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad82:	bf00      	nop
 800ad84:	080131a9 	.word	0x080131a9
 800ad88:	080132ad 	.word	0x080132ad
 800ad8c:	0801153a 	.word	0x0801153a

0800ad90 <tcp_output_alloc_header.constprop.3>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800ad90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ad92:	460d      	mov	r5, r1
 800ad94:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ad96:	4604      	mov	r4, r0
 800ad98:	b930      	cbnz	r0, 800ada8 <tcp_output_alloc_header.constprop.3+0x18>
 800ad9a:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <tcp_output_alloc_header.constprop.3+0x40>)
 800ad9c:	f240 7242 	movw	r2, #1858	; 0x742
 800ada0:	490c      	ldr	r1, [pc, #48]	; (800add4 <tcp_output_alloc_header.constprop.3+0x44>)
 800ada2:	480d      	ldr	r0, [pc, #52]	; (800add8 <tcp_output_alloc_header.constprop.3+0x48>)
 800ada4:	f001 fc92 	bl	800c6cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ada8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800adaa:	4629      	mov	r1, r5
 800adac:	8ae3      	ldrh	r3, [r4, #22]
 800adae:	9202      	str	r2, [sp, #8]
 800adb0:	2210      	movs	r2, #16
 800adb2:	9201      	str	r2, [sp, #4]
 800adb4:	8b22      	ldrh	r2, [r4, #24]
 800adb6:	9200      	str	r2, [sp, #0]
 800adb8:	4632      	mov	r2, r6
 800adba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800adbc:	f7ff ffa6 	bl	800ad0c <tcp_output_alloc_header_common.constprop.4>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800adc0:	b118      	cbz	r0, 800adca <tcp_output_alloc_header.constprop.3+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800adc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800adc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adc6:	4413      	add	r3, r2
 800adc8:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800adca:	b004      	add	sp, #16
 800adcc:	bd70      	pop	{r4, r5, r6, pc}
 800adce:	bf00      	nop
 800add0:	080131a9 	.word	0x080131a9
 800add4:	080132db 	.word	0x080132db
 800add8:	0801153a 	.word	0x0801153a

0800addc <tcp_output_fill_options.isra.0.constprop.5>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800addc:	b930      	cbnz	r0, 800adec <tcp_output_fill_options.isra.0.constprop.5+0x10>
 800adde:	4b04      	ldr	r3, [pc, #16]	; (800adf0 <tcp_output_fill_options.isra.0.constprop.5+0x14>)
 800ade0:	f240 7256 	movw	r2, #1878	; 0x756
 800ade4:	4903      	ldr	r1, [pc, #12]	; (800adf4 <tcp_output_fill_options.isra.0.constprop.5+0x18>)
 800ade6:	4804      	ldr	r0, [pc, #16]	; (800adf8 <tcp_output_fill_options.isra.0.constprop.5+0x1c>)
 800ade8:	f001 bc70 	b.w	800c6cc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	080131a9 	.word	0x080131a9
 800adf4:	08013300 	.word	0x08013300
 800adf8:	0801153a 	.word	0x0801153a

0800adfc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800adfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adfe:	4604      	mov	r4, r0
 800ae00:	b085      	sub	sp, #20
 800ae02:	4617      	mov	r7, r2
 800ae04:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ae06:	460d      	mov	r5, r1
 800ae08:	b931      	cbnz	r1, 800ae18 <tcp_output_control_segment+0x1c>
 800ae0a:	4b15      	ldr	r3, [pc, #84]	; (800ae60 <tcp_output_control_segment+0x64>)
 800ae0c:	f240 7287 	movw	r2, #1927	; 0x787
 800ae10:	4914      	ldr	r1, [pc, #80]	; (800ae64 <tcp_output_control_segment+0x68>)
 800ae12:	4815      	ldr	r0, [pc, #84]	; (800ae68 <tcp_output_control_segment+0x6c>)
 800ae14:	f001 fc5a 	bl	800c6cc <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ae18:	b164      	cbz	r4, 800ae34 <tcp_output_control_segment+0x38>
 800ae1a:	7a20      	ldrb	r0, [r4, #8]
 800ae1c:	b150      	cbz	r0, 800ae34 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800ae1e:	f7fd fb1f 	bl	8008460 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800ae22:	b968      	cbnz	r0, 800ae40 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800ae24:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f7fd fbd1 	bl	80085d0 <pbuf_free>
  return err;
}
 800ae2e:	4620      	mov	r0, r4
 800ae30:	b005      	add	sp, #20
 800ae32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7fc f8e9 	bl	800700c <ip4_route>
  if (netif == NULL) {
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d0f2      	beq.n	800ae24 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800ae3e:	b164      	cbz	r4, 800ae5a <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800ae40:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800ae42:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ae44:	2206      	movs	r2, #6
 800ae46:	9002      	str	r0, [sp, #8]
 800ae48:	4639      	mov	r1, r7
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	e9cd 4200 	strd	r4, r2, [sp]
 800ae50:	4632      	mov	r2, r6
 800ae52:	f7fc fa49 	bl	80072e8 <ip4_output_if>
 800ae56:	4604      	mov	r4, r0
 800ae58:	e7e6      	b.n	800ae28 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800ae5a:	23ff      	movs	r3, #255	; 0xff
 800ae5c:	e7f2      	b.n	800ae44 <tcp_output_control_segment+0x48>
 800ae5e:	bf00      	nop
 800ae60:	080131a9 	.word	0x080131a9
 800ae64:	08013326 	.word	0x08013326
 800ae68:	0801153a 	.word	0x0801153a

0800ae6c <tcp_write>:
{
 800ae6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	b091      	sub	sp, #68	; 0x44
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ae72:	4604      	mov	r4, r0
{
 800ae74:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800ae76:	2300      	movs	r3, #0
{
 800ae78:	9108      	str	r1, [sp, #32]
 800ae7a:	9205      	str	r2, [sp, #20]
  u16_t oversize = 0;
 800ae7c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ae80:	b958      	cbnz	r0, 800ae9a <tcp_write+0x2e>
 800ae82:	4baf      	ldr	r3, [pc, #700]	; (800b140 <tcp_write+0x2d4>)
 800ae84:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ae88:	49ae      	ldr	r1, [pc, #696]	; (800b144 <tcp_write+0x2d8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ae8a:	48af      	ldr	r0, [pc, #700]	; (800b148 <tcp_write+0x2dc>)
 800ae8c:	f001 fc1e 	bl	800c6cc <iprintf>
 800ae90:	f06f 000f 	mvn.w	r0, #15
}
 800ae94:	b011      	add	sp, #68	; 0x44
 800ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ae9a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800ae9c:	9307      	str	r3, [sp, #28]
 800ae9e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800aea2:	9a07      	ldr	r2, [sp, #28]
 800aea4:	085b      	lsrs	r3, r3, #1
 800aea6:	4293      	cmp	r3, r2
 800aea8:	bf28      	it	cs
 800aeaa:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bf18      	it	ne
 800aeb0:	461a      	movne	r2, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800aeb2:	9b08      	ldr	r3, [sp, #32]
  mss_local = mss_local ? mss_local : pcb->mss;
 800aeb4:	9207      	str	r2, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800aeb6:	b923      	cbnz	r3, 800aec2 <tcp_write+0x56>
 800aeb8:	4ba1      	ldr	r3, [pc, #644]	; (800b140 <tcp_write+0x2d4>)
 800aeba:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800aebe:	49a3      	ldr	r1, [pc, #652]	; (800b14c <tcp_write+0x2e0>)
 800aec0:	e7e3      	b.n	800ae8a <tcp_write+0x1e>
  if ((pcb->state != ESTABLISHED) &&
 800aec2:	7d03      	ldrb	r3, [r0, #20]
 800aec4:	2b07      	cmp	r3, #7
 800aec6:	d003      	beq.n	800aed0 <tcp_write+0x64>
      (pcb->state != CLOSE_WAIT) &&
 800aec8:	3b02      	subs	r3, #2
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	f200 8250 	bhi.w	800b370 <tcp_write+0x504>
  } else if (len == 0) {
 800aed0:	9b05      	ldr	r3, [sp, #20]
 800aed2:	b1eb      	cbz	r3, 800af10 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800aed4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800aed8:	9a05      	ldr	r2, [sp, #20]
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d206      	bcs.n	800aeec <tcp_write+0x80>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aede:	8b63      	ldrh	r3, [r4, #26]
 800aee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee4:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800aee6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeea:	e7d3      	b.n	800ae94 <tcp_write+0x28>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800aeec:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800aef0:	2a07      	cmp	r2, #7
 800aef2:	d8f4      	bhi.n	800aede <tcp_write+0x72>
 800aef4:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800aef6:	2a00      	cmp	r2, #0
 800aef8:	f000 809f 	beq.w	800b03a <tcp_write+0x1ce>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800aefc:	b943      	cbnz	r3, 800af10 <tcp_write+0xa4>
 800aefe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800af00:	b933      	cbnz	r3, 800af10 <tcp_write+0xa4>
 800af02:	4b8f      	ldr	r3, [pc, #572]	; (800b140 <tcp_write+0x2d4>)
 800af04:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800af08:	4991      	ldr	r1, [pc, #580]	; (800b150 <tcp_write+0x2e4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800af0a:	488f      	ldr	r0, [pc, #572]	; (800b148 <tcp_write+0x2dc>)
 800af0c:	f001 fbde 	bl	800c6cc <iprintf>
  queuelen = pcb->snd_queuelen;
 800af10:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800af14:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800af18:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800af1a:	f1b8 0f00 	cmp.w	r8, #0
 800af1e:	f000 80c3 	beq.w	800b0a8 <tcp_write+0x23c>
 800af22:	4646      	mov	r6, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800af24:	f8d6 b000 	ldr.w	fp, [r6]
 800af28:	f1bb 0f00 	cmp.w	fp, #0
 800af2c:	f040 808f 	bne.w	800b04e <tcp_write+0x1e2>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800af30:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800af32:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800af34:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800af36:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800af38:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800af3c:	442b      	add	r3, r5
 800af3e:	429a      	cmp	r2, r3
 800af40:	da06      	bge.n	800af50 <tcp_write+0xe4>
 800af42:	4b7f      	ldr	r3, [pc, #508]	; (800b140 <tcp_write+0x2d4>)
 800af44:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800af48:	4982      	ldr	r1, [pc, #520]	; (800b154 <tcp_write+0x2e8>)
 800af4a:	487f      	ldr	r0, [pc, #508]	; (800b148 <tcp_write+0x2dc>)
 800af4c:	f001 fbbe 	bl	800c6cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800af50:	8937      	ldrh	r7, [r6, #8]
 800af52:	9b07      	ldr	r3, [sp, #28]
 800af54:	1bdf      	subs	r7, r3, r7
 800af56:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800af58:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800af5c:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800af5e:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800af62:	2d00      	cmp	r5, #0
 800af64:	d075      	beq.n	800b052 <tcp_write+0x1e6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800af66:	42bd      	cmp	r5, r7
 800af68:	d906      	bls.n	800af78 <tcp_write+0x10c>
 800af6a:	4b75      	ldr	r3, [pc, #468]	; (800b140 <tcp_write+0x2d4>)
 800af6c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800af70:	4979      	ldr	r1, [pc, #484]	; (800b158 <tcp_write+0x2ec>)
 800af72:	4875      	ldr	r0, [pc, #468]	; (800b148 <tcp_write+0x2dc>)
 800af74:	f001 fbaa 	bl	800c6cc <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800af78:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800af7c:	46b0      	mov	r8, r6
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800af7e:	9a05      	ldr	r2, [sp, #20]
 800af80:	429a      	cmp	r2, r3
 800af82:	bf28      	it	cs
 800af84:	461a      	movcs	r2, r3
 800af86:	42ba      	cmp	r2, r7
 800af88:	4615      	mov	r5, r2
 800af8a:	bfa8      	it	ge
 800af8c:	463d      	movge	r5, r7
      space -= oversize_used;
 800af8e:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800af90:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800af92:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800af94:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800af98:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800af9c:	b153      	cbz	r3, 800afb4 <tcp_write+0x148>
 800af9e:	9b05      	ldr	r3, [sp, #20]
 800afa0:	429d      	cmp	r5, r3
 800afa2:	f000 81e8 	beq.w	800b376 <tcp_write+0x50a>
 800afa6:	4b66      	ldr	r3, [pc, #408]	; (800b140 <tcp_write+0x2d4>)
 800afa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afac:	496b      	ldr	r1, [pc, #428]	; (800b15c <tcp_write+0x2f0>)
 800afae:	4866      	ldr	r0, [pc, #408]	; (800b148 <tcp_write+0x2dc>)
 800afb0:	f001 fb8c 	bl	800c6cc <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800afb4:	9b05      	ldr	r3, [sp, #20]
 800afb6:	429d      	cmp	r5, r3
 800afb8:	f080 81dd 	bcs.w	800b376 <tcp_write+0x50a>
 800afbc:	2f00      	cmp	r7, #0
 800afbe:	f000 8166 	beq.w	800b28e <tcp_write+0x422>
 800afc2:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 800afc6:	f1ba 0f00 	cmp.w	sl, #0
 800afca:	f000 8161 	beq.w	800b290 <tcp_write+0x424>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800afce:	eba3 0a05 	sub.w	sl, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800afd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800afd4:	45ba      	cmp	sl, r7
 800afd6:	bfa8      	it	ge
 800afd8:	46ba      	movge	sl, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800afda:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800afdc:	fa1f f88a 	uxth.w	r8, sl
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800afe0:	d539      	bpl.n	800b056 <tcp_write+0x1ea>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800afe2:	2301      	movs	r3, #1
 800afe4:	463a      	mov	r2, r7
 800afe6:	4641      	mov	r1, r8
 800afe8:	2000      	movs	r0, #0
 800afea:	9302      	str	r3, [sp, #8]
 800afec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afee:	e9cd 4300 	strd	r4, r3, [sp]
 800aff2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800aff6:	f7ff fdcf 	bl	800ab98 <tcp_pbuf_prealloc>
 800affa:	4681      	mov	r9, r0
 800affc:	2800      	cmp	r0, #0
 800affe:	f000 81b4 	beq.w	800b36a <tcp_write+0x4fe>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b002:	9b08      	ldr	r3, [sp, #32]
 800b004:	4642      	mov	r2, r8
 800b006:	6840      	ldr	r0, [r0, #4]
 800b008:	1959      	adds	r1, r3, r5
 800b00a:	f001 fb4c 	bl	800c6a6 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b00e:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 800b010:	f7fd fc14 	bl	800883c <pbuf_clen>
 800b014:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 800b016:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 800b01a:	4403      	add	r3, r0
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	9306      	str	r3, [sp, #24]
      pos += seglen;
 800b020:	eb05 0708 	add.w	r7, r5, r8
 800b024:	46b0      	mov	r8, r6
 800b026:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      pos += seglen;
 800b02a:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b02e:	f003 0301 	and.w	r3, r3, #1
      pos += seglen;
 800b032:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b036:	930c      	str	r3, [sp, #48]	; 0x30
 800b038:	e102      	b.n	800b240 <tcp_write+0x3d4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b03a:	b91b      	cbnz	r3, 800b044 <tcp_write+0x1d8>
 800b03c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f43f af66 	beq.w	800af10 <tcp_write+0xa4>
 800b044:	4b3e      	ldr	r3, [pc, #248]	; (800b140 <tcp_write+0x2d4>)
 800b046:	f240 1259 	movw	r2, #345	; 0x159
 800b04a:	4945      	ldr	r1, [pc, #276]	; (800b160 <tcp_write+0x2f4>)
 800b04c:	e75d      	b.n	800af0a <tcp_write+0x9e>
 800b04e:	465e      	mov	r6, fp
 800b050:	e768      	b.n	800af24 <tcp_write+0xb8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b052:	46a8      	mov	r8, r5
 800b054:	e7a0      	b.n	800af98 <tcp_write+0x12c>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b056:	6873      	ldr	r3, [r6, #4]
 800b058:	f8d3 9000 	ldr.w	r9, [r3]
 800b05c:	f1b9 0f00 	cmp.w	r9, #0
 800b060:	d113      	bne.n	800b08a <tcp_write+0x21e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b062:	7b1a      	ldrb	r2, [r3, #12]
 800b064:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800b068:	d111      	bne.n	800b08e <tcp_write+0x222>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b06a:	895a      	ldrh	r2, [r3, #10]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b070:	9a08      	ldr	r2, [sp, #32]
 800b072:	429a      	cmp	r2, r3
 800b074:	d10b      	bne.n	800b08e <tcp_write+0x222>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b076:	b135      	cbz	r5, 800b086 <tcp_write+0x21a>
 800b078:	4b31      	ldr	r3, [pc, #196]	; (800b140 <tcp_write+0x2d4>)
 800b07a:	f240 2231 	movw	r2, #561	; 0x231
 800b07e:	4939      	ldr	r1, [pc, #228]	; (800b164 <tcp_write+0x2f8>)
 800b080:	4831      	ldr	r0, [pc, #196]	; (800b148 <tcp_write+0x2dc>)
 800b082:	f001 fb23 	bl	800c6cc <iprintf>
          extendlen = seglen;
 800b086:	46c2      	mov	sl, r8
 800b088:	e7ca      	b.n	800b020 <tcp_write+0x1b4>
 800b08a:	464b      	mov	r3, r9
 800b08c:	e7e4      	b.n	800b058 <tcp_write+0x1ec>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b08e:	2201      	movs	r2, #1
 800b090:	4641      	mov	r1, r8
 800b092:	2000      	movs	r0, #0
 800b094:	f7fd fafe 	bl	8008694 <pbuf_alloc>
 800b098:	4681      	mov	r9, r0
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f000 8165 	beq.w	800b36a <tcp_write+0x4fe>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b0a0:	9b08      	ldr	r3, [sp, #32]
 800b0a2:	442b      	add	r3, r5
 800b0a4:	6043      	str	r3, [r0, #4]
 800b0a6:	e7b3      	b.n	800b010 <tcp_write+0x1a4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b0a8:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800b0ac:	2f00      	cmp	r7, #0
 800b0ae:	f000 80f2 	beq.w	800b296 <tcp_write+0x42a>
 800b0b2:	4b23      	ldr	r3, [pc, #140]	; (800b140 <tcp_write+0x2d4>)
 800b0b4:	f240 224b 	movw	r2, #587	; 0x24b
 800b0b8:	492b      	ldr	r1, [pc, #172]	; (800b168 <tcp_write+0x2fc>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b0ba:	4646      	mov	r6, r8
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b0bc:	4822      	ldr	r0, [pc, #136]	; (800b148 <tcp_write+0x2dc>)
  u16_t extendlen = 0;
 800b0be:	46c2      	mov	sl, r8
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b0c0:	f001 fb04 	bl	800c6cc <iprintf>
  u16_t oversize_used = 0;
 800b0c4:	4645      	mov	r5, r8
  u16_t pos = 0; /* position in 'arg' data */
 800b0c6:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 800b0c8:	46c1      	mov	r9, r8
 800b0ca:	e7ad      	b.n	800b028 <tcp_write+0x1bc>
    u16_t left = len - pos;
 800b0cc:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b0ce:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 800b0d0:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	bf28      	it	cs
 800b0d8:	4613      	movcs	r3, r2
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d045      	beq.n	800b170 <tcp_write+0x304>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b0e4:	fabb f38b 	clz	r3, fp
 800b0e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ea:	2036      	movs	r0, #54	; 0x36
 800b0ec:	095b      	lsrs	r3, r3, #5
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f2:	e9cd 4300 	strd	r4, r3, [sp]
 800b0f6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b0fa:	f7ff fd4d 	bl	800ab98 <tcp_pbuf_prealloc>
 800b0fe:	4680      	mov	r8, r0
 800b100:	2800      	cmp	r0, #0
 800b102:	d055      	beq.n	800b1b0 <tcp_write+0x344>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b104:	8943      	ldrh	r3, [r0, #10]
 800b106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b108:	4293      	cmp	r3, r2
 800b10a:	d206      	bcs.n	800b11a <tcp_write+0x2ae>
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <tcp_write+0x2d4>)
 800b10e:	f240 2267 	movw	r2, #615	; 0x267
 800b112:	4916      	ldr	r1, [pc, #88]	; (800b16c <tcp_write+0x300>)
 800b114:	480c      	ldr	r0, [pc, #48]	; (800b148 <tcp_write+0x2dc>)
 800b116:	f001 fad9 	bl	800c6cc <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b11a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b11e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800b122:	19d9      	adds	r1, r3, r7
 800b124:	f001 fabf 	bl	800c6a6 <memcpy>
    queuelen += pbuf_clen(p);
 800b128:	4640      	mov	r0, r8
 800b12a:	f7fd fb87 	bl	800883c <pbuf_clen>
 800b12e:	9b06      	ldr	r3, [sp, #24]
 800b130:	4403      	add	r3, r0
 800b132:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b134:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800b136:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b138:	d963      	bls.n	800b202 <tcp_write+0x396>
      pbuf_free(p);
 800b13a:	4640      	mov	r0, r8
 800b13c:	e036      	b.n	800b1ac <tcp_write+0x340>
 800b13e:	bf00      	nop
 800b140:	080131a9 	.word	0x080131a9
 800b144:	0801334f 	.word	0x0801334f
 800b148:	0801153a 	.word	0x0801153a
 800b14c:	08013366 	.word	0x08013366
 800b150:	08013397 	.word	0x08013397
 800b154:	08013403 	.word	0x08013403
 800b158:	0801341a 	.word	0x0801341a
 800b15c:	0801343a 	.word	0x0801343a
 800b160:	080133d1 	.word	0x080133d1
 800b164:	08013458 	.word	0x08013458
 800b168:	08013481 	.word	0x08013481
 800b16c:	080134b0 	.word	0x080134b0
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b170:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b174:	b133      	cbz	r3, 800b184 <tcp_write+0x318>
 800b176:	4b83      	ldr	r3, [pc, #524]	; (800b384 <tcp_write+0x518>)
 800b178:	f240 2271 	movw	r2, #625	; 0x271
 800b17c:	4982      	ldr	r1, [pc, #520]	; (800b388 <tcp_write+0x51c>)
 800b17e:	4883      	ldr	r0, [pc, #524]	; (800b38c <tcp_write+0x520>)
 800b180:	f001 faa4 	bl	800c6cc <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b184:	2201      	movs	r2, #1
 800b186:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b188:	2036      	movs	r0, #54	; 0x36
 800b18a:	f7fd fa83 	bl	8008694 <pbuf_alloc>
 800b18e:	b178      	cbz	r0, 800b1b0 <tcp_write+0x344>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b190:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b192:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b194:	900d      	str	r0, [sp, #52]	; 0x34
 800b196:	443a      	add	r2, r7
 800b198:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b19a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b19e:	2036      	movs	r0, #54	; 0x36
 800b1a0:	f7fd fa78 	bl	8008694 <pbuf_alloc>
 800b1a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1a6:	4680      	mov	r8, r0
 800b1a8:	bb38      	cbnz	r0, 800b1fa <tcp_write+0x38e>
        pbuf_free(p2);
 800b1aa:	4618      	mov	r0, r3
      pbuf_free(p);
 800b1ac:	f7fd fa10 	bl	80085d0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b1b0:	8b63      	ldrh	r3, [r4, #26]
 800b1b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1b6:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800b1b8:	f1b9 0f00 	cmp.w	r9, #0
 800b1bc:	d002      	beq.n	800b1c4 <tcp_write+0x358>
    pbuf_free(concat_p);
 800b1be:	4648      	mov	r0, r9
 800b1c0:	f7fd fa06 	bl	80085d0 <pbuf_free>
  if (queue != NULL) {
 800b1c4:	f1bb 0f00 	cmp.w	fp, #0
 800b1c8:	d002      	beq.n	800b1d0 <tcp_write+0x364>
    tcp_segs_free(queue);
 800b1ca:	4658      	mov	r0, fp
 800b1cc:	f7fd fe36 	bl	8008e3c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b1d0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f43f ae86 	beq.w	800aee6 <tcp_write+0x7a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b1da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f47f ae82 	bne.w	800aee6 <tcp_write+0x7a>
 800b1e2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f47f ae7e 	bne.w	800aee6 <tcp_write+0x7a>
 800b1ea:	4b66      	ldr	r3, [pc, #408]	; (800b384 <tcp_write+0x518>)
 800b1ec:	f44f 724a 	mov.w	r2, #808	; 0x328
 800b1f0:	4967      	ldr	r1, [pc, #412]	; (800b390 <tcp_write+0x524>)
 800b1f2:	4866      	ldr	r0, [pc, #408]	; (800b38c <tcp_write+0x520>)
 800b1f4:	f001 fa6a 	bl	800c6cc <iprintf>
 800b1f8:	e675      	b.n	800aee6 <tcp_write+0x7a>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	f7fd fb3a 	bl	8008874 <pbuf_cat>
 800b200:	e792      	b.n	800b128 <tcp_write+0x2bc>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b202:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b204:	2200      	movs	r2, #0
 800b206:	4641      	mov	r1, r8
 800b208:	4620      	mov	r0, r4
 800b20a:	9200      	str	r2, [sp, #0]
 800b20c:	443b      	add	r3, r7
 800b20e:	f7ff fd0d 	bl	800ac2c <tcp_create_segment>
 800b212:	4680      	mov	r8, r0
 800b214:	2800      	cmp	r0, #0
 800b216:	d0cb      	beq.n	800b1b0 <tcp_write+0x344>
    if (queue == NULL) {
 800b218:	f1bb 0f00 	cmp.w	fp, #0
 800b21c:	d035      	beq.n	800b28a <tcp_write+0x41e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b220:	b933      	cbnz	r3, 800b230 <tcp_write+0x3c4>
 800b222:	4b58      	ldr	r3, [pc, #352]	; (800b384 <tcp_write+0x518>)
 800b224:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b228:	495a      	ldr	r1, [pc, #360]	; (800b394 <tcp_write+0x528>)
 800b22a:	4858      	ldr	r0, [pc, #352]	; (800b38c <tcp_write+0x520>)
 800b22c:	f001 fa4e 	bl	800c6cc <iprintf>
      prev_seg->next = seg;
 800b230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b232:	f8c3 8000 	str.w	r8, [r3]
    pos += seglen;
 800b236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b238:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b23c:	441f      	add	r7, r3
 800b23e:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800b240:	9b05      	ldr	r3, [sp, #20]
 800b242:	429f      	cmp	r7, r3
 800b244:	f4ff af42 	bcc.w	800b0cc <tcp_write+0x260>
  if (oversize_used > 0) {
 800b248:	b125      	cbz	r5, 800b254 <tcp_write+0x3e8>
    for (p = last_unsent->p; p; p = p->next) {
 800b24a:	6877      	ldr	r7, [r6, #4]
 800b24c:	bb67      	cbnz	r7, 800b2a8 <tcp_write+0x43c>
    last_unsent->len += oversize_used;
 800b24e:	8933      	ldrh	r3, [r6, #8]
 800b250:	441d      	add	r5, r3
 800b252:	8135      	strh	r5, [r6, #8]
  pcb->unsent_oversize = oversize;
 800b254:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b258:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800b25c:	f1b9 0f00 	cmp.w	r9, #0
 800b260:	d033      	beq.n	800b2ca <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b262:	b936      	cbnz	r6, 800b272 <tcp_write+0x406>
 800b264:	4b47      	ldr	r3, [pc, #284]	; (800b384 <tcp_write+0x518>)
 800b266:	f240 22e1 	movw	r2, #737	; 0x2e1
 800b26a:	494b      	ldr	r1, [pc, #300]	; (800b398 <tcp_write+0x52c>)
 800b26c:	4847      	ldr	r0, [pc, #284]	; (800b38c <tcp_write+0x520>)
 800b26e:	f001 fa2d 	bl	800c6cc <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800b272:	4649      	mov	r1, r9
 800b274:	6870      	ldr	r0, [r6, #4]
 800b276:	f7fd fafd 	bl	8008874 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b27a:	8933      	ldrh	r3, [r6, #8]
 800b27c:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800b280:	4413      	add	r3, r2
 800b282:	8133      	strh	r3, [r6, #8]
    last_unsent->next = queue;
 800b284:	f8c6 b000 	str.w	fp, [r6]
 800b288:	e041      	b.n	800b30e <tcp_write+0x4a2>
 800b28a:	4683      	mov	fp, r0
 800b28c:	e7d3      	b.n	800b236 <tcp_write+0x3ca>
  u16_t extendlen = 0;
 800b28e:	46ba      	mov	sl, r7
 800b290:	462f      	mov	r7, r5
  struct pbuf *concat_p = NULL;
 800b292:	46d1      	mov	r9, sl
 800b294:	e6c8      	b.n	800b028 <tcp_write+0x1bc>
  u16_t extendlen = 0;
 800b296:	46ba      	mov	sl, r7
  u16_t oversize_used = 0;
 800b298:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b29a:	463e      	mov	r6, r7
  struct pbuf *concat_p = NULL;
 800b29c:	46b9      	mov	r9, r7
 800b29e:	e6c3      	b.n	800b028 <tcp_write+0x1bc>
  if (oversize_used > 0) {
 800b2a0:	f04f 0a00 	mov.w	sl, #0
 800b2a4:	46d1      	mov	r9, sl
 800b2a6:	e7d0      	b.n	800b24a <tcp_write+0x3de>
      p->tot_len += oversize_used;
 800b2a8:	893b      	ldrh	r3, [r7, #8]
 800b2aa:	442b      	add	r3, r5
 800b2ac:	813b      	strh	r3, [r7, #8]
      if (p->next == NULL) {
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	b94b      	cbnz	r3, 800b2c6 <tcp_write+0x45a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	462a      	mov	r2, r5
 800b2b6:	8978      	ldrh	r0, [r7, #10]
 800b2b8:	9908      	ldr	r1, [sp, #32]
 800b2ba:	4418      	add	r0, r3
 800b2bc:	f001 f9f3 	bl	800c6a6 <memcpy>
        p->len += oversize_used;
 800b2c0:	897b      	ldrh	r3, [r7, #10]
 800b2c2:	442b      	add	r3, r5
 800b2c4:	817b      	strh	r3, [r7, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b2c6:	683f      	ldr	r7, [r7, #0]
 800b2c8:	e7c0      	b.n	800b24c <tcp_write+0x3e0>
  } else if (extendlen > 0) {
 800b2ca:	f1ba 0f00 	cmp.w	sl, #0
 800b2ce:	d01a      	beq.n	800b306 <tcp_write+0x49a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b2d0:	b10e      	cbz	r6, 800b2d6 <tcp_write+0x46a>
 800b2d2:	6873      	ldr	r3, [r6, #4]
 800b2d4:	b933      	cbnz	r3, 800b2e4 <tcp_write+0x478>
 800b2d6:	4b2b      	ldr	r3, [pc, #172]	; (800b384 <tcp_write+0x518>)
 800b2d8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800b2dc:	492f      	ldr	r1, [pc, #188]	; (800b39c <tcp_write+0x530>)
 800b2de:	482b      	ldr	r0, [pc, #172]	; (800b38c <tcp_write+0x520>)
 800b2e0:	f001 f9f4 	bl	800c6cc <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b2e4:	6873      	ldr	r3, [r6, #4]
 800b2e6:	891a      	ldrh	r2, [r3, #8]
 800b2e8:	6819      	ldr	r1, [r3, #0]
 800b2ea:	4452      	add	r2, sl
 800b2ec:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 800b2ee:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b2f0:	b939      	cbnz	r1, 800b302 <tcp_write+0x496>
    p->len += extendlen;
 800b2f2:	895a      	ldrh	r2, [r3, #10]
 800b2f4:	4452      	add	r2, sl
 800b2f6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b2f8:	8933      	ldrh	r3, [r6, #8]
 800b2fa:	449a      	add	sl, r3
 800b2fc:	f8a6 a008 	strh.w	sl, [r6, #8]
 800b300:	e7c0      	b.n	800b284 <tcp_write+0x418>
      p->tot_len += extendlen;
 800b302:	460b      	mov	r3, r1
 800b304:	e7ef      	b.n	800b2e6 <tcp_write+0x47a>
  if (last_unsent == NULL) {
 800b306:	2e00      	cmp	r6, #0
 800b308:	d1bc      	bne.n	800b284 <tcp_write+0x418>
    pcb->unsent = queue;
 800b30a:	f8c4 b06c 	str.w	fp, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800b30e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b310:	9a05      	ldr	r2, [sp, #20]
 800b312:	4413      	add	r3, r2
 800b314:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b316:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800b31a:	1a9b      	subs	r3, r3, r2
 800b31c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b320:	9b06      	ldr	r3, [sp, #24]
 800b322:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b326:	b153      	cbz	r3, 800b33e <tcp_write+0x4d2>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b328:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b32a:	b943      	cbnz	r3, 800b33e <tcp_write+0x4d2>
 800b32c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b32e:	b933      	cbnz	r3, 800b33e <tcp_write+0x4d2>
 800b330:	4b14      	ldr	r3, [pc, #80]	; (800b384 <tcp_write+0x518>)
 800b332:	f240 3213 	movw	r2, #787	; 0x313
 800b336:	4916      	ldr	r1, [pc, #88]	; (800b390 <tcp_write+0x524>)
 800b338:	4814      	ldr	r0, [pc, #80]	; (800b38c <tcp_write+0x520>)
 800b33a:	f001 f9c7 	bl	800c6cc <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b33e:	f1b8 0f00 	cmp.w	r8, #0
 800b342:	d010      	beq.n	800b366 <tcp_write+0x4fa>
 800b344:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800b348:	2800      	cmp	r0, #0
 800b34a:	f43f ada3 	beq.w	800ae94 <tcp_write+0x28>
 800b34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b350:	f013 0502 	ands.w	r5, r3, #2
 800b354:	d107      	bne.n	800b366 <tcp_write+0x4fa>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b356:	8984      	ldrh	r4, [r0, #12]
 800b358:	2008      	movs	r0, #8
 800b35a:	f7fc fbfb 	bl	8007b54 <lwip_htons>
 800b35e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b362:	4320      	orrs	r0, r4
 800b364:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800b366:	2000      	movs	r0, #0
 800b368:	e594      	b.n	800ae94 <tcp_write+0x28>
      p->tot_len += extendlen;
 800b36a:	f04f 0900 	mov.w	r9, #0
 800b36e:	e71f      	b.n	800b1b0 <tcp_write+0x344>
    return ERR_CONN;
 800b370:	f06f 000a 	mvn.w	r0, #10
 800b374:	e58e      	b.n	800ae94 <tcp_write+0x28>
  if (oversize_used > 0) {
 800b376:	2d00      	cmp	r5, #0
 800b378:	d192      	bne.n	800b2a0 <tcp_write+0x434>
  pcb->unsent_oversize = oversize;
 800b37a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b37e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800b382:	e77f      	b.n	800b284 <tcp_write+0x418>
 800b384:	080131a9 	.word	0x080131a9
 800b388:	080134ee 	.word	0x080134ee
 800b38c:	0801153a 	.word	0x0801153a
 800b390:	0801357a 	.word	0x0801357a
 800b394:	080134fc 	.word	0x080134fc
 800b398:	0801350d 	.word	0x0801350d
 800b39c:	08013545 	.word	0x08013545

0800b3a0 <tcp_split_unsent_seg>:
{
 800b3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	4689      	mov	r9, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	b930      	cbnz	r0, 800b3b8 <tcp_split_unsent_seg+0x18>
 800b3aa:	4b5a      	ldr	r3, [pc, #360]	; (800b514 <tcp_split_unsent_seg+0x174>)
 800b3ac:	f240 324b 	movw	r2, #843	; 0x34b
 800b3b0:	4959      	ldr	r1, [pc, #356]	; (800b518 <tcp_split_unsent_seg+0x178>)
 800b3b2:	485a      	ldr	r0, [pc, #360]	; (800b51c <tcp_split_unsent_seg+0x17c>)
 800b3b4:	f001 f98a 	bl	800c6cc <iprintf>
  useg = pcb->unsent;
 800b3b8:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800b3ba:	b914      	cbnz	r4, 800b3c2 <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c0:	e00b      	b.n	800b3da <tcp_split_unsent_seg+0x3a>
  if (split == 0) {
 800b3c2:	f1b9 0f00 	cmp.w	r9, #0
 800b3c6:	d10b      	bne.n	800b3e0 <tcp_split_unsent_seg+0x40>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b3c8:	4b52      	ldr	r3, [pc, #328]	; (800b514 <tcp_split_unsent_seg+0x174>)
 800b3ca:	f240 3253 	movw	r2, #851	; 0x353
 800b3ce:	4954      	ldr	r1, [pc, #336]	; (800b520 <tcp_split_unsent_seg+0x180>)
 800b3d0:	4852      	ldr	r0, [pc, #328]	; (800b51c <tcp_split_unsent_seg+0x17c>)
 800b3d2:	f001 f97b 	bl	800c6cc <iprintf>
    return ERR_VAL;
 800b3d6:	f06f 0005 	mvn.w	r0, #5
}
 800b3da:	b003      	add	sp, #12
 800b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800b3e0:	8923      	ldrh	r3, [r4, #8]
 800b3e2:	454b      	cmp	r3, r9
 800b3e4:	d801      	bhi.n	800b3ea <tcp_split_unsent_seg+0x4a>
    return ERR_OK;
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	e7f7      	b.n	800b3da <tcp_split_unsent_seg+0x3a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b3ea:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800b3ec:	454b      	cmp	r3, r9
 800b3ee:	d206      	bcs.n	800b3fe <tcp_split_unsent_seg+0x5e>
 800b3f0:	4b48      	ldr	r3, [pc, #288]	; (800b514 <tcp_split_unsent_seg+0x174>)
 800b3f2:	f240 325b 	movw	r2, #859	; 0x35b
 800b3f6:	494b      	ldr	r1, [pc, #300]	; (800b524 <tcp_split_unsent_seg+0x184>)
 800b3f8:	4848      	ldr	r0, [pc, #288]	; (800b51c <tcp_split_unsent_seg+0x17c>)
 800b3fa:	f001 f967 	bl	800c6cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b3fe:	8923      	ldrh	r3, [r4, #8]
 800b400:	b933      	cbnz	r3, 800b410 <tcp_split_unsent_seg+0x70>
 800b402:	4b44      	ldr	r3, [pc, #272]	; (800b514 <tcp_split_unsent_seg+0x174>)
 800b404:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b408:	4947      	ldr	r1, [pc, #284]	; (800b528 <tcp_split_unsent_seg+0x188>)
 800b40a:	4844      	ldr	r0, [pc, #272]	; (800b51c <tcp_split_unsent_seg+0x17c>)
 800b40c:	f001 f95e 	bl	800c6cc <iprintf>
  optflags = useg->flags;
 800b410:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b414:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800b418:	8927      	ldrh	r7, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b41a:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b41c:	ea4f 068b 	mov.w	r6, fp, lsl #2
  remainder = useg->len - split;
 800b420:	eba7 0709 	sub.w	r7, r7, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b424:	f006 0604 	and.w	r6, r6, #4
  remainder = useg->len - split;
 800b428:	b2bf      	uxth	r7, r7
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b42a:	19b9      	adds	r1, r7, r6
 800b42c:	b289      	uxth	r1, r1
 800b42e:	f7fd f931 	bl	8008694 <pbuf_alloc>
  if (p == NULL) {
 800b432:	4682      	mov	sl, r0
 800b434:	2800      	cmp	r0, #0
 800b436:	d0c1      	beq.n	800b3bc <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800b438:	6860      	ldr	r0, [r4, #4]
 800b43a:	8922      	ldrh	r2, [r4, #8]
 800b43c:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b43e:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 800b442:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b444:	463a      	mov	r2, r7
 800b446:	4431      	add	r1, r6
  offset = useg->p->tot_len - useg->len + split;
 800b448:	444b      	add	r3, r9
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	f7fd fad8 	bl	8008a00 <pbuf_copy_partial>
 800b450:	42b8      	cmp	r0, r7
 800b452:	d15b      	bne.n	800b50c <tcp_split_unsent_seg+0x16c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b454:	68e3      	ldr	r3, [r4, #12]
 800b456:	8998      	ldrh	r0, [r3, #12]
 800b458:	f7fc fb7c 	bl	8007b54 <lwip_htons>
 800b45c:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800b45e:	f016 0808 	ands.w	r8, r6, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b462:	bf0e      	itee	eq
 800b464:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800b468:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800b46c:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 800b470:	07f3      	lsls	r3, r6, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b472:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800b474:	bf48      	it	mi
 800b476:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b47a:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800b47c:	bf48      	it	mi
 800b47e:	f006 06fe 	andmi.w	r6, r6, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b482:	f7fc fb6a 	bl	8007b5a <lwip_htonl>
 800b486:	4642      	mov	r2, r8
 800b488:	eb09 0300 	add.w	r3, r9, r0
 800b48c:	f8cd b000 	str.w	fp, [sp]
 800b490:	4651      	mov	r1, sl
 800b492:	4628      	mov	r0, r5
 800b494:	f7ff fbca 	bl	800ac2c <tcp_create_segment>
  if (seg == NULL) {
 800b498:	4680      	mov	r8, r0
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d036      	beq.n	800b50c <tcp_split_unsent_seg+0x16c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b49e:	6860      	ldr	r0, [r4, #4]
 800b4a0:	f7fd f9cc 	bl	800883c <pbuf_clen>
 800b4a4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800b4a8:	1a18      	subs	r0, r3, r0
 800b4aa:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b4ae:	6860      	ldr	r0, [r4, #4]
 800b4b0:	8901      	ldrh	r1, [r0, #8]
 800b4b2:	1bc9      	subs	r1, r1, r7
 800b4b4:	b289      	uxth	r1, r1
 800b4b6:	f7fd f969 	bl	800878c <pbuf_realloc>
  useg->len -= remainder;
 800b4ba:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b4bc:	4630      	mov	r0, r6
  useg->len -= remainder;
 800b4be:	1bdf      	subs	r7, r3, r7
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b4c0:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800b4c2:	8127      	strh	r7, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b4c4:	899f      	ldrh	r7, [r3, #12]
 800b4c6:	f7fc fb45 	bl	8007b54 <lwip_htons>
 800b4ca:	68e3      	ldr	r3, [r4, #12]
 800b4cc:	4338      	orrs	r0, r7
 800b4ce:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b4d0:	6860      	ldr	r0, [r4, #4]
 800b4d2:	f7fd f9b3 	bl	800883c <pbuf_clen>
 800b4d6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800b4da:	4418      	add	r0, r3
 800b4dc:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b4e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4e4:	f7fd f9aa 	bl	800883c <pbuf_clen>
 800b4e8:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800b4ec:	4418      	add	r0, r3
  seg->next = useg->next;
 800b4ee:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b4f0:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800b4f4:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800b4f8:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800b4fc:	f8d8 0000 	ldr.w	r0, [r8]
 800b500:	2800      	cmp	r0, #0
 800b502:	f47f af70 	bne.w	800b3e6 <tcp_split_unsent_seg+0x46>
    pcb->unsent_oversize = 0;
 800b506:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
 800b50a:	e766      	b.n	800b3da <tcp_split_unsent_seg+0x3a>
    pbuf_free(p);
 800b50c:	4650      	mov	r0, sl
 800b50e:	f7fd f85f 	bl	80085d0 <pbuf_free>
 800b512:	e753      	b.n	800b3bc <tcp_split_unsent_seg+0x1c>
 800b514:	080131a9 	.word	0x080131a9
 800b518:	08013598 	.word	0x08013598
 800b51c:	0801153a 	.word	0x0801153a
 800b520:	080135ba 	.word	0x080135ba
 800b524:	080135dc 	.word	0x080135dc
 800b528:	080135e9 	.word	0x080135e9

0800b52c <tcp_enqueue_flags>:
{
 800b52c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b530:	f011 0803 	ands.w	r8, r1, #3
{
 800b534:	4604      	mov	r4, r0
 800b536:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b538:	d106      	bne.n	800b548 <tcp_enqueue_flags+0x1c>
 800b53a:	4b3e      	ldr	r3, [pc, #248]	; (800b634 <tcp_enqueue_flags+0x108>)
 800b53c:	f240 4212 	movw	r2, #1042	; 0x412
 800b540:	493d      	ldr	r1, [pc, #244]	; (800b638 <tcp_enqueue_flags+0x10c>)
 800b542:	483e      	ldr	r0, [pc, #248]	; (800b63c <tcp_enqueue_flags+0x110>)
 800b544:	f001 f8c2 	bl	800c6cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b548:	b934      	cbnz	r4, 800b558 <tcp_enqueue_flags+0x2c>
 800b54a:	4b3a      	ldr	r3, [pc, #232]	; (800b634 <tcp_enqueue_flags+0x108>)
 800b54c:	f240 4213 	movw	r2, #1043	; 0x413
 800b550:	493b      	ldr	r1, [pc, #236]	; (800b640 <tcp_enqueue_flags+0x114>)
 800b552:	483a      	ldr	r0, [pc, #232]	; (800b63c <tcp_enqueue_flags+0x110>)
 800b554:	f001 f8ba 	bl	800c6cc <iprintf>
  if (flags & TCP_SYN) {
 800b558:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b55c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b560:	2036      	movs	r0, #54	; 0x36
 800b562:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800b566:	4649      	mov	r1, r9
 800b568:	f7fd f894 	bl	8008694 <pbuf_alloc>
 800b56c:	4605      	mov	r5, r0
 800b56e:	b940      	cbnz	r0, 800b582 <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b570:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800b572:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b57a:	8363      	strh	r3, [r4, #26]
}
 800b57c:	b003      	add	sp, #12
 800b57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b582:	8943      	ldrh	r3, [r0, #10]
 800b584:	454b      	cmp	r3, r9
 800b586:	d206      	bcs.n	800b596 <tcp_enqueue_flags+0x6a>
 800b588:	4b2a      	ldr	r3, [pc, #168]	; (800b634 <tcp_enqueue_flags+0x108>)
 800b58a:	f240 423a 	movw	r2, #1082	; 0x43a
 800b58e:	492d      	ldr	r1, [pc, #180]	; (800b644 <tcp_enqueue_flags+0x118>)
 800b590:	482a      	ldr	r0, [pc, #168]	; (800b63c <tcp_enqueue_flags+0x110>)
 800b592:	f001 f89b 	bl	800c6cc <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b596:	9700      	str	r7, [sp, #0]
 800b598:	4629      	mov	r1, r5
 800b59a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b59c:	4632      	mov	r2, r6
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f7ff fb44 	bl	800ac2c <tcp_create_segment>
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d0e2      	beq.n	800b570 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b5aa:	68c3      	ldr	r3, [r0, #12]
 800b5ac:	079a      	lsls	r2, r3, #30
 800b5ae:	d006      	beq.n	800b5be <tcp_enqueue_flags+0x92>
 800b5b0:	4b20      	ldr	r3, [pc, #128]	; (800b634 <tcp_enqueue_flags+0x108>)
 800b5b2:	f240 4242 	movw	r2, #1090	; 0x442
 800b5b6:	4924      	ldr	r1, [pc, #144]	; (800b648 <tcp_enqueue_flags+0x11c>)
 800b5b8:	4820      	ldr	r0, [pc, #128]	; (800b63c <tcp_enqueue_flags+0x110>)
 800b5ba:	f001 f887 	bl	800c6cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b5be:	892b      	ldrh	r3, [r5, #8]
 800b5c0:	b133      	cbz	r3, 800b5d0 <tcp_enqueue_flags+0xa4>
 800b5c2:	4b1c      	ldr	r3, [pc, #112]	; (800b634 <tcp_enqueue_flags+0x108>)
 800b5c4:	f240 4243 	movw	r2, #1091	; 0x443
 800b5c8:	4920      	ldr	r1, [pc, #128]	; (800b64c <tcp_enqueue_flags+0x120>)
 800b5ca:	481c      	ldr	r0, [pc, #112]	; (800b63c <tcp_enqueue_flags+0x110>)
 800b5cc:	f001 f87e 	bl	800c6cc <iprintf>
  if (pcb->unsent == NULL) {
 800b5d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b5d2:	bb4b      	cbnz	r3, 800b628 <tcp_enqueue_flags+0xfc>
    pcb->unsent = seg;
 800b5d4:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b5dc:	f1b8 0f00 	cmp.w	r8, #0
 800b5e0:	d002      	beq.n	800b5e8 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800b5e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800b5e8:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b5ea:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800b5ec:	bf42      	ittt	mi
 800b5ee:	8b63      	ldrhmi	r3, [r4, #26]
 800b5f0:	f043 0320 	orrmi.w	r3, r3, #32
 800b5f4:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b5f6:	f7fd f921 	bl	800883c <pbuf_clen>
 800b5fa:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b5fe:	4418      	add	r0, r3
 800b600:	b280      	uxth	r0, r0
 800b602:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b606:	2800      	cmp	r0, #0
 800b608:	d0b8      	beq.n	800b57c <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b60a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b60c:	b948      	cbnz	r0, 800b622 <tcp_enqueue_flags+0xf6>
 800b60e:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800b610:	2c00      	cmp	r4, #0
 800b612:	d1b3      	bne.n	800b57c <tcp_enqueue_flags+0x50>
 800b614:	4b07      	ldr	r3, [pc, #28]	; (800b634 <tcp_enqueue_flags+0x108>)
 800b616:	f240 4266 	movw	r2, #1126	; 0x466
 800b61a:	490d      	ldr	r1, [pc, #52]	; (800b650 <tcp_enqueue_flags+0x124>)
 800b61c:	4807      	ldr	r0, [pc, #28]	; (800b63c <tcp_enqueue_flags+0x110>)
 800b61e:	f001 f855 	bl	800c6cc <iprintf>
  return ERR_OK;
 800b622:	2000      	movs	r0, #0
 800b624:	e7aa      	b.n	800b57c <tcp_enqueue_flags+0x50>
 800b626:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	d1fb      	bne.n	800b626 <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800b62e:	601d      	str	r5, [r3, #0]
 800b630:	e7d1      	b.n	800b5d6 <tcp_enqueue_flags+0xaa>
 800b632:	bf00      	nop
 800b634:	080131a9 	.word	0x080131a9
 800b638:	080135f7 	.word	0x080135f7
 800b63c:	0801153a 	.word	0x0801153a
 800b640:	0801364c 	.word	0x0801364c
 800b644:	0801366b 	.word	0x0801366b
 800b648:	080136a4 	.word	0x080136a4
 800b64c:	080136bc 	.word	0x080136bc
 800b650:	080136e6 	.word	0x080136e6

0800b654 <tcp_send_fin>:
{
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b656:	4605      	mov	r5, r0
 800b658:	b930      	cbnz	r0, 800b668 <tcp_send_fin+0x14>
 800b65a:	4b14      	ldr	r3, [pc, #80]	; (800b6ac <tcp_send_fin+0x58>)
 800b65c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b660:	4913      	ldr	r1, [pc, #76]	; (800b6b0 <tcp_send_fin+0x5c>)
 800b662:	4814      	ldr	r0, [pc, #80]	; (800b6b4 <tcp_send_fin+0x60>)
 800b664:	f001 f832 	bl	800c6cc <iprintf>
  if (pcb->unsent != NULL) {
 800b668:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800b66a:	b934      	cbnz	r4, 800b67a <tcp_send_fin+0x26>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b66c:	4628      	mov	r0, r5
 800b66e:	2101      	movs	r1, #1
}
 800b670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b674:	f7ff bf5a 	b.w	800b52c <tcp_enqueue_flags>
 800b678:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b67a:	6823      	ldr	r3, [r4, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1fb      	bne.n	800b678 <tcp_send_fin+0x24>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b680:	68e3      	ldr	r3, [r4, #12]
 800b682:	8998      	ldrh	r0, [r3, #12]
 800b684:	f7fc fa66 	bl	8007b54 <lwip_htons>
 800b688:	f010 0707 	ands.w	r7, r0, #7
 800b68c:	d1ee      	bne.n	800b66c <tcp_send_fin+0x18>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b68e:	68e3      	ldr	r3, [r4, #12]
 800b690:	2001      	movs	r0, #1
 800b692:	899e      	ldrh	r6, [r3, #12]
 800b694:	f7fc fa5e 	bl	8007b54 <lwip_htons>
 800b698:	68e3      	ldr	r3, [r4, #12]
 800b69a:	4330      	orrs	r0, r6
 800b69c:	8198      	strh	r0, [r3, #12]
}
 800b69e:	4638      	mov	r0, r7
      tcp_set_flags(pcb, TF_FIN);
 800b6a0:	8b6b      	ldrh	r3, [r5, #26]
 800b6a2:	f043 0320 	orr.w	r3, r3, #32
 800b6a6:	836b      	strh	r3, [r5, #26]
}
 800b6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	080131a9 	.word	0x080131a9
 800b6b0:	0801370e 	.word	0x0801370e
 800b6b4:	0801153a 	.word	0x0801153a

0800b6b8 <tcp_rexmit_rto_prepare>:
{
 800b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b6bc:	4604      	mov	r4, r0
 800b6be:	b930      	cbnz	r0, 800b6ce <tcp_rexmit_rto_prepare+0x16>
 800b6c0:	4b1c      	ldr	r3, [pc, #112]	; (800b734 <tcp_rexmit_rto_prepare+0x7c>)
 800b6c2:	f240 6263 	movw	r2, #1635	; 0x663
 800b6c6:	491c      	ldr	r1, [pc, #112]	; (800b738 <tcp_rexmit_rto_prepare+0x80>)
 800b6c8:	481c      	ldr	r0, [pc, #112]	; (800b73c <tcp_rexmit_rto_prepare+0x84>)
 800b6ca:	f000 ffff 	bl	800c6cc <iprintf>
  if (pcb->unacked == NULL) {
 800b6ce:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800b6d0:	b945      	cbnz	r5, 800b6e4 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800b6d2:	f06f 0005 	mvn.w	r0, #5
}
 800b6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800b6da:	f7ff fa45 	bl	800ab68 <tcp_output_segment_busy>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d1f7      	bne.n	800b6d2 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b6e2:	682d      	ldr	r5, [r5, #0]
 800b6e4:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800b6e6:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1f6      	bne.n	800b6da <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800b6ec:	f7ff fa3c 	bl	800ab68 <tcp_output_segment_busy>
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d1ed      	bne.n	800b6d2 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800b6f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b6f8:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800b6fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800b6fc:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800b700:	8b63      	ldrh	r3, [r4, #26]
 800b702:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b706:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b708:	68eb      	ldr	r3, [r5, #12]
 800b70a:	6858      	ldr	r0, [r3, #4]
 800b70c:	f7fc fa25 	bl	8007b5a <lwip_htonl>
 800b710:	68eb      	ldr	r3, [r5, #12]
 800b712:	4607      	mov	r7, r0
 800b714:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800b718:	8998      	ldrh	r0, [r3, #12]
 800b71a:	f7fc fa1b 	bl	8007b54 <lwip_htons>
 800b71e:	f010 0003 	ands.w	r0, r0, #3
 800b722:	4447      	add	r7, r8
  pcb->rttest = 0;
 800b724:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b726:	bf18      	it	ne
 800b728:	2001      	movne	r0, #1
 800b72a:	4438      	add	r0, r7
 800b72c:	64e0      	str	r0, [r4, #76]	; 0x4c
  return ERR_OK;
 800b72e:	4630      	mov	r0, r6
 800b730:	e7d1      	b.n	800b6d6 <tcp_rexmit_rto_prepare+0x1e>
 800b732:	bf00      	nop
 800b734:	080131a9 	.word	0x080131a9
 800b738:	08013728 	.word	0x08013728
 800b73c:	0801153a 	.word	0x0801153a

0800b740 <tcp_rexmit>:
{
 800b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b742:	4604      	mov	r4, r0
 800b744:	b930      	cbnz	r0, 800b754 <tcp_rexmit+0x14>
 800b746:	4b1b      	ldr	r3, [pc, #108]	; (800b7b4 <tcp_rexmit+0x74>)
 800b748:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b74c:	491a      	ldr	r1, [pc, #104]	; (800b7b8 <tcp_rexmit+0x78>)
 800b74e:	481b      	ldr	r0, [pc, #108]	; (800b7bc <tcp_rexmit+0x7c>)
 800b750:	f000 ffbc 	bl	800c6cc <iprintf>
  if (pcb->unacked == NULL) {
 800b754:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800b756:	b915      	cbnz	r5, 800b75e <tcp_rexmit+0x1e>
    return ERR_VAL;
 800b758:	f06f 0005 	mvn.w	r0, #5
}
 800b75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800b75e:	4628      	mov	r0, r5
 800b760:	f7ff fa02 	bl	800ab68 <tcp_output_segment_busy>
 800b764:	2800      	cmp	r0, #0
 800b766:	d1f7      	bne.n	800b758 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800b768:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800b76a:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800b76e:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800b770:	6833      	ldr	r3, [r6, #0]
 800b772:	b983      	cbnz	r3, 800b796 <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800b774:	6833      	ldr	r3, [r6, #0]
 800b776:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800b778:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800b77a:	682b      	ldr	r3, [r5, #0]
 800b77c:	b90b      	cbnz	r3, 800b782 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800b77e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800b782:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800b786:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800b788:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800b78a:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800b78c:	bf1c      	itt	ne
 800b78e:	3301      	addne	r3, #1
 800b790:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800b794:	e7e2      	b.n	800b75c <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	6858      	ldr	r0, [r3, #4]
 800b79a:	f7fc f9de 	bl	8007b5a <lwip_htonl>
 800b79e:	68eb      	ldr	r3, [r5, #12]
 800b7a0:	4607      	mov	r7, r0
 800b7a2:	6858      	ldr	r0, [r3, #4]
 800b7a4:	f7fc f9d9 	bl	8007b5a <lwip_htonl>
 800b7a8:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	dae2      	bge.n	800b774 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800b7ae:	6836      	ldr	r6, [r6, #0]
 800b7b0:	e7de      	b.n	800b770 <tcp_rexmit+0x30>
 800b7b2:	bf00      	nop
 800b7b4:	080131a9 	.word	0x080131a9
 800b7b8:	0801374c 	.word	0x0801374c
 800b7bc:	0801153a 	.word	0x0801153a

0800b7c0 <tcp_rexmit_fast>:
{
 800b7c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	b930      	cbnz	r0, 800b7d4 <tcp_rexmit_fast+0x14>
 800b7c6:	4b17      	ldr	r3, [pc, #92]	; (800b824 <tcp_rexmit_fast+0x64>)
 800b7c8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b7cc:	4916      	ldr	r1, [pc, #88]	; (800b828 <tcp_rexmit_fast+0x68>)
 800b7ce:	4817      	ldr	r0, [pc, #92]	; (800b82c <tcp_rexmit_fast+0x6c>)
 800b7d0:	f000 ff7c 	bl	800c6cc <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b7d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b7d6:	b31b      	cbz	r3, 800b820 <tcp_rexmit_fast+0x60>
 800b7d8:	8b63      	ldrh	r3, [r4, #26]
 800b7da:	075b      	lsls	r3, r3, #29
 800b7dc:	d420      	bmi.n	800b820 <tcp_rexmit_fast+0x60>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f7ff ffae 	bl	800b740 <tcp_rexmit>
 800b7e4:	b9e0      	cbnz	r0, 800b820 <tcp_rexmit_fast+0x60>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b7e6:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800b7ea:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	bf38      	it	cc
 800b7f2:	085a      	lsrcc	r2, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b7f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b7f6:	bf28      	it	cs
 800b7f8:	0852      	lsrcs	r2, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b7fa:	0059      	lsls	r1, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b7fc:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b800:	428a      	cmp	r2, r1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b802:	440b      	add	r3, r1
        pcb->ssthresh = 2 * pcb->mss;
 800b804:	bf38      	it	cc
 800b806:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b80a:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800b80e:	4413      	add	r3, r2
 800b810:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b814:	8b63      	ldrh	r3, [r4, #26]
 800b816:	f043 0304 	orr.w	r3, r3, #4
 800b81a:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800b820:	bd10      	pop	{r4, pc}
 800b822:	bf00      	nop
 800b824:	080131a9 	.word	0x080131a9
 800b828:	08013764 	.word	0x08013764
 800b82c:	0801153a 	.word	0x0801153a

0800b830 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b834:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b836:	4606      	mov	r6, r0
 800b838:	468a      	mov	sl, r1
 800b83a:	4617      	mov	r7, r2
 800b83c:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b840:	461c      	mov	r4, r3
{
 800b842:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b846:	b933      	cbnz	r3, 800b856 <tcp_rst+0x26>
 800b848:	4b17      	ldr	r3, [pc, #92]	; (800b8a8 <tcp_rst+0x78>)
 800b84a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b84e:	4917      	ldr	r1, [pc, #92]	; (800b8ac <tcp_rst+0x7c>)
 800b850:	4817      	ldr	r0, [pc, #92]	; (800b8b0 <tcp_rst+0x80>)
 800b852:	f000 ff3b 	bl	800c6cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b856:	b935      	cbnz	r5, 800b866 <tcp_rst+0x36>
 800b858:	4b13      	ldr	r3, [pc, #76]	; (800b8a8 <tcp_rst+0x78>)
 800b85a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b85e:	4915      	ldr	r1, [pc, #84]	; (800b8b4 <tcp_rst+0x84>)
 800b860:	4813      	ldr	r0, [pc, #76]	; (800b8b0 <tcp_rst+0x80>)
 800b862:	f000 ff33 	bl	800c6cc <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b866:	4650      	mov	r0, sl
 800b868:	f7fc f977 	bl	8007b5a <lwip_htonl>
 800b86c:	2314      	movs	r3, #20
 800b86e:	f646 020b 	movw	r2, #26635	; 0x680b
 800b872:	f8cd 9000 	str.w	r9, [sp]
 800b876:	2100      	movs	r1, #0
 800b878:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b87c:	4602      	mov	r2, r0
 800b87e:	4643      	mov	r3, r8
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff fa43 	bl	800ad0c <tcp_output_alloc_header_common.constprop.4>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b886:	4607      	mov	r7, r0
 800b888:	b150      	cbz	r0, 800b8a0 <tcp_rst+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b88a:	f7ff faa7 	bl	800addc <tcp_output_fill_options.isra.0.constprop.5>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b88e:	462b      	mov	r3, r5
 800b890:	4622      	mov	r2, r4
 800b892:	4639      	mov	r1, r7
 800b894:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b896:	b004      	add	sp, #16
 800b898:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b89c:	f7ff baae 	b.w	800adfc <tcp_output_control_segment>
}
 800b8a0:	b004      	add	sp, #16
 800b8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a6:	bf00      	nop
 800b8a8:	080131a9 	.word	0x080131a9
 800b8ac:	08013781 	.word	0x08013781
 800b8b0:	0801153a 	.word	0x0801153a
 800b8b4:	0801379b 	.word	0x0801379b

0800b8b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b8b8:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	b930      	cbnz	r0, 800b8cc <tcp_send_empty_ack+0x14>
 800b8be:	4b14      	ldr	r3, [pc, #80]	; (800b910 <tcp_send_empty_ack+0x58>)
 800b8c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b8c4:	4913      	ldr	r1, [pc, #76]	; (800b914 <tcp_send_empty_ack+0x5c>)
 800b8c6:	4814      	ldr	r0, [pc, #80]	; (800b918 <tcp_send_empty_ack+0x60>)
 800b8c8:	f000 ff00 	bl	800c6cc <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b8cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b8ce:	f7fc f944 	bl	8007b5a <lwip_htonl>
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f7ff fa5a 	bl	800ad90 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 800b8dc:	4605      	mov	r5, r0
 800b8de:	b930      	cbnz	r0, 800b8ee <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8e0:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b8e2:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8e6:	f043 0303 	orr.w	r3, r3, #3
 800b8ea:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800b8ec:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b8ee:	f7ff fa75 	bl	800addc <tcp_output_fill_options.isra.0.constprop.5>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b8f2:	1d23      	adds	r3, r4, #4
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f7ff fa7f 	bl	800adfc <tcp_output_control_segment>
 800b8fe:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800b900:	b118      	cbz	r0, 800b90a <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b902:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b906:	8363      	strh	r3, [r4, #26]
 800b908:	e7f0      	b.n	800b8ec <tcp_send_empty_ack+0x34>
 800b90a:	f023 0303 	bic.w	r3, r3, #3
 800b90e:	e7fa      	b.n	800b906 <tcp_send_empty_ack+0x4e>
 800b910:	080131a9 	.word	0x080131a9
 800b914:	080137b6 	.word	0x080137b6
 800b918:	0801153a 	.word	0x0801153a

0800b91c <tcp_output>:
{
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b920:	4604      	mov	r4, r0
{
 800b922:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b924:	b930      	cbnz	r0, 800b934 <tcp_output+0x18>
 800b926:	4b8f      	ldr	r3, [pc, #572]	; (800bb64 <tcp_output+0x248>)
 800b928:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b92c:	498e      	ldr	r1, [pc, #568]	; (800bb68 <tcp_output+0x24c>)
 800b92e:	488f      	ldr	r0, [pc, #572]	; (800bb6c <tcp_output+0x250>)
 800b930:	f000 fecc 	bl	800c6cc <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b934:	7d23      	ldrb	r3, [r4, #20]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d106      	bne.n	800b948 <tcp_output+0x2c>
 800b93a:	4b8a      	ldr	r3, [pc, #552]	; (800bb64 <tcp_output+0x248>)
 800b93c:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800b940:	498b      	ldr	r1, [pc, #556]	; (800bb70 <tcp_output+0x254>)
 800b942:	488a      	ldr	r0, [pc, #552]	; (800bb6c <tcp_output+0x250>)
 800b944:	f000 fec2 	bl	800c6cc <iprintf>
  if (tcp_input_pcb == pcb) {
 800b948:	4b8a      	ldr	r3, [pc, #552]	; (800bb74 <tcp_output+0x258>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	42a3      	cmp	r3, r4
 800b94e:	f000 8170 	beq.w	800bc32 <tcp_output+0x316>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b952:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 800b956:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 800b95a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b95c:	429f      	cmp	r7, r3
 800b95e:	bf28      	it	cs
 800b960:	461f      	movcs	r7, r3
  if (seg == NULL) {
 800b962:	b94d      	cbnz	r5, 800b978 <tcp_output+0x5c>
    if (pcb->flags & TF_ACK_NOW) {
 800b964:	8b63      	ldrh	r3, [r4, #26]
 800b966:	0798      	lsls	r0, r3, #30
 800b968:	f140 815f 	bpl.w	800bc2a <tcp_output+0x30e>
      return tcp_send_empty_ack(pcb);
 800b96c:	4620      	mov	r0, r4
}
 800b96e:	b007      	add	sp, #28
 800b970:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800b974:	f7ff bfa0 	b.w	800b8b8 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b978:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b97a:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b97e:	b328      	cbz	r0, 800b9cc <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800b980:	f7fc fd6e 	bl	8008460 <netif_get_by_index>
    return ip_route(src, dst);
 800b984:	4680      	mov	r8, r0
  if (netif == NULL) {
 800b986:	2800      	cmp	r0, #0
 800b988:	f000 816c 	beq.w	800bc64 <tcp_output+0x348>
  if (ip_addr_isany(&pcb->local_ip)) {
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	b90b      	cbnz	r3, 800b994 <tcp_output+0x78>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b990:	6843      	ldr	r3, [r0, #4]
 800b992:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b994:	68eb      	ldr	r3, [r5, #12]
 800b996:	6858      	ldr	r0, [r3, #4]
 800b998:	f7fc f8df 	bl	8007b5a <lwip_htonl>
 800b99c:	892b      	ldrh	r3, [r5, #8]
 800b99e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b9a0:	1a9b      	subs	r3, r3, r2
 800b9a2:	4418      	add	r0, r3
 800b9a4:	42b8      	cmp	r0, r7
 800b9a6:	d915      	bls.n	800b9d4 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b9a8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800b9ac:	42bb      	cmp	r3, r7
 800b9ae:	d1d9      	bne.n	800b964 <tcp_output+0x48>
 800b9b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1d6      	bne.n	800b964 <tcp_output+0x48>
 800b9b6:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1d2      	bne.n	800b964 <tcp_output+0x48>
      pcb->persist_cnt = 0;
 800b9be:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_backoff = 1;
 800b9c2:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800b9c6:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800b9ca:	e7cb      	b.n	800b964 <tcp_output+0x48>
    return ip_route(src, dst);
 800b9cc:	4648      	mov	r0, r9
 800b9ce:	f7fb fb1d 	bl	800700c <ip4_route>
 800b9d2:	e7d7      	b.n	800b984 <tcp_output+0x68>
  pcb->persist_backoff = 0;
 800b9d4:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800b9d6:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800b9d8:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800b9dc:	b92e      	cbnz	r6, 800b9ea <tcp_output+0xce>
    LWIP_ASSERT("RST not expected here!",
 800b9de:	f8df a184 	ldr.w	sl, [pc, #388]	; 800bb64 <tcp_output+0x248>
 800b9e2:	f8df b188 	ldr.w	fp, [pc, #392]	; 800bb6c <tcp_output+0x250>
 800b9e6:	e0e3      	b.n	800bbb0 <tcp_output+0x294>
 800b9e8:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800b9ea:	6833      	ldr	r3, [r6, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1fb      	bne.n	800b9e8 <tcp_output+0xcc>
 800b9f0:	e7f5      	b.n	800b9de <tcp_output+0xc2>
    if (pcb->state != SYN_SENT) {
 800b9f2:	7d23      	ldrb	r3, [r4, #20]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d009      	beq.n	800ba0c <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b9f8:	68eb      	ldr	r3, [r5, #12]
 800b9fa:	2010      	movs	r0, #16
 800b9fc:	899b      	ldrh	r3, [r3, #12]
 800b9fe:	9304      	str	r3, [sp, #16]
 800ba00:	f7fc f8a8 	bl	8007b54 <lwip_htons>
 800ba04:	9b04      	ldr	r3, [sp, #16]
 800ba06:	68ea      	ldr	r2, [r5, #12]
 800ba08:	4318      	orrs	r0, r3
 800ba0a:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	f7ff f8ab 	bl	800ab68 <tcp_output_segment_busy>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d170      	bne.n	800baf8 <tcp_output+0x1dc>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ba16:	68eb      	ldr	r3, [r5, #12]
 800ba18:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	f7fc f89d 	bl	8007b5a <lwip_htonl>
 800ba20:	9b04      	ldr	r3, [sp, #16]
 800ba22:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ba24:	68eb      	ldr	r3, [r5, #12]
 800ba26:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800ba28:	9304      	str	r3, [sp, #16]
 800ba2a:	f7fc f893 	bl	8007b54 <lwip_htons>
 800ba2e:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ba30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ba32:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ba34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba36:	4413      	add	r3, r2
 800ba38:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ba3a:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ba3c:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ba3e:	07d2      	lsls	r2, r2, #31
 800ba40:	d44a      	bmi.n	800bad8 <tcp_output+0x1bc>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ba42:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800ba46:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800ba4a:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800ba4c:	bfbc      	itt	lt
 800ba4e:	2300      	movlt	r3, #0
 800ba50:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800ba52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba54:	b94b      	cbnz	r3, 800ba6a <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800ba56:	4948      	ldr	r1, [pc, #288]	; (800bb78 <tcp_output+0x25c>)
 800ba58:	68eb      	ldr	r3, [r5, #12]
 800ba5a:	6809      	ldr	r1, [r1, #0]
 800ba5c:	9204      	str	r2, [sp, #16]
 800ba5e:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ba60:	6858      	ldr	r0, [r3, #4]
 800ba62:	f7fc f87a 	bl	8007b5a <lwip_htonl>
 800ba66:	9a04      	ldr	r2, [sp, #16]
 800ba68:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ba6a:	6869      	ldr	r1, [r5, #4]
 800ba6c:	68eb      	ldr	r3, [r5, #12]
 800ba6e:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800ba70:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ba74:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800ba76:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ba78:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800ba7a:	ebac 0c00 	sub.w	ip, ip, r0
 800ba7e:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800ba82:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800ba86:	ebac 0000 	sub.w	r0, ip, r0
 800ba8a:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	7419      	strb	r1, [r3, #16]
 800ba90:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ba92:	7aa9      	ldrb	r1, [r5, #10]
 800ba94:	0089      	lsls	r1, r1, #2
 800ba96:	f001 0104 	and.w	r1, r1, #4
 800ba9a:	3114      	adds	r1, #20
 800ba9c:	440b      	add	r3, r1
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d006      	beq.n	800bab0 <tcp_output+0x194>
 800baa2:	4653      	mov	r3, sl
 800baa4:	f240 621c 	movw	r2, #1564	; 0x61c
 800baa8:	4934      	ldr	r1, [pc, #208]	; (800bb7c <tcp_output+0x260>)
 800baaa:	4658      	mov	r0, fp
 800baac:	f000 fe0e 	bl	800c6cc <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bab0:	2206      	movs	r2, #6
 800bab2:	7ae3      	ldrb	r3, [r4, #11]
 800bab4:	f8cd 8008 	str.w	r8, [sp, #8]
 800bab8:	4621      	mov	r1, r4
 800baba:	9201      	str	r2, [sp, #4]
 800babc:	7aa2      	ldrb	r2, [r4, #10]
 800babe:	9200      	str	r2, [sp, #0]
 800bac0:	464a      	mov	r2, r9
 800bac2:	6868      	ldr	r0, [r5, #4]
 800bac4:	f7fb fc10 	bl	80072e8 <ip4_output_if>
    if (err != ERR_OK) {
 800bac8:	b1b0      	cbz	r0, 800baf8 <tcp_output+0x1dc>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800baca:	8b63      	ldrh	r3, [r4, #26]
 800bacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bad0:	8363      	strh	r3, [r4, #26]
}
 800bad2:	b007      	add	sp, #28
 800bad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bad8:	464a      	mov	r2, r9
 800bada:	4641      	mov	r1, r8
 800badc:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	f7fd fff1 	bl	8009ac8 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bae6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800baea:	f7fc f836 	bl	8007b5a <lwip_htonl>
 800baee:	9b04      	ldr	r3, [sp, #16]
 800baf0:	6158      	str	r0, [r3, #20]
    opts += 1;
 800baf2:	f103 0218 	add.w	r2, r3, #24
 800baf6:	e7a6      	b.n	800ba46 <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800bafc:	7d23      	ldrb	r3, [r4, #20]
 800bafe:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb00:	bf1e      	ittt	ne
 800bb02:	8b63      	ldrhne	r3, [r4, #26]
 800bb04:	f023 0303 	bicne.w	r3, r3, #3
 800bb08:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb0a:	68eb      	ldr	r3, [r5, #12]
 800bb0c:	6858      	ldr	r0, [r3, #4]
 800bb0e:	f7fc f824 	bl	8007b5a <lwip_htonl>
 800bb12:	892a      	ldrh	r2, [r5, #8]
 800bb14:	68e9      	ldr	r1, [r5, #12]
 800bb16:	9204      	str	r2, [sp, #16]
 800bb18:	9005      	str	r0, [sp, #20]
 800bb1a:	8988      	ldrh	r0, [r1, #12]
 800bb1c:	f7fc f81a 	bl	8007b54 <lwip_htons>
 800bb20:	f010 0003 	ands.w	r0, r0, #3
 800bb24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb28:	bf18      	it	ne
 800bb2a:	2001      	movne	r0, #1
 800bb2c:	4413      	add	r3, r2
    if (TCP_TCPLEN(seg) > 0) {
 800bb2e:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb30:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb34:	1a1b      	subs	r3, r3, r0
 800bb36:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 800bb38:	892b      	ldrh	r3, [r5, #8]
      pcb->snd_nxt = snd_nxt;
 800bb3a:	bfb8      	it	lt
 800bb3c:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800bb3e:	9304      	str	r3, [sp, #16]
 800bb40:	8990      	ldrh	r0, [r2, #12]
 800bb42:	f7fc f807 	bl	8007b54 <lwip_htons>
 800bb46:	f010 0003 	ands.w	r0, r0, #3
 800bb4a:	9b04      	ldr	r3, [sp, #16]
 800bb4c:	bf18      	it	ne
 800bb4e:	2001      	movne	r0, #1
 800bb50:	42d8      	cmn	r0, r3
 800bb52:	f000 8083 	beq.w	800bc5c <tcp_output+0x340>
      seg->next = NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800bb5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bb5c:	b983      	cbnz	r3, 800bb80 <tcp_output+0x264>
        pcb->unacked = seg;
 800bb5e:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800bb60:	462e      	mov	r6, r5
 800bb62:	e022      	b.n	800bbaa <tcp_output+0x28e>
 800bb64:	080131a9 	.word	0x080131a9
 800bb68:	080137d6 	.word	0x080137d6
 800bb6c:	0801153a 	.word	0x0801153a
 800bb70:	080137ee 	.word	0x080137ee
 800bb74:	200087bc 	.word	0x200087bc
 800bb78:	200087ac 	.word	0x200087ac
 800bb7c:	0801382b 	.word	0x0801382b
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bb80:	68eb      	ldr	r3, [r5, #12]
 800bb82:	6858      	ldr	r0, [r3, #4]
 800bb84:	f7fb ffe9 	bl	8007b5a <lwip_htonl>
 800bb88:	68f2      	ldr	r2, [r6, #12]
 800bb8a:	9004      	str	r0, [sp, #16]
 800bb8c:	6850      	ldr	r0, [r2, #4]
 800bb8e:	f7fb ffe4 	bl	8007b5a <lwip_htonl>
 800bb92:	9b04      	ldr	r3, [sp, #16]
 800bb94:	1a18      	subs	r0, r3, r0
 800bb96:	2800      	cmp	r0, #0
 800bb98:	da5e      	bge.n	800bc58 <tcp_output+0x33c>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bb9a:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	2a00      	cmp	r2, #0
 800bba2:	d148      	bne.n	800bc36 <tcp_output+0x31a>
          seg->next = (*cur_seg);
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800bba8:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800bbaa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800bbac:	2d00      	cmp	r5, #0
 800bbae:	d038      	beq.n	800bc22 <tcp_output+0x306>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bbb0:	68eb      	ldr	r3, [r5, #12]
 800bbb2:	6858      	ldr	r0, [r3, #4]
 800bbb4:	f7fb ffd1 	bl	8007b5a <lwip_htonl>
 800bbb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bbba:	1ac0      	subs	r0, r0, r3
 800bbbc:	892b      	ldrh	r3, [r5, #8]
 800bbbe:	4418      	add	r0, r3
  while (seg != NULL &&
 800bbc0:	42b8      	cmp	r0, r7
 800bbc2:	d82e      	bhi.n	800bc22 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800bbc4:	68eb      	ldr	r3, [r5, #12]
 800bbc6:	8998      	ldrh	r0, [r3, #12]
 800bbc8:	f7fb ffc4 	bl	8007b54 <lwip_htons>
 800bbcc:	0741      	lsls	r1, r0, #29
 800bbce:	d506      	bpl.n	800bbde <tcp_output+0x2c2>
 800bbd0:	4653      	mov	r3, sl
 800bbd2:	f240 5237 	movw	r2, #1335	; 0x537
 800bbd6:	4925      	ldr	r1, [pc, #148]	; (800bc6c <tcp_output+0x350>)
 800bbd8:	4658      	mov	r0, fp
 800bbda:	f000 fd77 	bl	800c6cc <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bbde:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f43f af06 	beq.w	800b9f2 <tcp_output+0xd6>
 800bbe6:	8b62      	ldrh	r2, [r4, #26]
 800bbe8:	f012 0f44 	tst.w	r2, #68	; 0x44
 800bbec:	f47f af01 	bne.w	800b9f2 <tcp_output+0xd6>
 800bbf0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bbf2:	b143      	cbz	r3, 800bc06 <tcp_output+0x2ea>
 800bbf4:	6819      	ldr	r1, [r3, #0]
 800bbf6:	2900      	cmp	r1, #0
 800bbf8:	f47f aefb 	bne.w	800b9f2 <tcp_output+0xd6>
 800bbfc:	8919      	ldrh	r1, [r3, #8]
 800bbfe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bc00:	4299      	cmp	r1, r3
 800bc02:	f4bf aef6 	bcs.w	800b9f2 <tcp_output+0xd6>
 800bc06:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f43f aef1 	beq.w	800b9f2 <tcp_output+0xd6>
 800bc10:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800bc14:	2b07      	cmp	r3, #7
 800bc16:	f63f aeec 	bhi.w	800b9f2 <tcp_output+0xd6>
 800bc1a:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800bc1e:	f47f aee8 	bne.w	800b9f2 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800bc22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bc24:	b90b      	cbnz	r3, 800bc2a <tcp_output+0x30e>
    pcb->unsent_oversize = 0;
 800bc26:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc2a:	8b63      	ldrh	r3, [r4, #26]
 800bc2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc30:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800bc32:	2000      	movs	r0, #0
 800bc34:	e74d      	b.n	800bad2 <tcp_output+0x1b6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bc36:	68d2      	ldr	r2, [r2, #12]
 800bc38:	9305      	str	r3, [sp, #20]
 800bc3a:	6850      	ldr	r0, [r2, #4]
 800bc3c:	f7fb ff8d 	bl	8007b5a <lwip_htonl>
 800bc40:	68e9      	ldr	r1, [r5, #12]
 800bc42:	9004      	str	r0, [sp, #16]
 800bc44:	6848      	ldr	r0, [r1, #4]
 800bc46:	f7fb ff88 	bl	8007b5a <lwip_htonl>
 800bc4a:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800bc4c:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bc4e:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800bc50:	2800      	cmp	r0, #0
 800bc52:	daa7      	bge.n	800bba4 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	e7a2      	b.n	800bb9e <tcp_output+0x282>
          useg->next = seg;
 800bc58:	6035      	str	r5, [r6, #0]
 800bc5a:	e781      	b.n	800bb60 <tcp_output+0x244>
      tcp_seg_free(seg);
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	f7fd f8df 	bl	8008e20 <tcp_seg_free>
 800bc62:	e7a2      	b.n	800bbaa <tcp_output+0x28e>
    return ERR_RTE;
 800bc64:	f06f 0003 	mvn.w	r0, #3
 800bc68:	e733      	b.n	800bad2 <tcp_output+0x1b6>
 800bc6a:	bf00      	nop
 800bc6c:	08013814 	.word	0x08013814

0800bc70 <tcp_rexmit_rto_commit>:
{
 800bc70:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bc72:	4604      	mov	r4, r0
 800bc74:	b930      	cbnz	r0, 800bc84 <tcp_rexmit_rto_commit+0x14>
 800bc76:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <tcp_rexmit_rto_commit+0x2c>)
 800bc78:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bc7c:	4908      	ldr	r1, [pc, #32]	; (800bca0 <tcp_rexmit_rto_commit+0x30>)
 800bc7e:	4809      	ldr	r0, [pc, #36]	; (800bca4 <tcp_rexmit_rto_commit+0x34>)
 800bc80:	f000 fd24 	bl	800c6cc <iprintf>
  if (pcb->nrtx < 0xFF) {
 800bc84:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800bc88:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800bc8a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800bc8c:	bf1c      	itt	ne
 800bc8e:	3301      	addne	r3, #1
 800bc90:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800bc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800bc98:	f7ff be40 	b.w	800b91c <tcp_output>
 800bc9c:	080131a9 	.word	0x080131a9
 800bca0:	0801383e 	.word	0x0801383e
 800bca4:	0801153a 	.word	0x0801153a

0800bca8 <tcp_rexmit_rto>:
{
 800bca8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bcaa:	4604      	mov	r4, r0
 800bcac:	b930      	cbnz	r0, 800bcbc <tcp_rexmit_rto+0x14>
 800bcae:	4b08      	ldr	r3, [pc, #32]	; (800bcd0 <tcp_rexmit_rto+0x28>)
 800bcb0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bcb4:	4907      	ldr	r1, [pc, #28]	; (800bcd4 <tcp_rexmit_rto+0x2c>)
 800bcb6:	4808      	ldr	r0, [pc, #32]	; (800bcd8 <tcp_rexmit_rto+0x30>)
 800bcb8:	f000 fd08 	bl	800c6cc <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f7ff fcfb 	bl	800b6b8 <tcp_rexmit_rto_prepare>
 800bcc2:	b920      	cbnz	r0, 800bcce <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800bcc4:	4620      	mov	r0, r4
}
 800bcc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800bcca:	f7ff bfd1 	b.w	800bc70 <tcp_rexmit_rto_commit>
}
 800bcce:	bd10      	pop	{r4, pc}
 800bcd0:	080131a9 	.word	0x080131a9
 800bcd4:	08013861 	.word	0x08013861
 800bcd8:	0801153a 	.word	0x0801153a

0800bcdc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bcdc:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bcde:	4604      	mov	r4, r0
 800bce0:	b930      	cbnz	r0, 800bcf0 <tcp_keepalive+0x14>
 800bce2:	4b0f      	ldr	r3, [pc, #60]	; (800bd20 <tcp_keepalive+0x44>)
 800bce4:	f640 0224 	movw	r2, #2084	; 0x824
 800bce8:	490e      	ldr	r1, [pc, #56]	; (800bd24 <tcp_keepalive+0x48>)
 800bcea:	480f      	ldr	r0, [pc, #60]	; (800bd28 <tcp_keepalive+0x4c>)
 800bcec:	f000 fcee 	bl	800c6cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bcf0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bcf2:	3801      	subs	r0, #1
 800bcf4:	f7fb ff31 	bl	8007b5a <lwip_htonl>
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f7ff f847 	bl	800ad90 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 800bd02:	4605      	mov	r5, r0
 800bd04:	b148      	cbz	r0, 800bd1a <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bd06:	f7ff f869 	bl	800addc <tcp_output_fill_options.isra.0.constprop.5>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd0a:	1d23      	adds	r3, r4, #4
 800bd0c:	4622      	mov	r2, r4
 800bd0e:	4629      	mov	r1, r5
 800bd10:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800bd12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd16:	f7ff b871 	b.w	800adfc <tcp_output_control_segment>
}
 800bd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1e:	bd70      	pop	{r4, r5, r6, pc}
 800bd20:	080131a9 	.word	0x080131a9
 800bd24:	0801387d 	.word	0x0801387d
 800bd28:	0801153a 	.word	0x0801153a

0800bd2c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bd30:	4605      	mov	r5, r0
 800bd32:	b930      	cbnz	r0, 800bd42 <tcp_zero_window_probe+0x16>
 800bd34:	4b2c      	ldr	r3, [pc, #176]	; (800bde8 <tcp_zero_window_probe+0xbc>)
 800bd36:	f640 024f 	movw	r2, #2127	; 0x84f
 800bd3a:	492c      	ldr	r1, [pc, #176]	; (800bdec <tcp_zero_window_probe+0xc0>)
 800bd3c:	482c      	ldr	r0, [pc, #176]	; (800bdf0 <tcp_zero_window_probe+0xc4>)
 800bd3e:	f000 fcc5 	bl	800c6cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bd42:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800bd44:	2c00      	cmp	r4, #0
 800bd46:	d048      	beq.n	800bdda <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bd48:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
 800bd4c:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800bd4e:	bf1c      	itt	ne
 800bd50:	3301      	addne	r3, #1
 800bd52:	f885 3096 	strbne.w	r3, [r5, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bd56:	68e3      	ldr	r3, [r4, #12]
 800bd58:	8998      	ldrh	r0, [r3, #12]
 800bd5a:	f7fb fefb 	bl	8007b54 <lwip_htons>
 800bd5e:	f010 0601 	ands.w	r6, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bd62:	68e3      	ldr	r3, [r4, #12]
 800bd64:	4628      	mov	r0, r5
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bd66:	bf18      	it	ne
 800bd68:	8926      	ldrhne	r6, [r4, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bd6a:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bd6c:	bf1c      	itt	ne
 800bd6e:	fab6 f686 	clzne	r6, r6
 800bd72:	0976      	lsrne	r6, r6, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bd74:	f086 0101 	eor.w	r1, r6, #1
 800bd78:	f7ff f80a 	bl	800ad90 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 800bd7c:	4607      	mov	r7, r0
 800bd7e:	b378      	cbz	r0, 800bde0 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bd80:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800bd84:	b1f6      	cbz	r6, 800bdc4 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bd86:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 800bd8a:	2011      	movs	r0, #17
 800bd8c:	f7fb fee2 	bl	8007b54 <lwip_htons>
 800bd90:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800bd94:	4330      	orrs	r0, r6
 800bd96:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bd9a:	68e3      	ldr	r3, [r4, #12]
 800bd9c:	6858      	ldr	r0, [r3, #4]
 800bd9e:	f7fb fedc 	bl	8007b5a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bda2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bda4:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bda6:	1a1b      	subs	r3, r3, r0
 800bda8:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800bdaa:	bfb8      	it	lt
 800bdac:	6528      	strlt	r0, [r5, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bdae:	4638      	mov	r0, r7
 800bdb0:	f7ff f814 	bl	800addc <tcp_output_fill_options.isra.0.constprop.5>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bdb4:	1d2b      	adds	r3, r5, #4
 800bdb6:	462a      	mov	r2, r5
 800bdb8:	4639      	mov	r1, r7
 800bdba:	4628      	mov	r0, r5

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800bdbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bdc0:	f7ff b81c 	b.w	800adfc <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bdc4:	6860      	ldr	r0, [r4, #4]
 800bdc6:	f108 0114 	add.w	r1, r8, #20
 800bdca:	8922      	ldrh	r2, [r4, #8]
 800bdcc:	8903      	ldrh	r3, [r0, #8]
 800bdce:	1a9b      	subs	r3, r3, r2
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	f7fc fe14 	bl	8008a00 <pbuf_copy_partial>
 800bdd8:	e7df      	b.n	800bd9a <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800bdda:	4620      	mov	r0, r4
}
 800bddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800bde0:	f04f 30ff 	mov.w	r0, #4294967295
 800bde4:	e7fa      	b.n	800bddc <tcp_zero_window_probe+0xb0>
 800bde6:	bf00      	nop
 800bde8:	080131a9 	.word	0x080131a9
 800bdec:	08013898 	.word	0x08013898
 800bdf0:	0801153a 	.word	0x0801153a

0800bdf4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bdf4:	b570      	push	{r4, r5, r6, lr}
 800bdf6:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bdf8:	2006      	movs	r0, #6
{
 800bdfa:	460e      	mov	r6, r1
 800bdfc:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bdfe:	f7fc f95b 	bl	80080b8 <memp_malloc>
  if (timeout == NULL) {
 800be02:	b938      	cbnz	r0, 800be14 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800be04:	4b10      	ldr	r3, [pc, #64]	; (800be48 <sys_timeout_abs+0x54>)
 800be06:	22be      	movs	r2, #190	; 0xbe
 800be08:	4910      	ldr	r1, [pc, #64]	; (800be4c <sys_timeout_abs+0x58>)
 800be0a:	4811      	ldr	r0, [pc, #68]	; (800be50 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800be0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800be10:	f000 bc5c 	b.w	800c6cc <iprintf>
  timeout->next = NULL;
 800be14:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800be16:	4a0f      	ldr	r2, [pc, #60]	; (800be54 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800be18:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800be1a:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800be1c:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800be1e:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800be22:	b90b      	cbnz	r3, 800be28 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800be24:	6010      	str	r0, [r2, #0]
}
 800be26:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800be28:	6859      	ldr	r1, [r3, #4]
 800be2a:	1a61      	subs	r1, r4, r1
 800be2c:	2900      	cmp	r1, #0
 800be2e:	da02      	bge.n	800be36 <sys_timeout_abs+0x42>
    timeout->next = next_timeout;
 800be30:	6003      	str	r3, [r0, #0]
 800be32:	e7f7      	b.n	800be24 <sys_timeout_abs+0x30>
 800be34:	4613      	mov	r3, r2
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	b11a      	cbz	r2, 800be42 <sys_timeout_abs+0x4e>
 800be3a:	6851      	ldr	r1, [r2, #4]
 800be3c:	1a61      	subs	r1, r4, r1
 800be3e:	2900      	cmp	r1, #0
 800be40:	daf8      	bge.n	800be34 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800be42:	6002      	str	r2, [r0, #0]
        t->next = timeout;
 800be44:	6018      	str	r0, [r3, #0]
        break;
 800be46:	e7ee      	b.n	800be26 <sys_timeout_abs+0x32>
 800be48:	080138bb 	.word	0x080138bb
 800be4c:	08013912 	.word	0x08013912
 800be50:	0801153a 	.word	0x0801153a
 800be54:	200005c8 	.word	0x200005c8

0800be58 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800be58:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800be5a:	6843      	ldr	r3, [r0, #4]
{
 800be5c:	4604      	mov	r4, r0
  cyclic->handler();
 800be5e:	4798      	blx	r3

  now = sys_now();
 800be60:	f7f4 fec6 	bl	8000bf0 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800be64:	4b07      	ldr	r3, [pc, #28]	; (800be84 <lwip_cyclic_timer+0x2c>)
 800be66:	6825      	ldr	r5, [r4, #0]
 800be68:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800be6a:	4907      	ldr	r1, [pc, #28]	; (800be88 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800be6c:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800be6e:	1a1a      	subs	r2, r3, r0
 800be70:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800be72:	4622      	mov	r2, r4
 800be74:	bfb4      	ite	lt
 800be76:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800be78:	4618      	movge	r0, r3
#endif
  }
}
 800be7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800be7e:	f7ff bfb9 	b.w	800bdf4 <sys_timeout_abs>
 800be82:	bf00      	nop
 800be84:	200005c8 	.word	0x200005c8
 800be88:	0800be59 	.word	0x0800be59

0800be8c <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800be8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	4604      	mov	r4, r0
 800be94:	460d      	mov	r5, r1
 800be96:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800be98:	d306      	bcc.n	800bea8 <sys_timeout+0x1c>
 800be9a:	4b08      	ldr	r3, [pc, #32]	; (800bebc <sys_timeout+0x30>)
 800be9c:	f240 1229 	movw	r2, #297	; 0x129
 800bea0:	4907      	ldr	r1, [pc, #28]	; (800bec0 <sys_timeout+0x34>)
 800bea2:	4808      	ldr	r0, [pc, #32]	; (800bec4 <sys_timeout+0x38>)
 800bea4:	f000 fc12 	bl	800c6cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bea8:	f7f4 fea2 	bl	8000bf0 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800beac:	4632      	mov	r2, r6
 800beae:	4629      	mov	r1, r5
 800beb0:	4420      	add	r0, r4
#endif
}
 800beb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800beb6:	f7ff bf9d 	b.w	800bdf4 <sys_timeout_abs>
 800beba:	bf00      	nop
 800bebc:	080138bb 	.word	0x080138bb
 800bec0:	0801394f 	.word	0x0801394f
 800bec4:	0801153a 	.word	0x0801153a

0800bec8 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bec8:	4b08      	ldr	r3, [pc, #32]	; (800beec <tcp_timer_needed+0x24>)
 800beca:	689a      	ldr	r2, [r3, #8]
 800becc:	b962      	cbnz	r2, 800bee8 <tcp_timer_needed+0x20>
 800bece:	4a08      	ldr	r2, [pc, #32]	; (800bef0 <tcp_timer_needed+0x28>)
 800bed0:	6812      	ldr	r2, [r2, #0]
 800bed2:	b912      	cbnz	r2, 800beda <tcp_timer_needed+0x12>
 800bed4:	4a07      	ldr	r2, [pc, #28]	; (800bef4 <tcp_timer_needed+0x2c>)
 800bed6:	6812      	ldr	r2, [r2, #0]
 800bed8:	b132      	cbz	r2, 800bee8 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800beda:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bedc:	4906      	ldr	r1, [pc, #24]	; (800bef8 <tcp_timer_needed+0x30>)
 800bede:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800bee0:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bee2:	2200      	movs	r2, #0
 800bee4:	f7ff bfd2 	b.w	800be8c <sys_timeout>
}
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	200005c8 	.word	0x200005c8
 800bef0:	200087a8 	.word	0x200087a8
 800bef4:	200087b8 	.word	0x200087b8
 800bef8:	0800befd 	.word	0x0800befd

0800befc <tcpip_tcp_timer>:
{
 800befc:	b508      	push	{r3, lr}
  tcp_tmr();
 800befe:	f7fd fc43 	bl	8009788 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bf02:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <tcpip_tcp_timer+0x28>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	b913      	cbnz	r3, 800bf0e <tcpip_tcp_timer+0x12>
 800bf08:	4b07      	ldr	r3, [pc, #28]	; (800bf28 <tcpip_tcp_timer+0x2c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	b133      	cbz	r3, 800bf1c <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bf0e:	2200      	movs	r2, #0
 800bf10:	4906      	ldr	r1, [pc, #24]	; (800bf2c <tcpip_tcp_timer+0x30>)
 800bf12:	20fa      	movs	r0, #250	; 0xfa
}
 800bf14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bf18:	f7ff bfb8 	b.w	800be8c <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800bf1c:	4a04      	ldr	r2, [pc, #16]	; (800bf30 <tcpip_tcp_timer+0x34>)
 800bf1e:	6093      	str	r3, [r2, #8]
}
 800bf20:	bd08      	pop	{r3, pc}
 800bf22:	bf00      	nop
 800bf24:	200087a8 	.word	0x200087a8
 800bf28:	200087b8 	.word	0x200087b8
 800bf2c:	0800befd 	.word	0x0800befd
 800bf30:	200005c8 	.word	0x200005c8

0800bf34 <sys_timeouts_init>:
{
 800bf34:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bf36:	4d10      	ldr	r5, [pc, #64]	; (800bf78 <sys_timeouts_init+0x44>)
 800bf38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bf3c:	4c0f      	ldr	r4, [pc, #60]	; (800bf7c <sys_timeouts_init+0x48>)
 800bf3e:	f105 0208 	add.w	r2, r5, #8
 800bf42:	4621      	mov	r1, r4
 800bf44:	f7ff ffa2 	bl	800be8c <sys_timeout>
 800bf48:	f105 0210 	add.w	r2, r5, #16
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bf52:	f7ff ff9b 	bl	800be8c <sys_timeout>
 800bf56:	f105 0218 	add.w	r2, r5, #24
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	f64e 2060 	movw	r0, #60000	; 0xea60
 800bf60:	f7ff ff94 	bl	800be8c <sys_timeout>
 800bf64:	f105 0220 	add.w	r2, r5, #32
 800bf68:	4621      	mov	r1, r4
 800bf6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800bf6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bf72:	f7ff bf8b 	b.w	800be8c <sys_timeout>
 800bf76:	bf00      	nop
 800bf78:	0801140c 	.word	0x0801140c
 800bf7c:	0800be59 	.word	0x0800be59

0800bf80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bf82:	f7f4 fe35 	bl	8000bf0 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800bf86:	4c0b      	ldr	r4, [pc, #44]	; (800bfb4 <sys_check_timeouts+0x34>)
  now = sys_now();
 800bf88:	4607      	mov	r7, r0
    tmptimeout = next_timeout;
 800bf8a:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 800bf8c:	b181      	cbz	r1, 800bfb0 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bf8e:	684b      	ldr	r3, [r1, #4]
 800bf90:	1afa      	subs	r2, r7, r3
 800bf92:	2a00      	cmp	r2, #0
 800bf94:	db0c      	blt.n	800bfb0 <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bf96:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bf98:	2006      	movs	r0, #6
    current_timeout_due_time = tmptimeout->time;
 800bf9a:	6063      	str	r3, [r4, #4]
    next_timeout = tmptimeout->next;
 800bf9c:	6022      	str	r2, [r4, #0]
    arg = tmptimeout->arg;
 800bf9e:	e9d1 5602 	ldrd	r5, r6, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bfa2:	f7fc f8a5 	bl	80080f0 <memp_free>
    if (handler != NULL) {
 800bfa6:	2d00      	cmp	r5, #0
 800bfa8:	d0ef      	beq.n	800bf8a <sys_check_timeouts+0xa>
      handler(arg);
 800bfaa:	4630      	mov	r0, r6
 800bfac:	47a8      	blx	r5
 800bfae:	e7ec      	b.n	800bf8a <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	200005c8 	.word	0x200005c8

0800bfb8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bfb8:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bfba:	f000 fc03 	bl	800c7c4 <rand>
 800bfbe:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800bfc2:	4b02      	ldr	r3, [pc, #8]	; (800bfcc <udp_init+0x14>)
 800bfc4:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800bfc8:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800bfca:	bd08      	pop	{r3, pc}
 800bfcc:	20000134 	.word	0x20000134

0800bfd0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd4:	4688      	mov	r8, r1
 800bfd6:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bfd8:	4607      	mov	r7, r0
 800bfda:	b928      	cbnz	r0, 800bfe8 <udp_input+0x18>
 800bfdc:	4b5c      	ldr	r3, [pc, #368]	; (800c150 <udp_input+0x180>)
 800bfde:	22cf      	movs	r2, #207	; 0xcf
 800bfe0:	495c      	ldr	r1, [pc, #368]	; (800c154 <udp_input+0x184>)
 800bfe2:	485d      	ldr	r0, [pc, #372]	; (800c158 <udp_input+0x188>)
 800bfe4:	f000 fb72 	bl	800c6cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bfe8:	f1b8 0f00 	cmp.w	r8, #0
 800bfec:	d105      	bne.n	800bffa <udp_input+0x2a>
 800bfee:	4b58      	ldr	r3, [pc, #352]	; (800c150 <udp_input+0x180>)
 800bff0:	22d0      	movs	r2, #208	; 0xd0
 800bff2:	495a      	ldr	r1, [pc, #360]	; (800c15c <udp_input+0x18c>)
 800bff4:	4858      	ldr	r0, [pc, #352]	; (800c158 <udp_input+0x188>)
 800bff6:	f000 fb69 	bl	800c6cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bffa:	897b      	ldrh	r3, [r7, #10]
 800bffc:	2b07      	cmp	r3, #7
 800bffe:	d805      	bhi.n	800c00c <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c000:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c002:	b005      	add	sp, #20
 800c004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800c008:	f7fc bae2 	b.w	80085d0 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c00c:	4e54      	ldr	r6, [pc, #336]	; (800c160 <udp_input+0x190>)
  uncon_pcb = NULL;
 800c00e:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800c010:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c012:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 800c014:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c016:	6970      	ldr	r0, [r6, #20]
 800c018:	f7fb f977 	bl	800730a <ip4_addr_isbroadcast_u32>
 800c01c:	4682      	mov	sl, r0
  src = lwip_ntohs(udphdr->src);
 800c01e:	8820      	ldrh	r0, [r4, #0]
 800c020:	f7fb fd98 	bl	8007b54 <lwip_htons>
 800c024:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800c026:	8860      	ldrh	r0, [r4, #2]
 800c028:	f7fb fd94 	bl	8007b54 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c02c:	4b4d      	ldr	r3, [pc, #308]	; (800c164 <udp_input+0x194>)
  dest = lwip_ntohs(udphdr->dest);
 800c02e:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c030:	681c      	ldr	r4, [r3, #0]
 800c032:	4699      	mov	r9, r3
 800c034:	b99c      	cbnz	r4, 800c05e <udp_input+0x8e>
  if (pcb != NULL) {
 800c036:	b925      	cbnz	r5, 800c042 <udp_input+0x72>
  if (for_us) {
 800c038:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c03c:	6973      	ldr	r3, [r6, #20]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d1de      	bne.n	800c000 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c042:	2108      	movs	r1, #8
 800c044:	4638      	mov	r0, r7
 800c046:	f7fc fa8f 	bl	8008568 <pbuf_remove_header>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d05c      	beq.n	800c108 <udp_input+0x138>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c04e:	4b40      	ldr	r3, [pc, #256]	; (800c150 <udp_input+0x180>)
 800c050:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c054:	4944      	ldr	r1, [pc, #272]	; (800c168 <udp_input+0x198>)
 800c056:	4840      	ldr	r0, [pc, #256]	; (800c158 <udp_input+0x188>)
 800c058:	f000 fb38 	bl	800c6cc <iprintf>
 800c05c:	e7d0      	b.n	800c000 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800c05e:	8a63      	ldrh	r3, [r4, #18]
 800c060:	9a03      	ldr	r2, [sp, #12]
 800c062:	4293      	cmp	r3, r2
 800c064:	d14b      	bne.n	800c0fe <udp_input+0x12e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c066:	f1b8 0f00 	cmp.w	r8, #0
 800c06a:	d105      	bne.n	800c078 <udp_input+0xa8>
 800c06c:	4b38      	ldr	r3, [pc, #224]	; (800c150 <udp_input+0x180>)
 800c06e:	2288      	movs	r2, #136	; 0x88
 800c070:	493e      	ldr	r1, [pc, #248]	; (800c16c <udp_input+0x19c>)
 800c072:	4839      	ldr	r0, [pc, #228]	; (800c158 <udp_input+0x188>)
 800c074:	f000 fb2a 	bl	800c6cc <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c078:	7a22      	ldrb	r2, [r4, #8]
 800c07a:	b132      	cbz	r2, 800c08a <udp_input+0xba>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c07c:	6873      	ldr	r3, [r6, #4]
 800c07e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c082:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c084:	b2db      	uxtb	r3, r3
 800c086:	429a      	cmp	r2, r3
 800c088:	d139      	bne.n	800c0fe <udp_input+0x12e>
 800c08a:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800c08c:	f1ba 0f00 	cmp.w	sl, #0
 800c090:	d030      	beq.n	800c0f4 <udp_input+0x124>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c092:	b13b      	cbz	r3, 800c0a4 <udp_input+0xd4>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c094:	6972      	ldr	r2, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c096:	1c51      	adds	r1, r2, #1
 800c098:	d004      	beq.n	800c0a4 <udp_input+0xd4>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c09a:	405a      	eors	r2, r3
 800c09c:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c0a0:	420a      	tst	r2, r1
 800c0a2:	d12c      	bne.n	800c0fe <udp_input+0x12e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c0a4:	7c22      	ldrb	r2, [r4, #16]
 800c0a6:	0752      	lsls	r2, r2, #29
 800c0a8:	d40e      	bmi.n	800c0c8 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 800c0aa:	b35d      	cbz	r5, 800c104 <udp_input+0x134>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c0ac:	f1ba 0f00 	cmp.w	sl, #0
 800c0b0:	d00a      	beq.n	800c0c8 <udp_input+0xf8>
 800c0b2:	6972      	ldr	r2, [r6, #20]
 800c0b4:	3201      	adds	r2, #1
 800c0b6:	d107      	bne.n	800c0c8 <udp_input+0xf8>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c0b8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c0bc:	6829      	ldr	r1, [r5, #0]
 800c0be:	4291      	cmp	r1, r2
 800c0c0:	d002      	beq.n	800c0c8 <udp_input+0xf8>
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	bf08      	it	eq
 800c0c6:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800c0c8:	8aa3      	ldrh	r3, [r4, #20]
 800c0ca:	9a02      	ldr	r2, [sp, #8]
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d116      	bne.n	800c0fe <udp_input+0x12e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c0d0:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c0d2:	b113      	cbz	r3, 800c0da <udp_input+0x10a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c0d4:	6932      	ldr	r2, [r6, #16]
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d111      	bne.n	800c0fe <udp_input+0x12e>
        if (prev != NULL) {
 800c0da:	f1bb 0f00 	cmp.w	fp, #0
 800c0de:	d007      	beq.n	800c0f0 <udp_input+0x120>
          prev->next = pcb->next;
 800c0e0:	68e3      	ldr	r3, [r4, #12]
 800c0e2:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800c0e6:	f8d9 3000 	ldr.w	r3, [r9]
          udp_pcbs = pcb;
 800c0ea:	f8c9 4000 	str.w	r4, [r9]
          pcb->next = udp_pcbs;
 800c0ee:	60e3      	str	r3, [r4, #12]
 800c0f0:	4625      	mov	r5, r4
 800c0f2:	e7a6      	b.n	800c042 <udp_input+0x72>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d0d5      	beq.n	800c0a4 <udp_input+0xd4>
 800c0f8:	6972      	ldr	r2, [r6, #20]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d0d2      	beq.n	800c0a4 <udp_input+0xd4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0fe:	46a3      	mov	fp, r4
 800c100:	68e4      	ldr	r4, [r4, #12]
 800c102:	e797      	b.n	800c034 <udp_input+0x64>
 800c104:	4625      	mov	r5, r4
 800c106:	e7df      	b.n	800c0c8 <udp_input+0xf8>
    if (pcb != NULL) {
 800c108:	b16d      	cbz	r5, 800c126 <udp_input+0x156>
      if (pcb->recv != NULL) {
 800c10a:	69ac      	ldr	r4, [r5, #24]
 800c10c:	2c00      	cmp	r4, #0
 800c10e:	f43f af77 	beq.w	800c000 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c112:	9b02      	ldr	r3, [sp, #8]
 800c114:	463a      	mov	r2, r7
 800c116:	4629      	mov	r1, r5
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	4b15      	ldr	r3, [pc, #84]	; (800c170 <udp_input+0x1a0>)
 800c11c:	69e8      	ldr	r0, [r5, #28]
 800c11e:	47a0      	blx	r4
}
 800c120:	b005      	add	sp, #20
 800c122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c126:	f1ba 0f00 	cmp.w	sl, #0
 800c12a:	f47f af69 	bne.w	800c000 <udp_input+0x30>
 800c12e:	6973      	ldr	r3, [r6, #20]
 800c130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c134:	2be0      	cmp	r3, #224	; 0xe0
 800c136:	f43f af63 	beq.w	800c000 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c13a:	89b1      	ldrh	r1, [r6, #12]
 800c13c:	4638      	mov	r0, r7
 800c13e:	3108      	adds	r1, #8
 800c140:	b209      	sxth	r1, r1
 800c142:	f7fc fa3d 	bl	80085c0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c146:	2103      	movs	r1, #3
 800c148:	4638      	mov	r0, r7
 800c14a:	f7fa ff3b 	bl	8006fc4 <icmp_dest_unreach>
 800c14e:	e757      	b.n	800c000 <udp_input+0x30>
 800c150:	08013985 	.word	0x08013985
 800c154:	080139d7 	.word	0x080139d7
 800c158:	0801153a 	.word	0x0801153a
 800c15c:	080139ef 	.word	0x080139ef
 800c160:	200043d0 	.word	0x200043d0
 800c164:	200087c0 	.word	0x200087c0
 800c168:	08013a2d 	.word	0x08013a2d
 800c16c:	08013a08 	.word	0x08013a08
 800c170:	200043e0 	.word	0x200043e0

0800c174 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800c174:	4b2d      	ldr	r3, [pc, #180]	; (800c22c <udp_bind+0xb8>)
{
 800c176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800c17a:	2900      	cmp	r1, #0
 800c17c:	bf08      	it	eq
 800c17e:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c180:	b950      	cbnz	r0, 800c198 <udp_bind+0x24>
 800c182:	4b2b      	ldr	r3, [pc, #172]	; (800c230 <udp_bind+0xbc>)
 800c184:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c188:	492a      	ldr	r1, [pc, #168]	; (800c234 <udp_bind+0xc0>)
 800c18a:	482b      	ldr	r0, [pc, #172]	; (800c238 <udp_bind+0xc4>)
 800c18c:	f000 fa9e 	bl	800c6cc <iprintf>
 800c190:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800c194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c198:	4f28      	ldr	r7, [pc, #160]	; (800c23c <udp_bind+0xc8>)
 800c19a:	683e      	ldr	r6, [r7, #0]
 800c19c:	4635      	mov	r5, r6
 800c19e:	b9d5      	cbnz	r5, 800c1d6 <udp_bind+0x62>
  if (port == 0) {
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	d140      	bne.n	800c226 <udp_bind+0xb2>
 800c1a4:	4b26      	ldr	r3, [pc, #152]	; (800c240 <udp_bind+0xcc>)
 800c1a6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c1aa:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800c1ae:	881a      	ldrh	r2, [r3, #0]
 800c1b0:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1b2:	46b4      	mov	ip, r6
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c1b4:	bf16      	itet	ne
 800c1b6:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c1b8:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c1bc:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1be:	f1bc 0f00 	cmp.w	ip, #0
 800c1c2:	d10e      	bne.n	800c1e2 <udp_bind+0x6e>
 800c1c4:	801a      	strh	r2, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c1c6:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 800c1c8:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c1ca:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800c1cc:	b90d      	cbnz	r5, 800c1d2 <udp_bind+0x5e>
    pcb->next = udp_pcbs;
 800c1ce:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800c1d0:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	e7de      	b.n	800c194 <udp_bind+0x20>
    if (pcb == ipcb) {
 800c1d6:	4285      	cmp	r5, r0
 800c1d8:	d001      	beq.n	800c1de <udp_bind+0x6a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c1da:	68ed      	ldr	r5, [r5, #12]
 800c1dc:	e7df      	b.n	800c19e <udp_bind+0x2a>
      rebind = 1;
 800c1de:	2501      	movs	r5, #1
 800c1e0:	e7de      	b.n	800c1a0 <udp_bind+0x2c>
    if (pcb->local_port == udp_port) {
 800c1e2:	f8bc 8012 	ldrh.w	r8, [ip, #18]
 800c1e6:	4590      	cmp	r8, r2
 800c1e8:	d107      	bne.n	800c1fa <udp_bind+0x86>
 800c1ea:	3c01      	subs	r4, #1
 800c1ec:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c1ee:	2c00      	cmp	r4, #0
 800c1f0:	d1de      	bne.n	800c1b0 <udp_bind+0x3c>
 800c1f2:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800c1f4:	f06f 0007 	mvn.w	r0, #7
 800c1f8:	e7cc      	b.n	800c194 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1fa:	f8dc c00c 	ldr.w	ip, [ip, #12]
 800c1fe:	e7de      	b.n	800c1be <udp_bind+0x4a>
      if (pcb != ipcb) {
 800c200:	4283      	cmp	r3, r0
 800c202:	d00c      	beq.n	800c21e <udp_bind+0xaa>
          if ((ipcb->local_port == port) &&
 800c204:	8a5c      	ldrh	r4, [r3, #18]
 800c206:	4294      	cmp	r4, r2
 800c208:	d109      	bne.n	800c21e <udp_bind+0xaa>
 800c20a:	f8d1 c000 	ldr.w	ip, [r1]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c20e:	681c      	ldr	r4, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c210:	4564      	cmp	r4, ip
 800c212:	d0ef      	beq.n	800c1f4 <udp_bind+0x80>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c214:	f1bc 0f00 	cmp.w	ip, #0
 800c218:	d0ec      	beq.n	800c1f4 <udp_bind+0x80>
              ip_addr_isany(&ipcb->local_ip))) {
 800c21a:	2c00      	cmp	r4, #0
 800c21c:	d0ea      	beq.n	800c1f4 <udp_bind+0x80>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1ed      	bne.n	800c200 <udp_bind+0x8c>
 800c224:	e7cf      	b.n	800c1c6 <udp_bind+0x52>
 800c226:	4633      	mov	r3, r6
 800c228:	e7fa      	b.n	800c220 <udp_bind+0xac>
 800c22a:	bf00      	nop
 800c22c:	08011328 	.word	0x08011328
 800c230:	08013985 	.word	0x08013985
 800c234:	08013a48 	.word	0x08013a48
 800c238:	0801153a 	.word	0x0801153a
 800c23c:	200087c0 	.word	0x200087c0
 800c240:	20000134 	.word	0x20000134

0800c244 <udp_sendto_if_src>:
{
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	b085      	sub	sp, #20
 800c24a:	460e      	mov	r6, r1
 800c24c:	4691      	mov	r9, r2
 800c24e:	469b      	mov	fp, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c250:	4607      	mov	r7, r0
{
 800c252:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c256:	b960      	cbnz	r0, 800c272 <udp_sendto_if_src+0x2e>
 800c258:	4b3e      	ldr	r3, [pc, #248]	; (800c354 <udp_sendto_if_src+0x110>)
 800c25a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c25e:	493e      	ldr	r1, [pc, #248]	; (800c358 <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c260:	f06f 040f 	mvn.w	r4, #15
 800c264:	483d      	ldr	r0, [pc, #244]	; (800c35c <udp_sendto_if_src+0x118>)
 800c266:	f000 fa31 	bl	800c6cc <iprintf>
}
 800c26a:	4620      	mov	r0, r4
 800c26c:	b005      	add	sp, #20
 800c26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c272:	b921      	cbnz	r1, 800c27e <udp_sendto_if_src+0x3a>
 800c274:	4b37      	ldr	r3, [pc, #220]	; (800c354 <udp_sendto_if_src+0x110>)
 800c276:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c27a:	4939      	ldr	r1, [pc, #228]	; (800c360 <udp_sendto_if_src+0x11c>)
 800c27c:	e7f0      	b.n	800c260 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c27e:	b922      	cbnz	r2, 800c28a <udp_sendto_if_src+0x46>
 800c280:	4b34      	ldr	r3, [pc, #208]	; (800c354 <udp_sendto_if_src+0x110>)
 800c282:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c286:	4937      	ldr	r1, [pc, #220]	; (800c364 <udp_sendto_if_src+0x120>)
 800c288:	e7ea      	b.n	800c260 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c28a:	f1b8 0f00 	cmp.w	r8, #0
 800c28e:	d104      	bne.n	800c29a <udp_sendto_if_src+0x56>
 800c290:	4b30      	ldr	r3, [pc, #192]	; (800c354 <udp_sendto_if_src+0x110>)
 800c292:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c296:	4934      	ldr	r1, [pc, #208]	; (800c368 <udp_sendto_if_src+0x124>)
 800c298:	e7e2      	b.n	800c260 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c29a:	f1ba 0f00 	cmp.w	sl, #0
 800c29e:	d104      	bne.n	800c2aa <udp_sendto_if_src+0x66>
 800c2a0:	4b2c      	ldr	r3, [pc, #176]	; (800c354 <udp_sendto_if_src+0x110>)
 800c2a2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c2a6:	4931      	ldr	r1, [pc, #196]	; (800c36c <udp_sendto_if_src+0x128>)
 800c2a8:	e7da      	b.n	800c260 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800c2aa:	8a42      	ldrh	r2, [r0, #18]
 800c2ac:	b13a      	cbz	r2, 800c2be <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c2ae:	8932      	ldrh	r2, [r6, #8]
 800c2b0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d909      	bls.n	800c2cc <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800c2b8:	f04f 34ff 	mov.w	r4, #4294967295
 800c2bc:	e7d5      	b.n	800c26a <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c2be:	4601      	mov	r1, r0
 800c2c0:	f7ff ff58 	bl	800c174 <udp_bind>
    if (err != ERR_OK) {
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d0f1      	beq.n	800c2ae <udp_sendto_if_src+0x6a>
 800c2ca:	e7ce      	b.n	800c26a <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c2cc:	2108      	movs	r1, #8
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f7fc f947 	bl	8008562 <pbuf_add_header>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d03a      	beq.n	800c34e <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c2d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c2dc:	2108      	movs	r1, #8
 800c2de:	2022      	movs	r0, #34	; 0x22
 800c2e0:	f7fc f9d8 	bl	8008694 <pbuf_alloc>
    if (q == NULL) {
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d0e6      	beq.n	800c2b8 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800c2ea:	8933      	ldrh	r3, [r6, #8]
 800c2ec:	b113      	cbz	r3, 800c2f4 <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	f7fc fafa 	bl	80088e8 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c2f4:	896b      	ldrh	r3, [r5, #10]
 800c2f6:	2b07      	cmp	r3, #7
 800c2f8:	d806      	bhi.n	800c308 <udp_sendto_if_src+0xc4>
 800c2fa:	4b16      	ldr	r3, [pc, #88]	; (800c354 <udp_sendto_if_src+0x110>)
 800c2fc:	f240 320e 	movw	r2, #782	; 0x30e
 800c300:	491b      	ldr	r1, [pc, #108]	; (800c370 <udp_sendto_if_src+0x12c>)
 800c302:	4816      	ldr	r0, [pc, #88]	; (800c35c <udp_sendto_if_src+0x118>)
 800c304:	f000 f9e2 	bl	800c6cc <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800c308:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800c30a:	8a78      	ldrh	r0, [r7, #18]
 800c30c:	f7fb fc22 	bl	8007b54 <lwip_htons>
 800c310:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c312:	4658      	mov	r0, fp
 800c314:	f7fb fc1e 	bl	8007b54 <lwip_htons>
  udphdr->chksum = 0x0000;
 800c318:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800c31a:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800c31c:	71a3      	strb	r3, [r4, #6]
 800c31e:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800c320:	8928      	ldrh	r0, [r5, #8]
 800c322:	f7fb fc17 	bl	8007b54 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c326:	2211      	movs	r2, #17
    udphdr->len = lwip_htons(q->tot_len);
 800c328:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c32a:	4641      	mov	r1, r8
 800c32c:	7afb      	ldrb	r3, [r7, #11]
 800c32e:	4628      	mov	r0, r5
 800c330:	f8cd a008 	str.w	sl, [sp, #8]
 800c334:	9201      	str	r2, [sp, #4]
 800c336:	7aba      	ldrb	r2, [r7, #10]
 800c338:	9200      	str	r2, [sp, #0]
 800c33a:	464a      	mov	r2, r9
 800c33c:	f7fa ff5a 	bl	80071f4 <ip4_output_if_src>
  if (q != p) {
 800c340:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c342:	4604      	mov	r4, r0
  if (q != p) {
 800c344:	d091      	beq.n	800c26a <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800c346:	4628      	mov	r0, r5
 800c348:	f7fc f942 	bl	80085d0 <pbuf_free>
 800c34c:	e78d      	b.n	800c26a <udp_sendto_if_src+0x26>
 800c34e:	4635      	mov	r5, r6
 800c350:	e7d0      	b.n	800c2f4 <udp_sendto_if_src+0xb0>
 800c352:	bf00      	nop
 800c354:	08013985 	.word	0x08013985
 800c358:	08013a5e 	.word	0x08013a5e
 800c35c:	0801153a 	.word	0x0801153a
 800c360:	08013a7d 	.word	0x08013a7d
 800c364:	08013a9d 	.word	0x08013a9d
 800c368:	08013abf 	.word	0x08013abf
 800c36c:	08013ae1 	.word	0x08013ae1
 800c370:	08013b02 	.word	0x08013b02

0800c374 <udp_sendto_if>:
{
 800c374:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c376:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c378:	b950      	cbnz	r0, 800c390 <udp_sendto_if+0x1c>
 800c37a:	4b18      	ldr	r3, [pc, #96]	; (800c3dc <udp_sendto_if+0x68>)
 800c37c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c380:	4917      	ldr	r1, [pc, #92]	; (800c3e0 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c382:	4818      	ldr	r0, [pc, #96]	; (800c3e4 <udp_sendto_if+0x70>)
 800c384:	f000 f9a2 	bl	800c6cc <iprintf>
 800c388:	f06f 000f 	mvn.w	r0, #15
}
 800c38c:	b002      	add	sp, #8
 800c38e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c390:	b921      	cbnz	r1, 800c39c <udp_sendto_if+0x28>
 800c392:	4b12      	ldr	r3, [pc, #72]	; (800c3dc <udp_sendto_if+0x68>)
 800c394:	f240 2281 	movw	r2, #641	; 0x281
 800c398:	4913      	ldr	r1, [pc, #76]	; (800c3e8 <udp_sendto_if+0x74>)
 800c39a:	e7f2      	b.n	800c382 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c39c:	b922      	cbnz	r2, 800c3a8 <udp_sendto_if+0x34>
 800c39e:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <udp_sendto_if+0x68>)
 800c3a0:	f240 2282 	movw	r2, #642	; 0x282
 800c3a4:	4911      	ldr	r1, [pc, #68]	; (800c3ec <udp_sendto_if+0x78>)
 800c3a6:	e7ec      	b.n	800c382 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c3a8:	b924      	cbnz	r4, 800c3b4 <udp_sendto_if+0x40>
 800c3aa:	4b0c      	ldr	r3, [pc, #48]	; (800c3dc <udp_sendto_if+0x68>)
 800c3ac:	f240 2283 	movw	r2, #643	; 0x283
 800c3b0:	490f      	ldr	r1, [pc, #60]	; (800c3f0 <udp_sendto_if+0x7c>)
 800c3b2:	e7e6      	b.n	800c382 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3b4:	6805      	ldr	r5, [r0, #0]
 800c3b6:	b11d      	cbz	r5, 800c3c0 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c3b8:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3bc:	2ee0      	cmp	r6, #224	; 0xe0
 800c3be:	d105      	bne.n	800c3cc <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800c3c0:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c3c2:	e9cd 4500 	strd	r4, r5, [sp]
 800c3c6:	f7ff ff3d 	bl	800c244 <udp_sendto_if_src>
 800c3ca:	e7df      	b.n	800c38c <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c3cc:	6866      	ldr	r6, [r4, #4]
 800c3ce:	42b5      	cmp	r5, r6
 800c3d0:	d101      	bne.n	800c3d6 <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	e7f5      	b.n	800c3c2 <udp_sendto_if+0x4e>
        return ERR_RTE;
 800c3d6:	f06f 0003 	mvn.w	r0, #3
 800c3da:	e7d7      	b.n	800c38c <udp_sendto_if+0x18>
 800c3dc:	08013985 	.word	0x08013985
 800c3e0:	08013b30 	.word	0x08013b30
 800c3e4:	0801153a 	.word	0x0801153a
 800c3e8:	08013b4b 	.word	0x08013b4b
 800c3ec:	08013b67 	.word	0x08013b67
 800c3f0:	08013b85 	.word	0x08013b85

0800c3f4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c3f4:	b570      	push	{r4, r5, r6, lr}
 800c3f6:	460d      	mov	r5, r1
 800c3f8:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	b948      	cbnz	r0, 800c412 <udp_connect+0x1e>
 800c3fe:	4b16      	ldr	r3, [pc, #88]	; (800c458 <udp_connect+0x64>)
 800c400:	f240 4235 	movw	r2, #1077	; 0x435
 800c404:	4915      	ldr	r1, [pc, #84]	; (800c45c <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c406:	4816      	ldr	r0, [pc, #88]	; (800c460 <udp_connect+0x6c>)
 800c408:	f000 f960 	bl	800c6cc <iprintf>
 800c40c:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800c410:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c412:	b921      	cbnz	r1, 800c41e <udp_connect+0x2a>
 800c414:	4b10      	ldr	r3, [pc, #64]	; (800c458 <udp_connect+0x64>)
 800c416:	f240 4236 	movw	r2, #1078	; 0x436
 800c41a:	4912      	ldr	r1, [pc, #72]	; (800c464 <udp_connect+0x70>)
 800c41c:	e7f3      	b.n	800c406 <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800c41e:	8a42      	ldrh	r2, [r0, #18]
 800c420:	b16a      	cbz	r2, 800c43e <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c422:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800c424:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c426:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c428:	7c23      	ldrb	r3, [r4, #16]
 800c42a:	f043 0304 	orr.w	r3, r3, #4
 800c42e:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c430:	4b0d      	ldr	r3, [pc, #52]	; (800c468 <udp_connect+0x74>)
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	4610      	mov	r0, r2
 800c436:	b940      	cbnz	r0, 800c44a <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800c438:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800c43a:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800c43c:	e7e8      	b.n	800c410 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c43e:	4601      	mov	r1, r0
 800c440:	f7ff fe98 	bl	800c174 <udp_bind>
    if (err != ERR_OK) {
 800c444:	2800      	cmp	r0, #0
 800c446:	d0ec      	beq.n	800c422 <udp_connect+0x2e>
 800c448:	e7e2      	b.n	800c410 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800c44a:	42a0      	cmp	r0, r4
 800c44c:	d001      	beq.n	800c452 <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c44e:	68c0      	ldr	r0, [r0, #12]
 800c450:	e7f1      	b.n	800c436 <udp_connect+0x42>
      return ERR_OK;
 800c452:	2000      	movs	r0, #0
 800c454:	e7dc      	b.n	800c410 <udp_connect+0x1c>
 800c456:	bf00      	nop
 800c458:	08013985 	.word	0x08013985
 800c45c:	08013c1b 	.word	0x08013c1b
 800c460:	0801153a 	.word	0x0801153a
 800c464:	08013c34 	.word	0x08013c34
 800c468:	200087c0 	.word	0x200087c0

0800c46c <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c46c:	b930      	cbnz	r0, 800c47c <udp_recv+0x10>
 800c46e:	4b05      	ldr	r3, [pc, #20]	; (800c484 <udp_recv+0x18>)
 800c470:	f240 428a 	movw	r2, #1162	; 0x48a
 800c474:	4904      	ldr	r1, [pc, #16]	; (800c488 <udp_recv+0x1c>)
 800c476:	4805      	ldr	r0, [pc, #20]	; (800c48c <udp_recv+0x20>)
 800c478:	f000 b928 	b.w	800c6cc <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800c47c:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	08013985 	.word	0x08013985
 800c488:	08013c6c 	.word	0x08013c6c
 800c48c:	0801153a 	.word	0x0801153a

0800c490 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c490:	4601      	mov	r1, r0
 800c492:	b930      	cbnz	r0, 800c4a2 <udp_remove+0x12>
 800c494:	4b0d      	ldr	r3, [pc, #52]	; (800c4cc <udp_remove+0x3c>)
 800c496:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c49a:	490d      	ldr	r1, [pc, #52]	; (800c4d0 <udp_remove+0x40>)
 800c49c:	480d      	ldr	r0, [pc, #52]	; (800c4d4 <udp_remove+0x44>)
 800c49e:	f000 b915 	b.w	800c6cc <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c4a2:	4a0d      	ldr	r2, [pc, #52]	; (800c4d8 <udp_remove+0x48>)
 800c4a4:	6813      	ldr	r3, [r2, #0]
 800c4a6:	4283      	cmp	r3, r0
 800c4a8:	d105      	bne.n	800c4b6 <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c4aa:	68c3      	ldr	r3, [r0, #12]
 800c4ac:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	f7fb be1e 	b.w	80080f0 <memp_free>
 800c4b4:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d0f9      	beq.n	800c4ae <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c4ba:	68da      	ldr	r2, [r3, #12]
 800c4bc:	2a00      	cmp	r2, #0
 800c4be:	d0f6      	beq.n	800c4ae <udp_remove+0x1e>
 800c4c0:	428a      	cmp	r2, r1
 800c4c2:	d1f7      	bne.n	800c4b4 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800c4c4:	68ca      	ldr	r2, [r1, #12]
 800c4c6:	60da      	str	r2, [r3, #12]
        break;
 800c4c8:	e7f1      	b.n	800c4ae <udp_remove+0x1e>
 800c4ca:	bf00      	nop
 800c4cc:	08013985 	.word	0x08013985
 800c4d0:	08013c82 	.word	0x08013c82
 800c4d4:	0801153a 	.word	0x0801153a
 800c4d8:	200087c0 	.word	0x200087c0

0800c4dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c4dc:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c4de:	2000      	movs	r0, #0
 800c4e0:	f7fb fdea 	bl	80080b8 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	b128      	cbz	r0, 800c4f4 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	f000 f8e6 	bl	800c6bc <memset>
    pcb->ttl = UDP_TTL;
 800c4f0:	23ff      	movs	r3, #255	; 0xff
 800c4f2:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	bd10      	pop	{r4, pc}

0800c4f8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c4f8:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c4fa:	b138      	cbz	r0, 800c50c <udp_netif_ip_addr_changed+0x14>
 800c4fc:	6803      	ldr	r3, [r0, #0]
 800c4fe:	b12b      	cbz	r3, 800c50c <udp_netif_ip_addr_changed+0x14>
 800c500:	b121      	cbz	r1, 800c50c <udp_netif_ip_addr_changed+0x14>
 800c502:	680b      	ldr	r3, [r1, #0]
 800c504:	b113      	cbz	r3, 800c50c <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c506:	4b06      	ldr	r3, [pc, #24]	; (800c520 <udp_netif_ip_addr_changed+0x28>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	b903      	cbnz	r3, 800c50e <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800c50c:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c50e:	681c      	ldr	r4, [r3, #0]
 800c510:	6802      	ldr	r2, [r0, #0]
 800c512:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c514:	bf04      	itt	eq
 800c516:	680a      	ldreq	r2, [r1, #0]
 800c518:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	e7f5      	b.n	800c50a <udp_netif_ip_addr_changed+0x12>
 800c51e:	bf00      	nop
 800c520:	200087c0 	.word	0x200087c0

0800c524 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800c524:	8943      	ldrh	r3, [r0, #10]
 800c526:	2b0e      	cmp	r3, #14
{
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	4604      	mov	r4, r0
 800c52c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800c52e:	d91a      	bls.n	800c566 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800c530:	7bc3      	ldrb	r3, [r0, #15]
 800c532:	b91b      	cbnz	r3, 800c53c <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800c534:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800c538:	3301      	adds	r3, #1
 800c53a:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c53c:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c53e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800c540:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800c542:	07d9      	lsls	r1, r3, #31
 800c544:	d50a      	bpl.n	800c55c <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c546:	2b01      	cmp	r3, #1
 800c548:	d111      	bne.n	800c56e <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c54a:	7843      	ldrb	r3, [r0, #1]
 800c54c:	b933      	cbnz	r3, 800c55c <ethernet_input+0x38>
 800c54e:	7883      	ldrb	r3, [r0, #2]
 800c550:	2b5e      	cmp	r3, #94	; 0x5e
 800c552:	d103      	bne.n	800c55c <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800c554:	7b63      	ldrb	r3, [r4, #13]
 800c556:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c55a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800c55c:	2e08      	cmp	r6, #8
 800c55e:	d010      	beq.n	800c582 <ethernet_input+0x5e>
 800c560:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800c564:	d01d      	beq.n	800c5a2 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800c566:	4620      	mov	r0, r4
 800c568:	f7fc f832 	bl	80085d0 <pbuf_free>
  return ERR_OK;
 800c56c:	e017      	b.n	800c59e <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c56e:	2206      	movs	r2, #6
 800c570:	4913      	ldr	r1, [pc, #76]	; (800c5c0 <ethernet_input+0x9c>)
 800c572:	f000 f889 	bl	800c688 <memcmp>
 800c576:	2800      	cmp	r0, #0
 800c578:	d1f0      	bne.n	800c55c <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800c57a:	7b63      	ldrb	r3, [r4, #13]
 800c57c:	f043 0308 	orr.w	r3, r3, #8
 800c580:	e7eb      	b.n	800c55a <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c582:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800c586:	071a      	lsls	r2, r3, #28
 800c588:	d5ed      	bpl.n	800c566 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c58a:	210e      	movs	r1, #14
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7fb ffeb 	bl	8008568 <pbuf_remove_header>
 800c592:	2800      	cmp	r0, #0
 800c594:	d1e7      	bne.n	800c566 <ethernet_input+0x42>
        ip4_input(p, netif);
 800c596:	4629      	mov	r1, r5
 800c598:	4620      	mov	r0, r4
 800c59a:	f7fa fd65 	bl	8007068 <ip4_input>
}
 800c59e:	2000      	movs	r0, #0
 800c5a0:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c5a2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800c5a6:	071b      	lsls	r3, r3, #28
 800c5a8:	d5dd      	bpl.n	800c566 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c5aa:	210e      	movs	r1, #14
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f7fb ffdb 	bl	8008568 <pbuf_remove_header>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d1d7      	bne.n	800c566 <ethernet_input+0x42>
        etharp_input(p, netif);
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f7fa f991 	bl	80068e0 <etharp_input>
      break;
 800c5be:	e7ee      	b.n	800c59e <ethernet_input+0x7a>
 800c5c0:	08011438 	.word	0x08011438

0800c5c4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800c5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c8:	460d      	mov	r5, r1
 800c5ca:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800c5cc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800c5d0:	4616      	mov	r6, r2
 800c5d2:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800c5d4:	f7fb fabe 	bl	8007b54 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800c5d8:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800c5da:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800c5dc:	4628      	mov	r0, r5
 800c5de:	f7fb ffc0 	bl	8008562 <pbuf_add_header>
 800c5e2:	b9e0      	cbnz	r0, 800c61e <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800c5e4:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800c5e6:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	600b      	str	r3, [r1, #0]
 800c5ee:	88bb      	ldrh	r3, [r7, #4]
 800c5f0:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800c5f2:	6833      	ldr	r3, [r6, #0]
 800c5f4:	f8c1 3006 	str.w	r3, [r1, #6]
 800c5f8:	88b3      	ldrh	r3, [r6, #4]
 800c5fa:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c5fc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800c600:	2b06      	cmp	r3, #6
 800c602:	d006      	beq.n	800c612 <ethernet_output+0x4e>
 800c604:	4b08      	ldr	r3, [pc, #32]	; (800c628 <ethernet_output+0x64>)
 800c606:	f240 1233 	movw	r2, #307	; 0x133
 800c60a:	4908      	ldr	r1, [pc, #32]	; (800c62c <ethernet_output+0x68>)
 800c60c:	4808      	ldr	r0, [pc, #32]	; (800c630 <ethernet_output+0x6c>)
 800c60e:	f000 f85d 	bl	800c6cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800c612:	69a3      	ldr	r3, [r4, #24]
 800c614:	4629      	mov	r1, r5
 800c616:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800c618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800c61c:	4718      	bx	r3
}
 800c61e:	f06f 0001 	mvn.w	r0, #1
 800c622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c626:	bf00      	nop
 800c628:	08013c9a 	.word	0x08013c9a
 800c62c:	08013cf2 	.word	0x08013cf2
 800c630:	0801153a 	.word	0x0801153a

0800c634 <__errno>:
 800c634:	4b01      	ldr	r3, [pc, #4]	; (800c63c <__errno+0x8>)
 800c636:	6818      	ldr	r0, [r3, #0]
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	20000138 	.word	0x20000138

0800c640 <__libc_init_array>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	4e0d      	ldr	r6, [pc, #52]	; (800c678 <__libc_init_array+0x38>)
 800c644:	4c0d      	ldr	r4, [pc, #52]	; (800c67c <__libc_init_array+0x3c>)
 800c646:	1ba4      	subs	r4, r4, r6
 800c648:	10a4      	asrs	r4, r4, #2
 800c64a:	2500      	movs	r5, #0
 800c64c:	42a5      	cmp	r5, r4
 800c64e:	d109      	bne.n	800c664 <__libc_init_array+0x24>
 800c650:	4e0b      	ldr	r6, [pc, #44]	; (800c680 <__libc_init_array+0x40>)
 800c652:	4c0c      	ldr	r4, [pc, #48]	; (800c684 <__libc_init_array+0x44>)
 800c654:	f000 ffc6 	bl	800d5e4 <_init>
 800c658:	1ba4      	subs	r4, r4, r6
 800c65a:	10a4      	asrs	r4, r4, #2
 800c65c:	2500      	movs	r5, #0
 800c65e:	42a5      	cmp	r5, r4
 800c660:	d105      	bne.n	800c66e <__libc_init_array+0x2e>
 800c662:	bd70      	pop	{r4, r5, r6, pc}
 800c664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c668:	4798      	blx	r3
 800c66a:	3501      	adds	r5, #1
 800c66c:	e7ee      	b.n	800c64c <__libc_init_array+0xc>
 800c66e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c672:	4798      	blx	r3
 800c674:	3501      	adds	r5, #1
 800c676:	e7f2      	b.n	800c65e <__libc_init_array+0x1e>
 800c678:	08013dc4 	.word	0x08013dc4
 800c67c:	08013dc4 	.word	0x08013dc4
 800c680:	08013dc4 	.word	0x08013dc4
 800c684:	08013dc8 	.word	0x08013dc8

0800c688 <memcmp>:
 800c688:	b530      	push	{r4, r5, lr}
 800c68a:	2400      	movs	r4, #0
 800c68c:	42a2      	cmp	r2, r4
 800c68e:	d101      	bne.n	800c694 <memcmp+0xc>
 800c690:	2000      	movs	r0, #0
 800c692:	e007      	b.n	800c6a4 <memcmp+0x1c>
 800c694:	5d03      	ldrb	r3, [r0, r4]
 800c696:	3401      	adds	r4, #1
 800c698:	190d      	adds	r5, r1, r4
 800c69a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800c69e:	42ab      	cmp	r3, r5
 800c6a0:	d0f4      	beq.n	800c68c <memcmp+0x4>
 800c6a2:	1b58      	subs	r0, r3, r5
 800c6a4:	bd30      	pop	{r4, r5, pc}

0800c6a6 <memcpy>:
 800c6a6:	b510      	push	{r4, lr}
 800c6a8:	1e43      	subs	r3, r0, #1
 800c6aa:	440a      	add	r2, r1
 800c6ac:	4291      	cmp	r1, r2
 800c6ae:	d100      	bne.n	800c6b2 <memcpy+0xc>
 800c6b0:	bd10      	pop	{r4, pc}
 800c6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6ba:	e7f7      	b.n	800c6ac <memcpy+0x6>

0800c6bc <memset>:
 800c6bc:	4402      	add	r2, r0
 800c6be:	4603      	mov	r3, r0
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d100      	bne.n	800c6c6 <memset+0xa>
 800c6c4:	4770      	bx	lr
 800c6c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6ca:	e7f9      	b.n	800c6c0 <memset+0x4>

0800c6cc <iprintf>:
 800c6cc:	b40f      	push	{r0, r1, r2, r3}
 800c6ce:	4b0a      	ldr	r3, [pc, #40]	; (800c6f8 <iprintf+0x2c>)
 800c6d0:	b513      	push	{r0, r1, r4, lr}
 800c6d2:	681c      	ldr	r4, [r3, #0]
 800c6d4:	b124      	cbz	r4, 800c6e0 <iprintf+0x14>
 800c6d6:	69a3      	ldr	r3, [r4, #24]
 800c6d8:	b913      	cbnz	r3, 800c6e0 <iprintf+0x14>
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f000 fa5e 	bl	800cb9c <__sinit>
 800c6e0:	ab05      	add	r3, sp, #20
 800c6e2:	9a04      	ldr	r2, [sp, #16]
 800c6e4:	68a1      	ldr	r1, [r4, #8]
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 fc1f 	bl	800cf2c <_vfiprintf_r>
 800c6ee:	b002      	add	sp, #8
 800c6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6f4:	b004      	add	sp, #16
 800c6f6:	4770      	bx	lr
 800c6f8:	20000138 	.word	0x20000138

0800c6fc <_puts_r>:
 800c6fc:	b570      	push	{r4, r5, r6, lr}
 800c6fe:	460e      	mov	r6, r1
 800c700:	4605      	mov	r5, r0
 800c702:	b118      	cbz	r0, 800c70c <_puts_r+0x10>
 800c704:	6983      	ldr	r3, [r0, #24]
 800c706:	b90b      	cbnz	r3, 800c70c <_puts_r+0x10>
 800c708:	f000 fa48 	bl	800cb9c <__sinit>
 800c70c:	69ab      	ldr	r3, [r5, #24]
 800c70e:	68ac      	ldr	r4, [r5, #8]
 800c710:	b913      	cbnz	r3, 800c718 <_puts_r+0x1c>
 800c712:	4628      	mov	r0, r5
 800c714:	f000 fa42 	bl	800cb9c <__sinit>
 800c718:	4b23      	ldr	r3, [pc, #140]	; (800c7a8 <_puts_r+0xac>)
 800c71a:	429c      	cmp	r4, r3
 800c71c:	d117      	bne.n	800c74e <_puts_r+0x52>
 800c71e:	686c      	ldr	r4, [r5, #4]
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	071b      	lsls	r3, r3, #28
 800c724:	d51d      	bpl.n	800c762 <_puts_r+0x66>
 800c726:	6923      	ldr	r3, [r4, #16]
 800c728:	b1db      	cbz	r3, 800c762 <_puts_r+0x66>
 800c72a:	3e01      	subs	r6, #1
 800c72c:	68a3      	ldr	r3, [r4, #8]
 800c72e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c732:	3b01      	subs	r3, #1
 800c734:	60a3      	str	r3, [r4, #8]
 800c736:	b9e9      	cbnz	r1, 800c774 <_puts_r+0x78>
 800c738:	2b00      	cmp	r3, #0
 800c73a:	da2e      	bge.n	800c79a <_puts_r+0x9e>
 800c73c:	4622      	mov	r2, r4
 800c73e:	210a      	movs	r1, #10
 800c740:	4628      	mov	r0, r5
 800c742:	f000 f87b 	bl	800c83c <__swbuf_r>
 800c746:	3001      	adds	r0, #1
 800c748:	d011      	beq.n	800c76e <_puts_r+0x72>
 800c74a:	200a      	movs	r0, #10
 800c74c:	e011      	b.n	800c772 <_puts_r+0x76>
 800c74e:	4b17      	ldr	r3, [pc, #92]	; (800c7ac <_puts_r+0xb0>)
 800c750:	429c      	cmp	r4, r3
 800c752:	d101      	bne.n	800c758 <_puts_r+0x5c>
 800c754:	68ac      	ldr	r4, [r5, #8]
 800c756:	e7e3      	b.n	800c720 <_puts_r+0x24>
 800c758:	4b15      	ldr	r3, [pc, #84]	; (800c7b0 <_puts_r+0xb4>)
 800c75a:	429c      	cmp	r4, r3
 800c75c:	bf08      	it	eq
 800c75e:	68ec      	ldreq	r4, [r5, #12]
 800c760:	e7de      	b.n	800c720 <_puts_r+0x24>
 800c762:	4621      	mov	r1, r4
 800c764:	4628      	mov	r0, r5
 800c766:	f000 f8bb 	bl	800c8e0 <__swsetup_r>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d0dd      	beq.n	800c72a <_puts_r+0x2e>
 800c76e:	f04f 30ff 	mov.w	r0, #4294967295
 800c772:	bd70      	pop	{r4, r5, r6, pc}
 800c774:	2b00      	cmp	r3, #0
 800c776:	da04      	bge.n	800c782 <_puts_r+0x86>
 800c778:	69a2      	ldr	r2, [r4, #24]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	dc06      	bgt.n	800c78c <_puts_r+0x90>
 800c77e:	290a      	cmp	r1, #10
 800c780:	d004      	beq.n	800c78c <_puts_r+0x90>
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	6022      	str	r2, [r4, #0]
 800c788:	7019      	strb	r1, [r3, #0]
 800c78a:	e7cf      	b.n	800c72c <_puts_r+0x30>
 800c78c:	4622      	mov	r2, r4
 800c78e:	4628      	mov	r0, r5
 800c790:	f000 f854 	bl	800c83c <__swbuf_r>
 800c794:	3001      	adds	r0, #1
 800c796:	d1c9      	bne.n	800c72c <_puts_r+0x30>
 800c798:	e7e9      	b.n	800c76e <_puts_r+0x72>
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	200a      	movs	r0, #10
 800c79e:	1c5a      	adds	r2, r3, #1
 800c7a0:	6022      	str	r2, [r4, #0]
 800c7a2:	7018      	strb	r0, [r3, #0]
 800c7a4:	e7e5      	b.n	800c772 <_puts_r+0x76>
 800c7a6:	bf00      	nop
 800c7a8:	08013d48 	.word	0x08013d48
 800c7ac:	08013d68 	.word	0x08013d68
 800c7b0:	08013d28 	.word	0x08013d28

0800c7b4 <puts>:
 800c7b4:	4b02      	ldr	r3, [pc, #8]	; (800c7c0 <puts+0xc>)
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	6818      	ldr	r0, [r3, #0]
 800c7ba:	f7ff bf9f 	b.w	800c6fc <_puts_r>
 800c7be:	bf00      	nop
 800c7c0:	20000138 	.word	0x20000138

0800c7c4 <rand>:
 800c7c4:	b538      	push	{r3, r4, r5, lr}
 800c7c6:	4b13      	ldr	r3, [pc, #76]	; (800c814 <rand+0x50>)
 800c7c8:	681c      	ldr	r4, [r3, #0]
 800c7ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c7cc:	b97b      	cbnz	r3, 800c7ee <rand+0x2a>
 800c7ce:	2018      	movs	r0, #24
 800c7d0:	f000 fad2 	bl	800cd78 <malloc>
 800c7d4:	4a10      	ldr	r2, [pc, #64]	; (800c818 <rand+0x54>)
 800c7d6:	4b11      	ldr	r3, [pc, #68]	; (800c81c <rand+0x58>)
 800c7d8:	63a0      	str	r0, [r4, #56]	; 0x38
 800c7da:	e9c0 2300 	strd	r2, r3, [r0]
 800c7de:	4b10      	ldr	r3, [pc, #64]	; (800c820 <rand+0x5c>)
 800c7e0:	6083      	str	r3, [r0, #8]
 800c7e2:	230b      	movs	r3, #11
 800c7e4:	8183      	strh	r3, [r0, #12]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c7ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c7f0:	480c      	ldr	r0, [pc, #48]	; (800c824 <rand+0x60>)
 800c7f2:	690a      	ldr	r2, [r1, #16]
 800c7f4:	694b      	ldr	r3, [r1, #20]
 800c7f6:	4c0c      	ldr	r4, [pc, #48]	; (800c828 <rand+0x64>)
 800c7f8:	4350      	muls	r0, r2
 800c7fa:	fb04 0003 	mla	r0, r4, r3, r0
 800c7fe:	fba2 2304 	umull	r2, r3, r2, r4
 800c802:	4403      	add	r3, r0
 800c804:	1c54      	adds	r4, r2, #1
 800c806:	f143 0500 	adc.w	r5, r3, #0
 800c80a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800c80e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800c812:	bd38      	pop	{r3, r4, r5, pc}
 800c814:	20000138 	.word	0x20000138
 800c818:	abcd330e 	.word	0xabcd330e
 800c81c:	e66d1234 	.word	0xe66d1234
 800c820:	0005deec 	.word	0x0005deec
 800c824:	5851f42d 	.word	0x5851f42d
 800c828:	4c957f2d 	.word	0x4c957f2d

0800c82c <strcpy>:
 800c82c:	4603      	mov	r3, r0
 800c82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c832:	f803 2b01 	strb.w	r2, [r3], #1
 800c836:	2a00      	cmp	r2, #0
 800c838:	d1f9      	bne.n	800c82e <strcpy+0x2>
 800c83a:	4770      	bx	lr

0800c83c <__swbuf_r>:
 800c83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83e:	460e      	mov	r6, r1
 800c840:	4614      	mov	r4, r2
 800c842:	4605      	mov	r5, r0
 800c844:	b118      	cbz	r0, 800c84e <__swbuf_r+0x12>
 800c846:	6983      	ldr	r3, [r0, #24]
 800c848:	b90b      	cbnz	r3, 800c84e <__swbuf_r+0x12>
 800c84a:	f000 f9a7 	bl	800cb9c <__sinit>
 800c84e:	4b21      	ldr	r3, [pc, #132]	; (800c8d4 <__swbuf_r+0x98>)
 800c850:	429c      	cmp	r4, r3
 800c852:	d12a      	bne.n	800c8aa <__swbuf_r+0x6e>
 800c854:	686c      	ldr	r4, [r5, #4]
 800c856:	69a3      	ldr	r3, [r4, #24]
 800c858:	60a3      	str	r3, [r4, #8]
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	071a      	lsls	r2, r3, #28
 800c85e:	d52e      	bpl.n	800c8be <__swbuf_r+0x82>
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	b363      	cbz	r3, 800c8be <__swbuf_r+0x82>
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	6820      	ldr	r0, [r4, #0]
 800c868:	1ac0      	subs	r0, r0, r3
 800c86a:	6963      	ldr	r3, [r4, #20]
 800c86c:	b2f6      	uxtb	r6, r6
 800c86e:	4283      	cmp	r3, r0
 800c870:	4637      	mov	r7, r6
 800c872:	dc04      	bgt.n	800c87e <__swbuf_r+0x42>
 800c874:	4621      	mov	r1, r4
 800c876:	4628      	mov	r0, r5
 800c878:	f000 f926 	bl	800cac8 <_fflush_r>
 800c87c:	bb28      	cbnz	r0, 800c8ca <__swbuf_r+0x8e>
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	3b01      	subs	r3, #1
 800c882:	60a3      	str	r3, [r4, #8]
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	6022      	str	r2, [r4, #0]
 800c88a:	701e      	strb	r6, [r3, #0]
 800c88c:	6963      	ldr	r3, [r4, #20]
 800c88e:	3001      	adds	r0, #1
 800c890:	4283      	cmp	r3, r0
 800c892:	d004      	beq.n	800c89e <__swbuf_r+0x62>
 800c894:	89a3      	ldrh	r3, [r4, #12]
 800c896:	07db      	lsls	r3, r3, #31
 800c898:	d519      	bpl.n	800c8ce <__swbuf_r+0x92>
 800c89a:	2e0a      	cmp	r6, #10
 800c89c:	d117      	bne.n	800c8ce <__swbuf_r+0x92>
 800c89e:	4621      	mov	r1, r4
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f000 f911 	bl	800cac8 <_fflush_r>
 800c8a6:	b190      	cbz	r0, 800c8ce <__swbuf_r+0x92>
 800c8a8:	e00f      	b.n	800c8ca <__swbuf_r+0x8e>
 800c8aa:	4b0b      	ldr	r3, [pc, #44]	; (800c8d8 <__swbuf_r+0x9c>)
 800c8ac:	429c      	cmp	r4, r3
 800c8ae:	d101      	bne.n	800c8b4 <__swbuf_r+0x78>
 800c8b0:	68ac      	ldr	r4, [r5, #8]
 800c8b2:	e7d0      	b.n	800c856 <__swbuf_r+0x1a>
 800c8b4:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <__swbuf_r+0xa0>)
 800c8b6:	429c      	cmp	r4, r3
 800c8b8:	bf08      	it	eq
 800c8ba:	68ec      	ldreq	r4, [r5, #12]
 800c8bc:	e7cb      	b.n	800c856 <__swbuf_r+0x1a>
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	f000 f80d 	bl	800c8e0 <__swsetup_r>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d0cc      	beq.n	800c864 <__swbuf_r+0x28>
 800c8ca:	f04f 37ff 	mov.w	r7, #4294967295
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	08013d48 	.word	0x08013d48
 800c8d8:	08013d68 	.word	0x08013d68
 800c8dc:	08013d28 	.word	0x08013d28

0800c8e0 <__swsetup_r>:
 800c8e0:	4b32      	ldr	r3, [pc, #200]	; (800c9ac <__swsetup_r+0xcc>)
 800c8e2:	b570      	push	{r4, r5, r6, lr}
 800c8e4:	681d      	ldr	r5, [r3, #0]
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	b125      	cbz	r5, 800c8f6 <__swsetup_r+0x16>
 800c8ec:	69ab      	ldr	r3, [r5, #24]
 800c8ee:	b913      	cbnz	r3, 800c8f6 <__swsetup_r+0x16>
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	f000 f953 	bl	800cb9c <__sinit>
 800c8f6:	4b2e      	ldr	r3, [pc, #184]	; (800c9b0 <__swsetup_r+0xd0>)
 800c8f8:	429c      	cmp	r4, r3
 800c8fa:	d10f      	bne.n	800c91c <__swsetup_r+0x3c>
 800c8fc:	686c      	ldr	r4, [r5, #4]
 800c8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c902:	b29a      	uxth	r2, r3
 800c904:	0715      	lsls	r5, r2, #28
 800c906:	d42c      	bmi.n	800c962 <__swsetup_r+0x82>
 800c908:	06d0      	lsls	r0, r2, #27
 800c90a:	d411      	bmi.n	800c930 <__swsetup_r+0x50>
 800c90c:	2209      	movs	r2, #9
 800c90e:	6032      	str	r2, [r6, #0]
 800c910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c914:	81a3      	strh	r3, [r4, #12]
 800c916:	f04f 30ff 	mov.w	r0, #4294967295
 800c91a:	e03e      	b.n	800c99a <__swsetup_r+0xba>
 800c91c:	4b25      	ldr	r3, [pc, #148]	; (800c9b4 <__swsetup_r+0xd4>)
 800c91e:	429c      	cmp	r4, r3
 800c920:	d101      	bne.n	800c926 <__swsetup_r+0x46>
 800c922:	68ac      	ldr	r4, [r5, #8]
 800c924:	e7eb      	b.n	800c8fe <__swsetup_r+0x1e>
 800c926:	4b24      	ldr	r3, [pc, #144]	; (800c9b8 <__swsetup_r+0xd8>)
 800c928:	429c      	cmp	r4, r3
 800c92a:	bf08      	it	eq
 800c92c:	68ec      	ldreq	r4, [r5, #12]
 800c92e:	e7e6      	b.n	800c8fe <__swsetup_r+0x1e>
 800c930:	0751      	lsls	r1, r2, #29
 800c932:	d512      	bpl.n	800c95a <__swsetup_r+0x7a>
 800c934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c936:	b141      	cbz	r1, 800c94a <__swsetup_r+0x6a>
 800c938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c93c:	4299      	cmp	r1, r3
 800c93e:	d002      	beq.n	800c946 <__swsetup_r+0x66>
 800c940:	4630      	mov	r0, r6
 800c942:	f000 fa21 	bl	800cd88 <_free_r>
 800c946:	2300      	movs	r3, #0
 800c948:	6363      	str	r3, [r4, #52]	; 0x34
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c950:	81a3      	strh	r3, [r4, #12]
 800c952:	2300      	movs	r3, #0
 800c954:	6063      	str	r3, [r4, #4]
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	f043 0308 	orr.w	r3, r3, #8
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	b94b      	cbnz	r3, 800c97a <__swsetup_r+0x9a>
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c96c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c970:	d003      	beq.n	800c97a <__swsetup_r+0x9a>
 800c972:	4621      	mov	r1, r4
 800c974:	4630      	mov	r0, r6
 800c976:	f000 f9bf 	bl	800ccf8 <__smakebuf_r>
 800c97a:	89a2      	ldrh	r2, [r4, #12]
 800c97c:	f012 0301 	ands.w	r3, r2, #1
 800c980:	d00c      	beq.n	800c99c <__swsetup_r+0xbc>
 800c982:	2300      	movs	r3, #0
 800c984:	60a3      	str	r3, [r4, #8]
 800c986:	6963      	ldr	r3, [r4, #20]
 800c988:	425b      	negs	r3, r3
 800c98a:	61a3      	str	r3, [r4, #24]
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	b953      	cbnz	r3, 800c9a6 <__swsetup_r+0xc6>
 800c990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c994:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c998:	d1ba      	bne.n	800c910 <__swsetup_r+0x30>
 800c99a:	bd70      	pop	{r4, r5, r6, pc}
 800c99c:	0792      	lsls	r2, r2, #30
 800c99e:	bf58      	it	pl
 800c9a0:	6963      	ldrpl	r3, [r4, #20]
 800c9a2:	60a3      	str	r3, [r4, #8]
 800c9a4:	e7f2      	b.n	800c98c <__swsetup_r+0xac>
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	e7f7      	b.n	800c99a <__swsetup_r+0xba>
 800c9aa:	bf00      	nop
 800c9ac:	20000138 	.word	0x20000138
 800c9b0:	08013d48 	.word	0x08013d48
 800c9b4:	08013d68 	.word	0x08013d68
 800c9b8:	08013d28 	.word	0x08013d28

0800c9bc <__sflush_r>:
 800c9bc:	898a      	ldrh	r2, [r1, #12]
 800c9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	0710      	lsls	r0, r2, #28
 800c9c6:	460c      	mov	r4, r1
 800c9c8:	d458      	bmi.n	800ca7c <__sflush_r+0xc0>
 800c9ca:	684b      	ldr	r3, [r1, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	dc05      	bgt.n	800c9dc <__sflush_r+0x20>
 800c9d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dc02      	bgt.n	800c9dc <__sflush_r+0x20>
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	d0f9      	beq.n	800c9d6 <__sflush_r+0x1a>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9e8:	682f      	ldr	r7, [r5, #0]
 800c9ea:	6a21      	ldr	r1, [r4, #32]
 800c9ec:	602b      	str	r3, [r5, #0]
 800c9ee:	d032      	beq.n	800ca56 <__sflush_r+0x9a>
 800c9f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	075a      	lsls	r2, r3, #29
 800c9f6:	d505      	bpl.n	800ca04 <__sflush_r+0x48>
 800c9f8:	6863      	ldr	r3, [r4, #4]
 800c9fa:	1ac0      	subs	r0, r0, r3
 800c9fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9fe:	b10b      	cbz	r3, 800ca04 <__sflush_r+0x48>
 800ca00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca02:	1ac0      	subs	r0, r0, r3
 800ca04:	2300      	movs	r3, #0
 800ca06:	4602      	mov	r2, r0
 800ca08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca0a:	6a21      	ldr	r1, [r4, #32]
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	47b0      	blx	r6
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	89a3      	ldrh	r3, [r4, #12]
 800ca14:	d106      	bne.n	800ca24 <__sflush_r+0x68>
 800ca16:	6829      	ldr	r1, [r5, #0]
 800ca18:	291d      	cmp	r1, #29
 800ca1a:	d848      	bhi.n	800caae <__sflush_r+0xf2>
 800ca1c:	4a29      	ldr	r2, [pc, #164]	; (800cac4 <__sflush_r+0x108>)
 800ca1e:	40ca      	lsrs	r2, r1
 800ca20:	07d6      	lsls	r6, r2, #31
 800ca22:	d544      	bpl.n	800caae <__sflush_r+0xf2>
 800ca24:	2200      	movs	r2, #0
 800ca26:	6062      	str	r2, [r4, #4]
 800ca28:	04d9      	lsls	r1, r3, #19
 800ca2a:	6922      	ldr	r2, [r4, #16]
 800ca2c:	6022      	str	r2, [r4, #0]
 800ca2e:	d504      	bpl.n	800ca3a <__sflush_r+0x7e>
 800ca30:	1c42      	adds	r2, r0, #1
 800ca32:	d101      	bne.n	800ca38 <__sflush_r+0x7c>
 800ca34:	682b      	ldr	r3, [r5, #0]
 800ca36:	b903      	cbnz	r3, 800ca3a <__sflush_r+0x7e>
 800ca38:	6560      	str	r0, [r4, #84]	; 0x54
 800ca3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca3c:	602f      	str	r7, [r5, #0]
 800ca3e:	2900      	cmp	r1, #0
 800ca40:	d0c9      	beq.n	800c9d6 <__sflush_r+0x1a>
 800ca42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca46:	4299      	cmp	r1, r3
 800ca48:	d002      	beq.n	800ca50 <__sflush_r+0x94>
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f000 f99c 	bl	800cd88 <_free_r>
 800ca50:	2000      	movs	r0, #0
 800ca52:	6360      	str	r0, [r4, #52]	; 0x34
 800ca54:	e7c0      	b.n	800c9d8 <__sflush_r+0x1c>
 800ca56:	2301      	movs	r3, #1
 800ca58:	4628      	mov	r0, r5
 800ca5a:	47b0      	blx	r6
 800ca5c:	1c41      	adds	r1, r0, #1
 800ca5e:	d1c8      	bne.n	800c9f2 <__sflush_r+0x36>
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d0c5      	beq.n	800c9f2 <__sflush_r+0x36>
 800ca66:	2b1d      	cmp	r3, #29
 800ca68:	d001      	beq.n	800ca6e <__sflush_r+0xb2>
 800ca6a:	2b16      	cmp	r3, #22
 800ca6c:	d101      	bne.n	800ca72 <__sflush_r+0xb6>
 800ca6e:	602f      	str	r7, [r5, #0]
 800ca70:	e7b1      	b.n	800c9d6 <__sflush_r+0x1a>
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	e7ad      	b.n	800c9d8 <__sflush_r+0x1c>
 800ca7c:	690f      	ldr	r7, [r1, #16]
 800ca7e:	2f00      	cmp	r7, #0
 800ca80:	d0a9      	beq.n	800c9d6 <__sflush_r+0x1a>
 800ca82:	0793      	lsls	r3, r2, #30
 800ca84:	680e      	ldr	r6, [r1, #0]
 800ca86:	bf08      	it	eq
 800ca88:	694b      	ldreq	r3, [r1, #20]
 800ca8a:	600f      	str	r7, [r1, #0]
 800ca8c:	bf18      	it	ne
 800ca8e:	2300      	movne	r3, #0
 800ca90:	eba6 0807 	sub.w	r8, r6, r7
 800ca94:	608b      	str	r3, [r1, #8]
 800ca96:	f1b8 0f00 	cmp.w	r8, #0
 800ca9a:	dd9c      	ble.n	800c9d6 <__sflush_r+0x1a>
 800ca9c:	4643      	mov	r3, r8
 800ca9e:	463a      	mov	r2, r7
 800caa0:	6a21      	ldr	r1, [r4, #32]
 800caa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800caa4:	4628      	mov	r0, r5
 800caa6:	47b0      	blx	r6
 800caa8:	2800      	cmp	r0, #0
 800caaa:	dc06      	bgt.n	800caba <__sflush_r+0xfe>
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cab2:	81a3      	strh	r3, [r4, #12]
 800cab4:	f04f 30ff 	mov.w	r0, #4294967295
 800cab8:	e78e      	b.n	800c9d8 <__sflush_r+0x1c>
 800caba:	4407      	add	r7, r0
 800cabc:	eba8 0800 	sub.w	r8, r8, r0
 800cac0:	e7e9      	b.n	800ca96 <__sflush_r+0xda>
 800cac2:	bf00      	nop
 800cac4:	20400001 	.word	0x20400001

0800cac8 <_fflush_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	690b      	ldr	r3, [r1, #16]
 800cacc:	4605      	mov	r5, r0
 800cace:	460c      	mov	r4, r1
 800cad0:	b1db      	cbz	r3, 800cb0a <_fflush_r+0x42>
 800cad2:	b118      	cbz	r0, 800cadc <_fflush_r+0x14>
 800cad4:	6983      	ldr	r3, [r0, #24]
 800cad6:	b90b      	cbnz	r3, 800cadc <_fflush_r+0x14>
 800cad8:	f000 f860 	bl	800cb9c <__sinit>
 800cadc:	4b0c      	ldr	r3, [pc, #48]	; (800cb10 <_fflush_r+0x48>)
 800cade:	429c      	cmp	r4, r3
 800cae0:	d109      	bne.n	800caf6 <_fflush_r+0x2e>
 800cae2:	686c      	ldr	r4, [r5, #4]
 800cae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae8:	b17b      	cbz	r3, 800cb0a <_fflush_r+0x42>
 800caea:	4621      	mov	r1, r4
 800caec:	4628      	mov	r0, r5
 800caee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf2:	f7ff bf63 	b.w	800c9bc <__sflush_r>
 800caf6:	4b07      	ldr	r3, [pc, #28]	; (800cb14 <_fflush_r+0x4c>)
 800caf8:	429c      	cmp	r4, r3
 800cafa:	d101      	bne.n	800cb00 <_fflush_r+0x38>
 800cafc:	68ac      	ldr	r4, [r5, #8]
 800cafe:	e7f1      	b.n	800cae4 <_fflush_r+0x1c>
 800cb00:	4b05      	ldr	r3, [pc, #20]	; (800cb18 <_fflush_r+0x50>)
 800cb02:	429c      	cmp	r4, r3
 800cb04:	bf08      	it	eq
 800cb06:	68ec      	ldreq	r4, [r5, #12]
 800cb08:	e7ec      	b.n	800cae4 <_fflush_r+0x1c>
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	bd38      	pop	{r3, r4, r5, pc}
 800cb0e:	bf00      	nop
 800cb10:	08013d48 	.word	0x08013d48
 800cb14:	08013d68 	.word	0x08013d68
 800cb18:	08013d28 	.word	0x08013d28

0800cb1c <std>:
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	b510      	push	{r4, lr}
 800cb20:	4604      	mov	r4, r0
 800cb22:	e9c0 3300 	strd	r3, r3, [r0]
 800cb26:	6083      	str	r3, [r0, #8]
 800cb28:	8181      	strh	r1, [r0, #12]
 800cb2a:	6643      	str	r3, [r0, #100]	; 0x64
 800cb2c:	81c2      	strh	r2, [r0, #14]
 800cb2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb32:	6183      	str	r3, [r0, #24]
 800cb34:	4619      	mov	r1, r3
 800cb36:	2208      	movs	r2, #8
 800cb38:	305c      	adds	r0, #92	; 0x5c
 800cb3a:	f7ff fdbf 	bl	800c6bc <memset>
 800cb3e:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <std+0x38>)
 800cb40:	6263      	str	r3, [r4, #36]	; 0x24
 800cb42:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <std+0x3c>)
 800cb44:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb46:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <std+0x40>)
 800cb48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb4a:	4b05      	ldr	r3, [pc, #20]	; (800cb60 <std+0x44>)
 800cb4c:	6224      	str	r4, [r4, #32]
 800cb4e:	6323      	str	r3, [r4, #48]	; 0x30
 800cb50:	bd10      	pop	{r4, pc}
 800cb52:	bf00      	nop
 800cb54:	0800d489 	.word	0x0800d489
 800cb58:	0800d4ab 	.word	0x0800d4ab
 800cb5c:	0800d4e3 	.word	0x0800d4e3
 800cb60:	0800d507 	.word	0x0800d507

0800cb64 <_cleanup_r>:
 800cb64:	4901      	ldr	r1, [pc, #4]	; (800cb6c <_cleanup_r+0x8>)
 800cb66:	f000 b885 	b.w	800cc74 <_fwalk_reent>
 800cb6a:	bf00      	nop
 800cb6c:	0800cac9 	.word	0x0800cac9

0800cb70 <__sfmoreglue>:
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	1e4a      	subs	r2, r1, #1
 800cb74:	2568      	movs	r5, #104	; 0x68
 800cb76:	4355      	muls	r5, r2
 800cb78:	460e      	mov	r6, r1
 800cb7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb7e:	f000 f951 	bl	800ce24 <_malloc_r>
 800cb82:	4604      	mov	r4, r0
 800cb84:	b140      	cbz	r0, 800cb98 <__sfmoreglue+0x28>
 800cb86:	2100      	movs	r1, #0
 800cb88:	e9c0 1600 	strd	r1, r6, [r0]
 800cb8c:	300c      	adds	r0, #12
 800cb8e:	60a0      	str	r0, [r4, #8]
 800cb90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb94:	f7ff fd92 	bl	800c6bc <memset>
 800cb98:	4620      	mov	r0, r4
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}

0800cb9c <__sinit>:
 800cb9c:	6983      	ldr	r3, [r0, #24]
 800cb9e:	b510      	push	{r4, lr}
 800cba0:	4604      	mov	r4, r0
 800cba2:	bb33      	cbnz	r3, 800cbf2 <__sinit+0x56>
 800cba4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cba8:	6503      	str	r3, [r0, #80]	; 0x50
 800cbaa:	4b12      	ldr	r3, [pc, #72]	; (800cbf4 <__sinit+0x58>)
 800cbac:	4a12      	ldr	r2, [pc, #72]	; (800cbf8 <__sinit+0x5c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6282      	str	r2, [r0, #40]	; 0x28
 800cbb2:	4298      	cmp	r0, r3
 800cbb4:	bf04      	itt	eq
 800cbb6:	2301      	moveq	r3, #1
 800cbb8:	6183      	streq	r3, [r0, #24]
 800cbba:	f000 f81f 	bl	800cbfc <__sfp>
 800cbbe:	6060      	str	r0, [r4, #4]
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 f81b 	bl	800cbfc <__sfp>
 800cbc6:	60a0      	str	r0, [r4, #8]
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f000 f817 	bl	800cbfc <__sfp>
 800cbce:	2200      	movs	r2, #0
 800cbd0:	60e0      	str	r0, [r4, #12]
 800cbd2:	2104      	movs	r1, #4
 800cbd4:	6860      	ldr	r0, [r4, #4]
 800cbd6:	f7ff ffa1 	bl	800cb1c <std>
 800cbda:	2201      	movs	r2, #1
 800cbdc:	2109      	movs	r1, #9
 800cbde:	68a0      	ldr	r0, [r4, #8]
 800cbe0:	f7ff ff9c 	bl	800cb1c <std>
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	2112      	movs	r1, #18
 800cbe8:	68e0      	ldr	r0, [r4, #12]
 800cbea:	f7ff ff97 	bl	800cb1c <std>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	61a3      	str	r3, [r4, #24]
 800cbf2:	bd10      	pop	{r4, pc}
 800cbf4:	08013d24 	.word	0x08013d24
 800cbf8:	0800cb65 	.word	0x0800cb65

0800cbfc <__sfp>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	4b1b      	ldr	r3, [pc, #108]	; (800cc6c <__sfp+0x70>)
 800cc00:	681e      	ldr	r6, [r3, #0]
 800cc02:	69b3      	ldr	r3, [r6, #24]
 800cc04:	4607      	mov	r7, r0
 800cc06:	b913      	cbnz	r3, 800cc0e <__sfp+0x12>
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f7ff ffc7 	bl	800cb9c <__sinit>
 800cc0e:	3648      	adds	r6, #72	; 0x48
 800cc10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	d503      	bpl.n	800cc20 <__sfp+0x24>
 800cc18:	6833      	ldr	r3, [r6, #0]
 800cc1a:	b133      	cbz	r3, 800cc2a <__sfp+0x2e>
 800cc1c:	6836      	ldr	r6, [r6, #0]
 800cc1e:	e7f7      	b.n	800cc10 <__sfp+0x14>
 800cc20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc24:	b16d      	cbz	r5, 800cc42 <__sfp+0x46>
 800cc26:	3468      	adds	r4, #104	; 0x68
 800cc28:	e7f4      	b.n	800cc14 <__sfp+0x18>
 800cc2a:	2104      	movs	r1, #4
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	f7ff ff9f 	bl	800cb70 <__sfmoreglue>
 800cc32:	6030      	str	r0, [r6, #0]
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d1f1      	bne.n	800cc1c <__sfp+0x20>
 800cc38:	230c      	movs	r3, #12
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	4620      	mov	r0, r4
 800cc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc42:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <__sfp+0x74>)
 800cc44:	6665      	str	r5, [r4, #100]	; 0x64
 800cc46:	e9c4 5500 	strd	r5, r5, [r4]
 800cc4a:	60a5      	str	r5, [r4, #8]
 800cc4c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cc50:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cc54:	2208      	movs	r2, #8
 800cc56:	4629      	mov	r1, r5
 800cc58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc5c:	f7ff fd2e 	bl	800c6bc <memset>
 800cc60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc68:	e7e9      	b.n	800cc3e <__sfp+0x42>
 800cc6a:	bf00      	nop
 800cc6c:	08013d24 	.word	0x08013d24
 800cc70:	ffff0001 	.word	0xffff0001

0800cc74 <_fwalk_reent>:
 800cc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc78:	4680      	mov	r8, r0
 800cc7a:	4689      	mov	r9, r1
 800cc7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc80:	2600      	movs	r6, #0
 800cc82:	b914      	cbnz	r4, 800cc8a <_fwalk_reent+0x16>
 800cc84:	4630      	mov	r0, r6
 800cc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cc8e:	3f01      	subs	r7, #1
 800cc90:	d501      	bpl.n	800cc96 <_fwalk_reent+0x22>
 800cc92:	6824      	ldr	r4, [r4, #0]
 800cc94:	e7f5      	b.n	800cc82 <_fwalk_reent+0xe>
 800cc96:	89ab      	ldrh	r3, [r5, #12]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d907      	bls.n	800ccac <_fwalk_reent+0x38>
 800cc9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cca0:	3301      	adds	r3, #1
 800cca2:	d003      	beq.n	800ccac <_fwalk_reent+0x38>
 800cca4:	4629      	mov	r1, r5
 800cca6:	4640      	mov	r0, r8
 800cca8:	47c8      	blx	r9
 800ccaa:	4306      	orrs	r6, r0
 800ccac:	3568      	adds	r5, #104	; 0x68
 800ccae:	e7ee      	b.n	800cc8e <_fwalk_reent+0x1a>

0800ccb0 <__swhatbuf_r>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	460e      	mov	r6, r1
 800ccb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb8:	2900      	cmp	r1, #0
 800ccba:	b096      	sub	sp, #88	; 0x58
 800ccbc:	4614      	mov	r4, r2
 800ccbe:	461d      	mov	r5, r3
 800ccc0:	da07      	bge.n	800ccd2 <__swhatbuf_r+0x22>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	602b      	str	r3, [r5, #0]
 800ccc6:	89b3      	ldrh	r3, [r6, #12]
 800ccc8:	061a      	lsls	r2, r3, #24
 800ccca:	d410      	bmi.n	800ccee <__swhatbuf_r+0x3e>
 800cccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccd0:	e00e      	b.n	800ccf0 <__swhatbuf_r+0x40>
 800ccd2:	466a      	mov	r2, sp
 800ccd4:	f000 fc3e 	bl	800d554 <_fstat_r>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	dbf2      	blt.n	800ccc2 <__swhatbuf_r+0x12>
 800ccdc:	9a01      	ldr	r2, [sp, #4]
 800ccde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cce2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cce6:	425a      	negs	r2, r3
 800cce8:	415a      	adcs	r2, r3
 800ccea:	602a      	str	r2, [r5, #0]
 800ccec:	e7ee      	b.n	800cccc <__swhatbuf_r+0x1c>
 800ccee:	2340      	movs	r3, #64	; 0x40
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	6023      	str	r3, [r4, #0]
 800ccf4:	b016      	add	sp, #88	; 0x58
 800ccf6:	bd70      	pop	{r4, r5, r6, pc}

0800ccf8 <__smakebuf_r>:
 800ccf8:	898b      	ldrh	r3, [r1, #12]
 800ccfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccfc:	079d      	lsls	r5, r3, #30
 800ccfe:	4606      	mov	r6, r0
 800cd00:	460c      	mov	r4, r1
 800cd02:	d507      	bpl.n	800cd14 <__smakebuf_r+0x1c>
 800cd04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	6123      	str	r3, [r4, #16]
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	6163      	str	r3, [r4, #20]
 800cd10:	b002      	add	sp, #8
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	ab01      	add	r3, sp, #4
 800cd16:	466a      	mov	r2, sp
 800cd18:	f7ff ffca 	bl	800ccb0 <__swhatbuf_r>
 800cd1c:	9900      	ldr	r1, [sp, #0]
 800cd1e:	4605      	mov	r5, r0
 800cd20:	4630      	mov	r0, r6
 800cd22:	f000 f87f 	bl	800ce24 <_malloc_r>
 800cd26:	b948      	cbnz	r0, 800cd3c <__smakebuf_r+0x44>
 800cd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd2c:	059a      	lsls	r2, r3, #22
 800cd2e:	d4ef      	bmi.n	800cd10 <__smakebuf_r+0x18>
 800cd30:	f023 0303 	bic.w	r3, r3, #3
 800cd34:	f043 0302 	orr.w	r3, r3, #2
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	e7e3      	b.n	800cd04 <__smakebuf_r+0xc>
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <__smakebuf_r+0x7c>)
 800cd3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	6020      	str	r0, [r4, #0]
 800cd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	9b00      	ldr	r3, [sp, #0]
 800cd4c:	6163      	str	r3, [r4, #20]
 800cd4e:	9b01      	ldr	r3, [sp, #4]
 800cd50:	6120      	str	r0, [r4, #16]
 800cd52:	b15b      	cbz	r3, 800cd6c <__smakebuf_r+0x74>
 800cd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f000 fc0d 	bl	800d578 <_isatty_r>
 800cd5e:	b128      	cbz	r0, 800cd6c <__smakebuf_r+0x74>
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	f023 0303 	bic.w	r3, r3, #3
 800cd66:	f043 0301 	orr.w	r3, r3, #1
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	431d      	orrs	r5, r3
 800cd70:	81a5      	strh	r5, [r4, #12]
 800cd72:	e7cd      	b.n	800cd10 <__smakebuf_r+0x18>
 800cd74:	0800cb65 	.word	0x0800cb65

0800cd78 <malloc>:
 800cd78:	4b02      	ldr	r3, [pc, #8]	; (800cd84 <malloc+0xc>)
 800cd7a:	4601      	mov	r1, r0
 800cd7c:	6818      	ldr	r0, [r3, #0]
 800cd7e:	f000 b851 	b.w	800ce24 <_malloc_r>
 800cd82:	bf00      	nop
 800cd84:	20000138 	.word	0x20000138

0800cd88 <_free_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	2900      	cmp	r1, #0
 800cd8e:	d045      	beq.n	800ce1c <_free_r+0x94>
 800cd90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd94:	1f0c      	subs	r4, r1, #4
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	bfb8      	it	lt
 800cd9a:	18e4      	addlt	r4, r4, r3
 800cd9c:	f000 fc0e 	bl	800d5bc <__malloc_lock>
 800cda0:	4a1f      	ldr	r2, [pc, #124]	; (800ce20 <_free_r+0x98>)
 800cda2:	6813      	ldr	r3, [r2, #0]
 800cda4:	4610      	mov	r0, r2
 800cda6:	b933      	cbnz	r3, 800cdb6 <_free_r+0x2e>
 800cda8:	6063      	str	r3, [r4, #4]
 800cdaa:	6014      	str	r4, [r2, #0]
 800cdac:	4628      	mov	r0, r5
 800cdae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdb2:	f000 bc04 	b.w	800d5be <__malloc_unlock>
 800cdb6:	42a3      	cmp	r3, r4
 800cdb8:	d90c      	bls.n	800cdd4 <_free_r+0x4c>
 800cdba:	6821      	ldr	r1, [r4, #0]
 800cdbc:	1862      	adds	r2, r4, r1
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	bf04      	itt	eq
 800cdc2:	681a      	ldreq	r2, [r3, #0]
 800cdc4:	685b      	ldreq	r3, [r3, #4]
 800cdc6:	6063      	str	r3, [r4, #4]
 800cdc8:	bf04      	itt	eq
 800cdca:	1852      	addeq	r2, r2, r1
 800cdcc:	6022      	streq	r2, [r4, #0]
 800cdce:	6004      	str	r4, [r0, #0]
 800cdd0:	e7ec      	b.n	800cdac <_free_r+0x24>
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	b10a      	cbz	r2, 800cddc <_free_r+0x54>
 800cdd8:	42a2      	cmp	r2, r4
 800cdda:	d9fa      	bls.n	800cdd2 <_free_r+0x4a>
 800cddc:	6819      	ldr	r1, [r3, #0]
 800cdde:	1858      	adds	r0, r3, r1
 800cde0:	42a0      	cmp	r0, r4
 800cde2:	d10b      	bne.n	800cdfc <_free_r+0x74>
 800cde4:	6820      	ldr	r0, [r4, #0]
 800cde6:	4401      	add	r1, r0
 800cde8:	1858      	adds	r0, r3, r1
 800cdea:	4282      	cmp	r2, r0
 800cdec:	6019      	str	r1, [r3, #0]
 800cdee:	d1dd      	bne.n	800cdac <_free_r+0x24>
 800cdf0:	6810      	ldr	r0, [r2, #0]
 800cdf2:	6852      	ldr	r2, [r2, #4]
 800cdf4:	605a      	str	r2, [r3, #4]
 800cdf6:	4401      	add	r1, r0
 800cdf8:	6019      	str	r1, [r3, #0]
 800cdfa:	e7d7      	b.n	800cdac <_free_r+0x24>
 800cdfc:	d902      	bls.n	800ce04 <_free_r+0x7c>
 800cdfe:	230c      	movs	r3, #12
 800ce00:	602b      	str	r3, [r5, #0]
 800ce02:	e7d3      	b.n	800cdac <_free_r+0x24>
 800ce04:	6820      	ldr	r0, [r4, #0]
 800ce06:	1821      	adds	r1, r4, r0
 800ce08:	428a      	cmp	r2, r1
 800ce0a:	bf04      	itt	eq
 800ce0c:	6811      	ldreq	r1, [r2, #0]
 800ce0e:	6852      	ldreq	r2, [r2, #4]
 800ce10:	6062      	str	r2, [r4, #4]
 800ce12:	bf04      	itt	eq
 800ce14:	1809      	addeq	r1, r1, r0
 800ce16:	6021      	streq	r1, [r4, #0]
 800ce18:	605c      	str	r4, [r3, #4]
 800ce1a:	e7c7      	b.n	800cdac <_free_r+0x24>
 800ce1c:	bd38      	pop	{r3, r4, r5, pc}
 800ce1e:	bf00      	nop
 800ce20:	200005d4 	.word	0x200005d4

0800ce24 <_malloc_r>:
 800ce24:	b570      	push	{r4, r5, r6, lr}
 800ce26:	1ccd      	adds	r5, r1, #3
 800ce28:	f025 0503 	bic.w	r5, r5, #3
 800ce2c:	3508      	adds	r5, #8
 800ce2e:	2d0c      	cmp	r5, #12
 800ce30:	bf38      	it	cc
 800ce32:	250c      	movcc	r5, #12
 800ce34:	2d00      	cmp	r5, #0
 800ce36:	4606      	mov	r6, r0
 800ce38:	db01      	blt.n	800ce3e <_malloc_r+0x1a>
 800ce3a:	42a9      	cmp	r1, r5
 800ce3c:	d903      	bls.n	800ce46 <_malloc_r+0x22>
 800ce3e:	230c      	movs	r3, #12
 800ce40:	6033      	str	r3, [r6, #0]
 800ce42:	2000      	movs	r0, #0
 800ce44:	bd70      	pop	{r4, r5, r6, pc}
 800ce46:	f000 fbb9 	bl	800d5bc <__malloc_lock>
 800ce4a:	4a21      	ldr	r2, [pc, #132]	; (800ced0 <_malloc_r+0xac>)
 800ce4c:	6814      	ldr	r4, [r2, #0]
 800ce4e:	4621      	mov	r1, r4
 800ce50:	b991      	cbnz	r1, 800ce78 <_malloc_r+0x54>
 800ce52:	4c20      	ldr	r4, [pc, #128]	; (800ced4 <_malloc_r+0xb0>)
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	b91b      	cbnz	r3, 800ce60 <_malloc_r+0x3c>
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f000 fb05 	bl	800d468 <_sbrk_r>
 800ce5e:	6020      	str	r0, [r4, #0]
 800ce60:	4629      	mov	r1, r5
 800ce62:	4630      	mov	r0, r6
 800ce64:	f000 fb00 	bl	800d468 <_sbrk_r>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d124      	bne.n	800ceb6 <_malloc_r+0x92>
 800ce6c:	230c      	movs	r3, #12
 800ce6e:	6033      	str	r3, [r6, #0]
 800ce70:	4630      	mov	r0, r6
 800ce72:	f000 fba4 	bl	800d5be <__malloc_unlock>
 800ce76:	e7e4      	b.n	800ce42 <_malloc_r+0x1e>
 800ce78:	680b      	ldr	r3, [r1, #0]
 800ce7a:	1b5b      	subs	r3, r3, r5
 800ce7c:	d418      	bmi.n	800ceb0 <_malloc_r+0x8c>
 800ce7e:	2b0b      	cmp	r3, #11
 800ce80:	d90f      	bls.n	800cea2 <_malloc_r+0x7e>
 800ce82:	600b      	str	r3, [r1, #0]
 800ce84:	50cd      	str	r5, [r1, r3]
 800ce86:	18cc      	adds	r4, r1, r3
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f000 fb98 	bl	800d5be <__malloc_unlock>
 800ce8e:	f104 000b 	add.w	r0, r4, #11
 800ce92:	1d23      	adds	r3, r4, #4
 800ce94:	f020 0007 	bic.w	r0, r0, #7
 800ce98:	1ac3      	subs	r3, r0, r3
 800ce9a:	d0d3      	beq.n	800ce44 <_malloc_r+0x20>
 800ce9c:	425a      	negs	r2, r3
 800ce9e:	50e2      	str	r2, [r4, r3]
 800cea0:	e7d0      	b.n	800ce44 <_malloc_r+0x20>
 800cea2:	428c      	cmp	r4, r1
 800cea4:	684b      	ldr	r3, [r1, #4]
 800cea6:	bf16      	itet	ne
 800cea8:	6063      	strne	r3, [r4, #4]
 800ceaa:	6013      	streq	r3, [r2, #0]
 800ceac:	460c      	movne	r4, r1
 800ceae:	e7eb      	b.n	800ce88 <_malloc_r+0x64>
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	6849      	ldr	r1, [r1, #4]
 800ceb4:	e7cc      	b.n	800ce50 <_malloc_r+0x2c>
 800ceb6:	1cc4      	adds	r4, r0, #3
 800ceb8:	f024 0403 	bic.w	r4, r4, #3
 800cebc:	42a0      	cmp	r0, r4
 800cebe:	d005      	beq.n	800cecc <_malloc_r+0xa8>
 800cec0:	1a21      	subs	r1, r4, r0
 800cec2:	4630      	mov	r0, r6
 800cec4:	f000 fad0 	bl	800d468 <_sbrk_r>
 800cec8:	3001      	adds	r0, #1
 800ceca:	d0cf      	beq.n	800ce6c <_malloc_r+0x48>
 800cecc:	6025      	str	r5, [r4, #0]
 800cece:	e7db      	b.n	800ce88 <_malloc_r+0x64>
 800ced0:	200005d4 	.word	0x200005d4
 800ced4:	200005d8 	.word	0x200005d8

0800ced8 <__sfputc_r>:
 800ced8:	6893      	ldr	r3, [r2, #8]
 800ceda:	3b01      	subs	r3, #1
 800cedc:	2b00      	cmp	r3, #0
 800cede:	b410      	push	{r4}
 800cee0:	6093      	str	r3, [r2, #8]
 800cee2:	da08      	bge.n	800cef6 <__sfputc_r+0x1e>
 800cee4:	6994      	ldr	r4, [r2, #24]
 800cee6:	42a3      	cmp	r3, r4
 800cee8:	db01      	blt.n	800ceee <__sfputc_r+0x16>
 800ceea:	290a      	cmp	r1, #10
 800ceec:	d103      	bne.n	800cef6 <__sfputc_r+0x1e>
 800ceee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cef2:	f7ff bca3 	b.w	800c83c <__swbuf_r>
 800cef6:	6813      	ldr	r3, [r2, #0]
 800cef8:	1c58      	adds	r0, r3, #1
 800cefa:	6010      	str	r0, [r2, #0]
 800cefc:	7019      	strb	r1, [r3, #0]
 800cefe:	4608      	mov	r0, r1
 800cf00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <__sfputs_r>:
 800cf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf08:	4606      	mov	r6, r0
 800cf0a:	460f      	mov	r7, r1
 800cf0c:	4614      	mov	r4, r2
 800cf0e:	18d5      	adds	r5, r2, r3
 800cf10:	42ac      	cmp	r4, r5
 800cf12:	d101      	bne.n	800cf18 <__sfputs_r+0x12>
 800cf14:	2000      	movs	r0, #0
 800cf16:	e007      	b.n	800cf28 <__sfputs_r+0x22>
 800cf18:	463a      	mov	r2, r7
 800cf1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf1e:	4630      	mov	r0, r6
 800cf20:	f7ff ffda 	bl	800ced8 <__sfputc_r>
 800cf24:	1c43      	adds	r3, r0, #1
 800cf26:	d1f3      	bne.n	800cf10 <__sfputs_r+0xa>
 800cf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf2c <_vfiprintf_r>:
 800cf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf30:	460c      	mov	r4, r1
 800cf32:	b09d      	sub	sp, #116	; 0x74
 800cf34:	4617      	mov	r7, r2
 800cf36:	461d      	mov	r5, r3
 800cf38:	4606      	mov	r6, r0
 800cf3a:	b118      	cbz	r0, 800cf44 <_vfiprintf_r+0x18>
 800cf3c:	6983      	ldr	r3, [r0, #24]
 800cf3e:	b90b      	cbnz	r3, 800cf44 <_vfiprintf_r+0x18>
 800cf40:	f7ff fe2c 	bl	800cb9c <__sinit>
 800cf44:	4b7c      	ldr	r3, [pc, #496]	; (800d138 <_vfiprintf_r+0x20c>)
 800cf46:	429c      	cmp	r4, r3
 800cf48:	d158      	bne.n	800cffc <_vfiprintf_r+0xd0>
 800cf4a:	6874      	ldr	r4, [r6, #4]
 800cf4c:	89a3      	ldrh	r3, [r4, #12]
 800cf4e:	0718      	lsls	r0, r3, #28
 800cf50:	d55e      	bpl.n	800d010 <_vfiprintf_r+0xe4>
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d05b      	beq.n	800d010 <_vfiprintf_r+0xe4>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf5c:	2320      	movs	r3, #32
 800cf5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf62:	2330      	movs	r3, #48	; 0x30
 800cf64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf68:	9503      	str	r5, [sp, #12]
 800cf6a:	f04f 0b01 	mov.w	fp, #1
 800cf6e:	46b8      	mov	r8, r7
 800cf70:	4645      	mov	r5, r8
 800cf72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cf76:	b10b      	cbz	r3, 800cf7c <_vfiprintf_r+0x50>
 800cf78:	2b25      	cmp	r3, #37	; 0x25
 800cf7a:	d154      	bne.n	800d026 <_vfiprintf_r+0xfa>
 800cf7c:	ebb8 0a07 	subs.w	sl, r8, r7
 800cf80:	d00b      	beq.n	800cf9a <_vfiprintf_r+0x6e>
 800cf82:	4653      	mov	r3, sl
 800cf84:	463a      	mov	r2, r7
 800cf86:	4621      	mov	r1, r4
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f7ff ffbc 	bl	800cf06 <__sfputs_r>
 800cf8e:	3001      	adds	r0, #1
 800cf90:	f000 80c2 	beq.w	800d118 <_vfiprintf_r+0x1ec>
 800cf94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf96:	4453      	add	r3, sl
 800cf98:	9309      	str	r3, [sp, #36]	; 0x24
 800cf9a:	f898 3000 	ldrb.w	r3, [r8]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 80ba 	beq.w	800d118 <_vfiprintf_r+0x1ec>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfae:	9304      	str	r3, [sp, #16]
 800cfb0:	9307      	str	r3, [sp, #28]
 800cfb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfb6:	931a      	str	r3, [sp, #104]	; 0x68
 800cfb8:	46a8      	mov	r8, r5
 800cfba:	2205      	movs	r2, #5
 800cfbc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cfc0:	485e      	ldr	r0, [pc, #376]	; (800d13c <_vfiprintf_r+0x210>)
 800cfc2:	f7f3 f925 	bl	8000210 <memchr>
 800cfc6:	9b04      	ldr	r3, [sp, #16]
 800cfc8:	bb78      	cbnz	r0, 800d02a <_vfiprintf_r+0xfe>
 800cfca:	06d9      	lsls	r1, r3, #27
 800cfcc:	bf44      	itt	mi
 800cfce:	2220      	movmi	r2, #32
 800cfd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfd4:	071a      	lsls	r2, r3, #28
 800cfd6:	bf44      	itt	mi
 800cfd8:	222b      	movmi	r2, #43	; 0x2b
 800cfda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfde:	782a      	ldrb	r2, [r5, #0]
 800cfe0:	2a2a      	cmp	r2, #42	; 0x2a
 800cfe2:	d02a      	beq.n	800d03a <_vfiprintf_r+0x10e>
 800cfe4:	9a07      	ldr	r2, [sp, #28]
 800cfe6:	46a8      	mov	r8, r5
 800cfe8:	2000      	movs	r0, #0
 800cfea:	250a      	movs	r5, #10
 800cfec:	4641      	mov	r1, r8
 800cfee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cff2:	3b30      	subs	r3, #48	; 0x30
 800cff4:	2b09      	cmp	r3, #9
 800cff6:	d969      	bls.n	800d0cc <_vfiprintf_r+0x1a0>
 800cff8:	b360      	cbz	r0, 800d054 <_vfiprintf_r+0x128>
 800cffa:	e024      	b.n	800d046 <_vfiprintf_r+0x11a>
 800cffc:	4b50      	ldr	r3, [pc, #320]	; (800d140 <_vfiprintf_r+0x214>)
 800cffe:	429c      	cmp	r4, r3
 800d000:	d101      	bne.n	800d006 <_vfiprintf_r+0xda>
 800d002:	68b4      	ldr	r4, [r6, #8]
 800d004:	e7a2      	b.n	800cf4c <_vfiprintf_r+0x20>
 800d006:	4b4f      	ldr	r3, [pc, #316]	; (800d144 <_vfiprintf_r+0x218>)
 800d008:	429c      	cmp	r4, r3
 800d00a:	bf08      	it	eq
 800d00c:	68f4      	ldreq	r4, [r6, #12]
 800d00e:	e79d      	b.n	800cf4c <_vfiprintf_r+0x20>
 800d010:	4621      	mov	r1, r4
 800d012:	4630      	mov	r0, r6
 800d014:	f7ff fc64 	bl	800c8e0 <__swsetup_r>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d09d      	beq.n	800cf58 <_vfiprintf_r+0x2c>
 800d01c:	f04f 30ff 	mov.w	r0, #4294967295
 800d020:	b01d      	add	sp, #116	; 0x74
 800d022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d026:	46a8      	mov	r8, r5
 800d028:	e7a2      	b.n	800cf70 <_vfiprintf_r+0x44>
 800d02a:	4a44      	ldr	r2, [pc, #272]	; (800d13c <_vfiprintf_r+0x210>)
 800d02c:	1a80      	subs	r0, r0, r2
 800d02e:	fa0b f000 	lsl.w	r0, fp, r0
 800d032:	4318      	orrs	r0, r3
 800d034:	9004      	str	r0, [sp, #16]
 800d036:	4645      	mov	r5, r8
 800d038:	e7be      	b.n	800cfb8 <_vfiprintf_r+0x8c>
 800d03a:	9a03      	ldr	r2, [sp, #12]
 800d03c:	1d11      	adds	r1, r2, #4
 800d03e:	6812      	ldr	r2, [r2, #0]
 800d040:	9103      	str	r1, [sp, #12]
 800d042:	2a00      	cmp	r2, #0
 800d044:	db01      	blt.n	800d04a <_vfiprintf_r+0x11e>
 800d046:	9207      	str	r2, [sp, #28]
 800d048:	e004      	b.n	800d054 <_vfiprintf_r+0x128>
 800d04a:	4252      	negs	r2, r2
 800d04c:	f043 0302 	orr.w	r3, r3, #2
 800d050:	9207      	str	r2, [sp, #28]
 800d052:	9304      	str	r3, [sp, #16]
 800d054:	f898 3000 	ldrb.w	r3, [r8]
 800d058:	2b2e      	cmp	r3, #46	; 0x2e
 800d05a:	d10e      	bne.n	800d07a <_vfiprintf_r+0x14e>
 800d05c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d060:	2b2a      	cmp	r3, #42	; 0x2a
 800d062:	d138      	bne.n	800d0d6 <_vfiprintf_r+0x1aa>
 800d064:	9b03      	ldr	r3, [sp, #12]
 800d066:	1d1a      	adds	r2, r3, #4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	9203      	str	r2, [sp, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	bfb8      	it	lt
 800d070:	f04f 33ff 	movlt.w	r3, #4294967295
 800d074:	f108 0802 	add.w	r8, r8, #2
 800d078:	9305      	str	r3, [sp, #20]
 800d07a:	4d33      	ldr	r5, [pc, #204]	; (800d148 <_vfiprintf_r+0x21c>)
 800d07c:	f898 1000 	ldrb.w	r1, [r8]
 800d080:	2203      	movs	r2, #3
 800d082:	4628      	mov	r0, r5
 800d084:	f7f3 f8c4 	bl	8000210 <memchr>
 800d088:	b140      	cbz	r0, 800d09c <_vfiprintf_r+0x170>
 800d08a:	2340      	movs	r3, #64	; 0x40
 800d08c:	1b40      	subs	r0, r0, r5
 800d08e:	fa03 f000 	lsl.w	r0, r3, r0
 800d092:	9b04      	ldr	r3, [sp, #16]
 800d094:	4303      	orrs	r3, r0
 800d096:	f108 0801 	add.w	r8, r8, #1
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	f898 1000 	ldrb.w	r1, [r8]
 800d0a0:	482a      	ldr	r0, [pc, #168]	; (800d14c <_vfiprintf_r+0x220>)
 800d0a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0a6:	2206      	movs	r2, #6
 800d0a8:	f108 0701 	add.w	r7, r8, #1
 800d0ac:	f7f3 f8b0 	bl	8000210 <memchr>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d037      	beq.n	800d124 <_vfiprintf_r+0x1f8>
 800d0b4:	4b26      	ldr	r3, [pc, #152]	; (800d150 <_vfiprintf_r+0x224>)
 800d0b6:	bb1b      	cbnz	r3, 800d100 <_vfiprintf_r+0x1d4>
 800d0b8:	9b03      	ldr	r3, [sp, #12]
 800d0ba:	3307      	adds	r3, #7
 800d0bc:	f023 0307 	bic.w	r3, r3, #7
 800d0c0:	3308      	adds	r3, #8
 800d0c2:	9303      	str	r3, [sp, #12]
 800d0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0c6:	444b      	add	r3, r9
 800d0c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ca:	e750      	b.n	800cf6e <_vfiprintf_r+0x42>
 800d0cc:	fb05 3202 	mla	r2, r5, r2, r3
 800d0d0:	2001      	movs	r0, #1
 800d0d2:	4688      	mov	r8, r1
 800d0d4:	e78a      	b.n	800cfec <_vfiprintf_r+0xc0>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f108 0801 	add.w	r8, r8, #1
 800d0dc:	9305      	str	r3, [sp, #20]
 800d0de:	4619      	mov	r1, r3
 800d0e0:	250a      	movs	r5, #10
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0e8:	3a30      	subs	r2, #48	; 0x30
 800d0ea:	2a09      	cmp	r2, #9
 800d0ec:	d903      	bls.n	800d0f6 <_vfiprintf_r+0x1ca>
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0c3      	beq.n	800d07a <_vfiprintf_r+0x14e>
 800d0f2:	9105      	str	r1, [sp, #20]
 800d0f4:	e7c1      	b.n	800d07a <_vfiprintf_r+0x14e>
 800d0f6:	fb05 2101 	mla	r1, r5, r1, r2
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	4680      	mov	r8, r0
 800d0fe:	e7f0      	b.n	800d0e2 <_vfiprintf_r+0x1b6>
 800d100:	ab03      	add	r3, sp, #12
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	4622      	mov	r2, r4
 800d106:	4b13      	ldr	r3, [pc, #76]	; (800d154 <_vfiprintf_r+0x228>)
 800d108:	a904      	add	r1, sp, #16
 800d10a:	4630      	mov	r0, r6
 800d10c:	f3af 8000 	nop.w
 800d110:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d114:	4681      	mov	r9, r0
 800d116:	d1d5      	bne.n	800d0c4 <_vfiprintf_r+0x198>
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	065b      	lsls	r3, r3, #25
 800d11c:	f53f af7e 	bmi.w	800d01c <_vfiprintf_r+0xf0>
 800d120:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d122:	e77d      	b.n	800d020 <_vfiprintf_r+0xf4>
 800d124:	ab03      	add	r3, sp, #12
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4622      	mov	r2, r4
 800d12a:	4b0a      	ldr	r3, [pc, #40]	; (800d154 <_vfiprintf_r+0x228>)
 800d12c:	a904      	add	r1, sp, #16
 800d12e:	4630      	mov	r0, r6
 800d130:	f000 f888 	bl	800d244 <_printf_i>
 800d134:	e7ec      	b.n	800d110 <_vfiprintf_r+0x1e4>
 800d136:	bf00      	nop
 800d138:	08013d48 	.word	0x08013d48
 800d13c:	08013d88 	.word	0x08013d88
 800d140:	08013d68 	.word	0x08013d68
 800d144:	08013d28 	.word	0x08013d28
 800d148:	08013d8e 	.word	0x08013d8e
 800d14c:	08013d92 	.word	0x08013d92
 800d150:	00000000 	.word	0x00000000
 800d154:	0800cf07 	.word	0x0800cf07

0800d158 <_printf_common>:
 800d158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d15c:	4691      	mov	r9, r2
 800d15e:	461f      	mov	r7, r3
 800d160:	688a      	ldr	r2, [r1, #8]
 800d162:	690b      	ldr	r3, [r1, #16]
 800d164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d168:	4293      	cmp	r3, r2
 800d16a:	bfb8      	it	lt
 800d16c:	4613      	movlt	r3, r2
 800d16e:	f8c9 3000 	str.w	r3, [r9]
 800d172:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d176:	4606      	mov	r6, r0
 800d178:	460c      	mov	r4, r1
 800d17a:	b112      	cbz	r2, 800d182 <_printf_common+0x2a>
 800d17c:	3301      	adds	r3, #1
 800d17e:	f8c9 3000 	str.w	r3, [r9]
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	0699      	lsls	r1, r3, #26
 800d186:	bf42      	ittt	mi
 800d188:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d18c:	3302      	addmi	r3, #2
 800d18e:	f8c9 3000 	strmi.w	r3, [r9]
 800d192:	6825      	ldr	r5, [r4, #0]
 800d194:	f015 0506 	ands.w	r5, r5, #6
 800d198:	d107      	bne.n	800d1aa <_printf_common+0x52>
 800d19a:	f104 0a19 	add.w	sl, r4, #25
 800d19e:	68e3      	ldr	r3, [r4, #12]
 800d1a0:	f8d9 2000 	ldr.w	r2, [r9]
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	42ab      	cmp	r3, r5
 800d1a8:	dc28      	bgt.n	800d1fc <_printf_common+0xa4>
 800d1aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d1ae:	6822      	ldr	r2, [r4, #0]
 800d1b0:	3300      	adds	r3, #0
 800d1b2:	bf18      	it	ne
 800d1b4:	2301      	movne	r3, #1
 800d1b6:	0692      	lsls	r2, r2, #26
 800d1b8:	d42d      	bmi.n	800d216 <_printf_common+0xbe>
 800d1ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1be:	4639      	mov	r1, r7
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	47c0      	blx	r8
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	d020      	beq.n	800d20a <_printf_common+0xb2>
 800d1c8:	6823      	ldr	r3, [r4, #0]
 800d1ca:	68e5      	ldr	r5, [r4, #12]
 800d1cc:	f8d9 2000 	ldr.w	r2, [r9]
 800d1d0:	f003 0306 	and.w	r3, r3, #6
 800d1d4:	2b04      	cmp	r3, #4
 800d1d6:	bf08      	it	eq
 800d1d8:	1aad      	subeq	r5, r5, r2
 800d1da:	68a3      	ldr	r3, [r4, #8]
 800d1dc:	6922      	ldr	r2, [r4, #16]
 800d1de:	bf0c      	ite	eq
 800d1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1e4:	2500      	movne	r5, #0
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	bfc4      	itt	gt
 800d1ea:	1a9b      	subgt	r3, r3, r2
 800d1ec:	18ed      	addgt	r5, r5, r3
 800d1ee:	f04f 0900 	mov.w	r9, #0
 800d1f2:	341a      	adds	r4, #26
 800d1f4:	454d      	cmp	r5, r9
 800d1f6:	d11a      	bne.n	800d22e <_printf_common+0xd6>
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	e008      	b.n	800d20e <_printf_common+0xb6>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	4652      	mov	r2, sl
 800d200:	4639      	mov	r1, r7
 800d202:	4630      	mov	r0, r6
 800d204:	47c0      	blx	r8
 800d206:	3001      	adds	r0, #1
 800d208:	d103      	bne.n	800d212 <_printf_common+0xba>
 800d20a:	f04f 30ff 	mov.w	r0, #4294967295
 800d20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d212:	3501      	adds	r5, #1
 800d214:	e7c3      	b.n	800d19e <_printf_common+0x46>
 800d216:	18e1      	adds	r1, r4, r3
 800d218:	1c5a      	adds	r2, r3, #1
 800d21a:	2030      	movs	r0, #48	; 0x30
 800d21c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d220:	4422      	add	r2, r4
 800d222:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d226:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d22a:	3302      	adds	r3, #2
 800d22c:	e7c5      	b.n	800d1ba <_printf_common+0x62>
 800d22e:	2301      	movs	r3, #1
 800d230:	4622      	mov	r2, r4
 800d232:	4639      	mov	r1, r7
 800d234:	4630      	mov	r0, r6
 800d236:	47c0      	blx	r8
 800d238:	3001      	adds	r0, #1
 800d23a:	d0e6      	beq.n	800d20a <_printf_common+0xb2>
 800d23c:	f109 0901 	add.w	r9, r9, #1
 800d240:	e7d8      	b.n	800d1f4 <_printf_common+0x9c>
	...

0800d244 <_printf_i>:
 800d244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d248:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d24c:	460c      	mov	r4, r1
 800d24e:	7e09      	ldrb	r1, [r1, #24]
 800d250:	b085      	sub	sp, #20
 800d252:	296e      	cmp	r1, #110	; 0x6e
 800d254:	4617      	mov	r7, r2
 800d256:	4606      	mov	r6, r0
 800d258:	4698      	mov	r8, r3
 800d25a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d25c:	f000 80b3 	beq.w	800d3c6 <_printf_i+0x182>
 800d260:	d822      	bhi.n	800d2a8 <_printf_i+0x64>
 800d262:	2963      	cmp	r1, #99	; 0x63
 800d264:	d036      	beq.n	800d2d4 <_printf_i+0x90>
 800d266:	d80a      	bhi.n	800d27e <_printf_i+0x3a>
 800d268:	2900      	cmp	r1, #0
 800d26a:	f000 80b9 	beq.w	800d3e0 <_printf_i+0x19c>
 800d26e:	2958      	cmp	r1, #88	; 0x58
 800d270:	f000 8083 	beq.w	800d37a <_printf_i+0x136>
 800d274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d278:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d27c:	e032      	b.n	800d2e4 <_printf_i+0xa0>
 800d27e:	2964      	cmp	r1, #100	; 0x64
 800d280:	d001      	beq.n	800d286 <_printf_i+0x42>
 800d282:	2969      	cmp	r1, #105	; 0x69
 800d284:	d1f6      	bne.n	800d274 <_printf_i+0x30>
 800d286:	6820      	ldr	r0, [r4, #0]
 800d288:	6813      	ldr	r3, [r2, #0]
 800d28a:	0605      	lsls	r5, r0, #24
 800d28c:	f103 0104 	add.w	r1, r3, #4
 800d290:	d52a      	bpl.n	800d2e8 <_printf_i+0xa4>
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	6011      	str	r1, [r2, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	da03      	bge.n	800d2a2 <_printf_i+0x5e>
 800d29a:	222d      	movs	r2, #45	; 0x2d
 800d29c:	425b      	negs	r3, r3
 800d29e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d2a2:	486f      	ldr	r0, [pc, #444]	; (800d460 <_printf_i+0x21c>)
 800d2a4:	220a      	movs	r2, #10
 800d2a6:	e039      	b.n	800d31c <_printf_i+0xd8>
 800d2a8:	2973      	cmp	r1, #115	; 0x73
 800d2aa:	f000 809d 	beq.w	800d3e8 <_printf_i+0x1a4>
 800d2ae:	d808      	bhi.n	800d2c2 <_printf_i+0x7e>
 800d2b0:	296f      	cmp	r1, #111	; 0x6f
 800d2b2:	d020      	beq.n	800d2f6 <_printf_i+0xb2>
 800d2b4:	2970      	cmp	r1, #112	; 0x70
 800d2b6:	d1dd      	bne.n	800d274 <_printf_i+0x30>
 800d2b8:	6823      	ldr	r3, [r4, #0]
 800d2ba:	f043 0320 	orr.w	r3, r3, #32
 800d2be:	6023      	str	r3, [r4, #0]
 800d2c0:	e003      	b.n	800d2ca <_printf_i+0x86>
 800d2c2:	2975      	cmp	r1, #117	; 0x75
 800d2c4:	d017      	beq.n	800d2f6 <_printf_i+0xb2>
 800d2c6:	2978      	cmp	r1, #120	; 0x78
 800d2c8:	d1d4      	bne.n	800d274 <_printf_i+0x30>
 800d2ca:	2378      	movs	r3, #120	; 0x78
 800d2cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2d0:	4864      	ldr	r0, [pc, #400]	; (800d464 <_printf_i+0x220>)
 800d2d2:	e055      	b.n	800d380 <_printf_i+0x13c>
 800d2d4:	6813      	ldr	r3, [r2, #0]
 800d2d6:	1d19      	adds	r1, r3, #4
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6011      	str	r1, [r2, #0]
 800d2dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e08c      	b.n	800d402 <_printf_i+0x1be>
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	6011      	str	r1, [r2, #0]
 800d2ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2f0:	bf18      	it	ne
 800d2f2:	b21b      	sxthne	r3, r3
 800d2f4:	e7cf      	b.n	800d296 <_printf_i+0x52>
 800d2f6:	6813      	ldr	r3, [r2, #0]
 800d2f8:	6825      	ldr	r5, [r4, #0]
 800d2fa:	1d18      	adds	r0, r3, #4
 800d2fc:	6010      	str	r0, [r2, #0]
 800d2fe:	0628      	lsls	r0, r5, #24
 800d300:	d501      	bpl.n	800d306 <_printf_i+0xc2>
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	e002      	b.n	800d30c <_printf_i+0xc8>
 800d306:	0668      	lsls	r0, r5, #25
 800d308:	d5fb      	bpl.n	800d302 <_printf_i+0xbe>
 800d30a:	881b      	ldrh	r3, [r3, #0]
 800d30c:	4854      	ldr	r0, [pc, #336]	; (800d460 <_printf_i+0x21c>)
 800d30e:	296f      	cmp	r1, #111	; 0x6f
 800d310:	bf14      	ite	ne
 800d312:	220a      	movne	r2, #10
 800d314:	2208      	moveq	r2, #8
 800d316:	2100      	movs	r1, #0
 800d318:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d31c:	6865      	ldr	r5, [r4, #4]
 800d31e:	60a5      	str	r5, [r4, #8]
 800d320:	2d00      	cmp	r5, #0
 800d322:	f2c0 8095 	blt.w	800d450 <_printf_i+0x20c>
 800d326:	6821      	ldr	r1, [r4, #0]
 800d328:	f021 0104 	bic.w	r1, r1, #4
 800d32c:	6021      	str	r1, [r4, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d13d      	bne.n	800d3ae <_printf_i+0x16a>
 800d332:	2d00      	cmp	r5, #0
 800d334:	f040 808e 	bne.w	800d454 <_printf_i+0x210>
 800d338:	4665      	mov	r5, ip
 800d33a:	2a08      	cmp	r2, #8
 800d33c:	d10b      	bne.n	800d356 <_printf_i+0x112>
 800d33e:	6823      	ldr	r3, [r4, #0]
 800d340:	07db      	lsls	r3, r3, #31
 800d342:	d508      	bpl.n	800d356 <_printf_i+0x112>
 800d344:	6923      	ldr	r3, [r4, #16]
 800d346:	6862      	ldr	r2, [r4, #4]
 800d348:	429a      	cmp	r2, r3
 800d34a:	bfde      	ittt	le
 800d34c:	2330      	movle	r3, #48	; 0x30
 800d34e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d352:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d356:	ebac 0305 	sub.w	r3, ip, r5
 800d35a:	6123      	str	r3, [r4, #16]
 800d35c:	f8cd 8000 	str.w	r8, [sp]
 800d360:	463b      	mov	r3, r7
 800d362:	aa03      	add	r2, sp, #12
 800d364:	4621      	mov	r1, r4
 800d366:	4630      	mov	r0, r6
 800d368:	f7ff fef6 	bl	800d158 <_printf_common>
 800d36c:	3001      	adds	r0, #1
 800d36e:	d14d      	bne.n	800d40c <_printf_i+0x1c8>
 800d370:	f04f 30ff 	mov.w	r0, #4294967295
 800d374:	b005      	add	sp, #20
 800d376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d37a:	4839      	ldr	r0, [pc, #228]	; (800d460 <_printf_i+0x21c>)
 800d37c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d380:	6813      	ldr	r3, [r2, #0]
 800d382:	6821      	ldr	r1, [r4, #0]
 800d384:	1d1d      	adds	r5, r3, #4
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6015      	str	r5, [r2, #0]
 800d38a:	060a      	lsls	r2, r1, #24
 800d38c:	d50b      	bpl.n	800d3a6 <_printf_i+0x162>
 800d38e:	07ca      	lsls	r2, r1, #31
 800d390:	bf44      	itt	mi
 800d392:	f041 0120 	orrmi.w	r1, r1, #32
 800d396:	6021      	strmi	r1, [r4, #0]
 800d398:	b91b      	cbnz	r3, 800d3a2 <_printf_i+0x15e>
 800d39a:	6822      	ldr	r2, [r4, #0]
 800d39c:	f022 0220 	bic.w	r2, r2, #32
 800d3a0:	6022      	str	r2, [r4, #0]
 800d3a2:	2210      	movs	r2, #16
 800d3a4:	e7b7      	b.n	800d316 <_printf_i+0xd2>
 800d3a6:	064d      	lsls	r5, r1, #25
 800d3a8:	bf48      	it	mi
 800d3aa:	b29b      	uxthmi	r3, r3
 800d3ac:	e7ef      	b.n	800d38e <_printf_i+0x14a>
 800d3ae:	4665      	mov	r5, ip
 800d3b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3b4:	fb02 3311 	mls	r3, r2, r1, r3
 800d3b8:	5cc3      	ldrb	r3, [r0, r3]
 800d3ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d3be:	460b      	mov	r3, r1
 800d3c0:	2900      	cmp	r1, #0
 800d3c2:	d1f5      	bne.n	800d3b0 <_printf_i+0x16c>
 800d3c4:	e7b9      	b.n	800d33a <_printf_i+0xf6>
 800d3c6:	6813      	ldr	r3, [r2, #0]
 800d3c8:	6825      	ldr	r5, [r4, #0]
 800d3ca:	6961      	ldr	r1, [r4, #20]
 800d3cc:	1d18      	adds	r0, r3, #4
 800d3ce:	6010      	str	r0, [r2, #0]
 800d3d0:	0628      	lsls	r0, r5, #24
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	d501      	bpl.n	800d3da <_printf_i+0x196>
 800d3d6:	6019      	str	r1, [r3, #0]
 800d3d8:	e002      	b.n	800d3e0 <_printf_i+0x19c>
 800d3da:	066a      	lsls	r2, r5, #25
 800d3dc:	d5fb      	bpl.n	800d3d6 <_printf_i+0x192>
 800d3de:	8019      	strh	r1, [r3, #0]
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	6123      	str	r3, [r4, #16]
 800d3e4:	4665      	mov	r5, ip
 800d3e6:	e7b9      	b.n	800d35c <_printf_i+0x118>
 800d3e8:	6813      	ldr	r3, [r2, #0]
 800d3ea:	1d19      	adds	r1, r3, #4
 800d3ec:	6011      	str	r1, [r2, #0]
 800d3ee:	681d      	ldr	r5, [r3, #0]
 800d3f0:	6862      	ldr	r2, [r4, #4]
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	f7f2 ff0b 	bl	8000210 <memchr>
 800d3fa:	b108      	cbz	r0, 800d400 <_printf_i+0x1bc>
 800d3fc:	1b40      	subs	r0, r0, r5
 800d3fe:	6060      	str	r0, [r4, #4]
 800d400:	6863      	ldr	r3, [r4, #4]
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	2300      	movs	r3, #0
 800d406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d40a:	e7a7      	b.n	800d35c <_printf_i+0x118>
 800d40c:	6923      	ldr	r3, [r4, #16]
 800d40e:	462a      	mov	r2, r5
 800d410:	4639      	mov	r1, r7
 800d412:	4630      	mov	r0, r6
 800d414:	47c0      	blx	r8
 800d416:	3001      	adds	r0, #1
 800d418:	d0aa      	beq.n	800d370 <_printf_i+0x12c>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	079b      	lsls	r3, r3, #30
 800d41e:	d413      	bmi.n	800d448 <_printf_i+0x204>
 800d420:	68e0      	ldr	r0, [r4, #12]
 800d422:	9b03      	ldr	r3, [sp, #12]
 800d424:	4298      	cmp	r0, r3
 800d426:	bfb8      	it	lt
 800d428:	4618      	movlt	r0, r3
 800d42a:	e7a3      	b.n	800d374 <_printf_i+0x130>
 800d42c:	2301      	movs	r3, #1
 800d42e:	464a      	mov	r2, r9
 800d430:	4639      	mov	r1, r7
 800d432:	4630      	mov	r0, r6
 800d434:	47c0      	blx	r8
 800d436:	3001      	adds	r0, #1
 800d438:	d09a      	beq.n	800d370 <_printf_i+0x12c>
 800d43a:	3501      	adds	r5, #1
 800d43c:	68e3      	ldr	r3, [r4, #12]
 800d43e:	9a03      	ldr	r2, [sp, #12]
 800d440:	1a9b      	subs	r3, r3, r2
 800d442:	42ab      	cmp	r3, r5
 800d444:	dcf2      	bgt.n	800d42c <_printf_i+0x1e8>
 800d446:	e7eb      	b.n	800d420 <_printf_i+0x1dc>
 800d448:	2500      	movs	r5, #0
 800d44a:	f104 0919 	add.w	r9, r4, #25
 800d44e:	e7f5      	b.n	800d43c <_printf_i+0x1f8>
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1ac      	bne.n	800d3ae <_printf_i+0x16a>
 800d454:	7803      	ldrb	r3, [r0, #0]
 800d456:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d45a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d45e:	e76c      	b.n	800d33a <_printf_i+0xf6>
 800d460:	08013d99 	.word	0x08013d99
 800d464:	08013daa 	.word	0x08013daa

0800d468 <_sbrk_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4c06      	ldr	r4, [pc, #24]	; (800d484 <_sbrk_r+0x1c>)
 800d46c:	2300      	movs	r3, #0
 800d46e:	4605      	mov	r5, r0
 800d470:	4608      	mov	r0, r1
 800d472:	6023      	str	r3, [r4, #0]
 800d474:	f7f3 f8c6 	bl	8000604 <_sbrk>
 800d478:	1c43      	adds	r3, r0, #1
 800d47a:	d102      	bne.n	800d482 <_sbrk_r+0x1a>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	b103      	cbz	r3, 800d482 <_sbrk_r+0x1a>
 800d480:	602b      	str	r3, [r5, #0]
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	200087c4 	.word	0x200087c4

0800d488 <__sread>:
 800d488:	b510      	push	{r4, lr}
 800d48a:	460c      	mov	r4, r1
 800d48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d490:	f000 f896 	bl	800d5c0 <_read_r>
 800d494:	2800      	cmp	r0, #0
 800d496:	bfab      	itete	ge
 800d498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d49a:	89a3      	ldrhlt	r3, [r4, #12]
 800d49c:	181b      	addge	r3, r3, r0
 800d49e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4a2:	bfac      	ite	ge
 800d4a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4a6:	81a3      	strhlt	r3, [r4, #12]
 800d4a8:	bd10      	pop	{r4, pc}

0800d4aa <__swrite>:
 800d4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ae:	461f      	mov	r7, r3
 800d4b0:	898b      	ldrh	r3, [r1, #12]
 800d4b2:	05db      	lsls	r3, r3, #23
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	4616      	mov	r6, r2
 800d4ba:	d505      	bpl.n	800d4c8 <__swrite+0x1e>
 800d4bc:	2302      	movs	r3, #2
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c4:	f000 f868 	bl	800d598 <_lseek_r>
 800d4c8:	89a3      	ldrh	r3, [r4, #12]
 800d4ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4d2:	81a3      	strh	r3, [r4, #12]
 800d4d4:	4632      	mov	r2, r6
 800d4d6:	463b      	mov	r3, r7
 800d4d8:	4628      	mov	r0, r5
 800d4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4de:	f000 b817 	b.w	800d510 <_write_r>

0800d4e2 <__sseek>:
 800d4e2:	b510      	push	{r4, lr}
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4ea:	f000 f855 	bl	800d598 <_lseek_r>
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	89a3      	ldrh	r3, [r4, #12]
 800d4f2:	bf15      	itete	ne
 800d4f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4fe:	81a3      	strheq	r3, [r4, #12]
 800d500:	bf18      	it	ne
 800d502:	81a3      	strhne	r3, [r4, #12]
 800d504:	bd10      	pop	{r4, pc}

0800d506 <__sclose>:
 800d506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d50a:	f000 b813 	b.w	800d534 <_close_r>
	...

0800d510 <_write_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	4c07      	ldr	r4, [pc, #28]	; (800d530 <_write_r+0x20>)
 800d514:	4605      	mov	r5, r0
 800d516:	4608      	mov	r0, r1
 800d518:	4611      	mov	r1, r2
 800d51a:	2200      	movs	r2, #0
 800d51c:	6022      	str	r2, [r4, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	f7f3 f890 	bl	8000644 <_write>
 800d524:	1c43      	adds	r3, r0, #1
 800d526:	d102      	bne.n	800d52e <_write_r+0x1e>
 800d528:	6823      	ldr	r3, [r4, #0]
 800d52a:	b103      	cbz	r3, 800d52e <_write_r+0x1e>
 800d52c:	602b      	str	r3, [r5, #0]
 800d52e:	bd38      	pop	{r3, r4, r5, pc}
 800d530:	200087c4 	.word	0x200087c4

0800d534 <_close_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4c06      	ldr	r4, [pc, #24]	; (800d550 <_close_r+0x1c>)
 800d538:	2300      	movs	r3, #0
 800d53a:	4605      	mov	r5, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	f7f3 f88e 	bl	8000660 <_close>
 800d544:	1c43      	adds	r3, r0, #1
 800d546:	d102      	bne.n	800d54e <_close_r+0x1a>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	b103      	cbz	r3, 800d54e <_close_r+0x1a>
 800d54c:	602b      	str	r3, [r5, #0]
 800d54e:	bd38      	pop	{r3, r4, r5, pc}
 800d550:	200087c4 	.word	0x200087c4

0800d554 <_fstat_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4c07      	ldr	r4, [pc, #28]	; (800d574 <_fstat_r+0x20>)
 800d558:	2300      	movs	r3, #0
 800d55a:	4605      	mov	r5, r0
 800d55c:	4608      	mov	r0, r1
 800d55e:	4611      	mov	r1, r2
 800d560:	6023      	str	r3, [r4, #0]
 800d562:	f7f3 f880 	bl	8000666 <_fstat>
 800d566:	1c43      	adds	r3, r0, #1
 800d568:	d102      	bne.n	800d570 <_fstat_r+0x1c>
 800d56a:	6823      	ldr	r3, [r4, #0]
 800d56c:	b103      	cbz	r3, 800d570 <_fstat_r+0x1c>
 800d56e:	602b      	str	r3, [r5, #0]
 800d570:	bd38      	pop	{r3, r4, r5, pc}
 800d572:	bf00      	nop
 800d574:	200087c4 	.word	0x200087c4

0800d578 <_isatty_r>:
 800d578:	b538      	push	{r3, r4, r5, lr}
 800d57a:	4c06      	ldr	r4, [pc, #24]	; (800d594 <_isatty_r+0x1c>)
 800d57c:	2300      	movs	r3, #0
 800d57e:	4605      	mov	r5, r0
 800d580:	4608      	mov	r0, r1
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	f7f3 f874 	bl	8000670 <_isatty>
 800d588:	1c43      	adds	r3, r0, #1
 800d58a:	d102      	bne.n	800d592 <_isatty_r+0x1a>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	b103      	cbz	r3, 800d592 <_isatty_r+0x1a>
 800d590:	602b      	str	r3, [r5, #0]
 800d592:	bd38      	pop	{r3, r4, r5, pc}
 800d594:	200087c4 	.word	0x200087c4

0800d598 <_lseek_r>:
 800d598:	b538      	push	{r3, r4, r5, lr}
 800d59a:	4c07      	ldr	r4, [pc, #28]	; (800d5b8 <_lseek_r+0x20>)
 800d59c:	4605      	mov	r5, r0
 800d59e:	4608      	mov	r0, r1
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	6022      	str	r2, [r4, #0]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	f7f3 f864 	bl	8000674 <_lseek>
 800d5ac:	1c43      	adds	r3, r0, #1
 800d5ae:	d102      	bne.n	800d5b6 <_lseek_r+0x1e>
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	b103      	cbz	r3, 800d5b6 <_lseek_r+0x1e>
 800d5b4:	602b      	str	r3, [r5, #0]
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	200087c4 	.word	0x200087c4

0800d5bc <__malloc_lock>:
 800d5bc:	4770      	bx	lr

0800d5be <__malloc_unlock>:
 800d5be:	4770      	bx	lr

0800d5c0 <_read_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4c07      	ldr	r4, [pc, #28]	; (800d5e0 <_read_r+0x20>)
 800d5c4:	4605      	mov	r5, r0
 800d5c6:	4608      	mov	r0, r1
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	6022      	str	r2, [r4, #0]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f7f3 f852 	bl	8000678 <_read>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_read_r+0x1e>
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_read_r+0x1e>
 800d5dc:	602b      	str	r3, [r5, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	200087c4 	.word	0x200087c4

0800d5e4 <_init>:
 800d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e6:	bf00      	nop
 800d5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ea:	bc08      	pop	{r3}
 800d5ec:	469e      	mov	lr, r3
 800d5ee:	4770      	bx	lr

0800d5f0 <_fini>:
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f2:	bf00      	nop
 800d5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5f6:	bc08      	pop	{r3}
 800d5f8:	469e      	mov	lr, r3
 800d5fa:	4770      	bx	lr
